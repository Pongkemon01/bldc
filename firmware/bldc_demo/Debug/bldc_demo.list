
bldc_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007250  08007250  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007250  08007250  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007250  08007250  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001070  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010e4  200010e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b5e9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000324d  00000000  00000000  0003b68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001400  00000000  00000000  0003fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f2d  00000000  00000000  000411f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ae0  00000000  00000000  00044125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afd2e  00000000  00000000  0005dc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d933  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cb4  00000000  00000000  0010d984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007158 	.word	0x08007158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007158 	.word	0x08007158

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fbf6 	bl	80009c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f834 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f9cc 	bl	8000578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f99a 	bl	8000518 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001e4:	f000 f894 	bl	8000310 <MX_SPI1_Init>
  MX_TIM1_Init();
 80001e8:	f000 f8d0 	bl	800038c <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80001ec:	f000 f884 	bl	80002f8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 500;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <main+0x60>)
 80001f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001f6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->DIER |= TIM_DIER_CC1IE_Msk;
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <main+0x60>)
 80001fa:	68db      	ldr	r3, [r3, #12]
 80001fc:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <main+0x60>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	60d3      	str	r3, [r2, #12]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000204:	2100      	movs	r1, #0
 8000206:	480b      	ldr	r0, [pc, #44]	; (8000234 <main+0x64>)
 8000208:	f002 fbd4 	bl	80029b4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800020c:	2100      	movs	r1, #0
 800020e:	4809      	ldr	r0, [pc, #36]	; (8000234 <main+0x64>)
 8000210:	f003 fbca 	bl	80039a8 <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000214:	f004 f932 	bl	800447c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <main+0x68>)
 800021a:	2100      	movs	r1, #0
 800021c:	4807      	ldr	r0, [pc, #28]	; (800023c <main+0x6c>)
 800021e:	f004 f995 	bl	800454c <osThreadNew>
 8000222:	4603      	mov	r3, r0
 8000224:	4a06      	ldr	r2, [pc, #24]	; (8000240 <main+0x70>)
 8000226:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000228:	f004 f95c 	bl	80044e4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	e7fe      	b.n	800022c <main+0x5c>
 800022e:	bf00      	nop
 8000230:	40012c00 	.word	0x40012c00
 8000234:	200000f4 	.word	0x200000f4
 8000238:	08007194 	.word	0x08007194
 800023c:	0800060d 	.word	0x0800060d
 8000240:	200001c8 	.word	0x200001c8

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b096      	sub	sp, #88	; 0x58
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f006 feb6 	bl	8006fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 031c 	add.w	r3, r7, #28
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]
 8000276:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	2302      	movs	r3, #2
 800027a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000280:	2310      	movs	r3, #16
 8000282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000288:	2300      	movs	r3, #0
 800028a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800028c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000290:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fe96 	bl	8000fc8 <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002a2:	f000 f9bb 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2302      	movs	r3, #2
 80002ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002bc:	f107 031c 	add.w	r3, r7, #28
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 febe 	bl	8002044 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ce:	f000 f9a5 	bl	800061c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80002d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002dc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 f8e5 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002ec:	f000 f996 	bl	800061c <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3758      	adds	r7, #88	; 0x58
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2105      	movs	r1, #5
 8000300:	201b      	movs	r0, #27
 8000302:	f000 fca0 	bl	8000c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000306:	201b      	movs	r0, #27
 8000308:	f000 fcb9 	bl	8000c7e <HAL_NVIC_EnableIRQ>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <MX_SPI1_Init+0x74>)
 8000316:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <MX_SPI1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_SPI1_Init+0x74>)
 800031c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000322:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_SPI1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000328:	4b16      	ldr	r3, [pc, #88]	; (8000384 <MX_SPI1_Init+0x74>)
 800032a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800032e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_SPI1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_SPI1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_SPI1_Init+0x74>)
 800033e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000342:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_SPI1_Init+0x74>)
 8000346:	2220      	movs	r2, #32
 8000348:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_SPI1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_SPI1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_SPI1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_SPI1_Init+0x74>)
 800035e:	2207      	movs	r2, #7
 8000360:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_SPI1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_SPI1_Init+0x74>)
 800036a:	2208      	movs	r2, #8
 800036c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_SPI1_Init+0x74>)
 8000370:	f002 f9c4 	bl	80026fc <HAL_SPI_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800037a:	f000 f94f 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000090 	.word	0x20000090
 8000388:	40013000 	.word	0x40013000

0800038c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b09a      	sub	sp, #104	; 0x68
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
 80003bc:	615a      	str	r2, [r3, #20]
 80003be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	222c      	movs	r2, #44	; 0x2c
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f006 fdfc 	bl	8006fc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003cc:	4b50      	ldr	r3, [pc, #320]	; (8000510 <MX_TIM1_Init+0x184>)
 80003ce:	4a51      	ldr	r2, [pc, #324]	; (8000514 <MX_TIM1_Init+0x188>)
 80003d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003d2:	4b4f      	ldr	r3, [pc, #316]	; (8000510 <MX_TIM1_Init+0x184>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80003d8:	4b4d      	ldr	r3, [pc, #308]	; (8000510 <MX_TIM1_Init+0x184>)
 80003da:	2260      	movs	r2, #96	; 0x60
 80003dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2560;
 80003de:	4b4c      	ldr	r3, [pc, #304]	; (8000510 <MX_TIM1_Init+0x184>)
 80003e0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80003e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e6:	4b4a      	ldr	r3, [pc, #296]	; (8000510 <MX_TIM1_Init+0x184>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ec:	4b48      	ldr	r3, [pc, #288]	; (8000510 <MX_TIM1_Init+0x184>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f2:	4b47      	ldr	r3, [pc, #284]	; (8000510 <MX_TIM1_Init+0x184>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003f8:	4845      	ldr	r0, [pc, #276]	; (8000510 <MX_TIM1_Init+0x184>)
 80003fa:	f002 fa22 	bl	8002842 <HAL_TIM_Base_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000404:	f000 f90a 	bl	800061c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800040e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000412:	4619      	mov	r1, r3
 8000414:	483e      	ldr	r0, [pc, #248]	; (8000510 <MX_TIM1_Init+0x184>)
 8000416:	f002 fded 	bl	8002ff4 <HAL_TIM_ConfigClockSource>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000420:	f000 f8fc 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000424:	483a      	ldr	r0, [pc, #232]	; (8000510 <MX_TIM1_Init+0x184>)
 8000426:	f002 fa63 	bl	80028f0 <HAL_TIM_PWM_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000430:	f000 f8f4 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000438:	2300      	movs	r3, #0
 800043a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000440:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000444:	4619      	mov	r1, r3
 8000446:	4832      	ldr	r0, [pc, #200]	; (8000510 <MX_TIM1_Init+0x184>)
 8000448:	f003 fb54 	bl	8003af4 <HAL_TIMEx_MasterConfigSynchronization>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000452:	f000 f8e3 	bl	800061c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000456:	2360      	movs	r3, #96	; 0x60
 8000458:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 800045a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800045e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000460:	2300      	movs	r3, #0
 8000462:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000464:	2300      	movs	r3, #0
 8000466:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000468:	2300      	movs	r3, #0
 800046a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000478:	2200      	movs	r2, #0
 800047a:	4619      	mov	r1, r3
 800047c:	4824      	ldr	r0, [pc, #144]	; (8000510 <MX_TIM1_Init+0x184>)
 800047e:	f002 fca5 	bl	8002dcc <HAL_TIM_PWM_ConfigChannel>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000488:	f000 f8c8 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800048c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000490:	2204      	movs	r2, #4
 8000492:	4619      	mov	r1, r3
 8000494:	481e      	ldr	r0, [pc, #120]	; (8000510 <MX_TIM1_Init+0x184>)
 8000496:	f002 fc99 	bl	8002dcc <HAL_TIM_PWM_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80004a0:	f000 f8bc 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a8:	2208      	movs	r2, #8
 80004aa:	4619      	mov	r1, r3
 80004ac:	4818      	ldr	r0, [pc, #96]	; (8000510 <MX_TIM1_Init+0x184>)
 80004ae:	f002 fc8d 	bl	8002dcc <HAL_TIM_PWM_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80004b8:	f000 f8b0 	bl	800061c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <MX_TIM1_Init+0x184>)
 80004f2:	f003 fb6d 	bl	8003bd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80004fc:	f000 f88e 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <MX_TIM1_Init+0x184>)
 8000502:	f000 f939 	bl	8000778 <HAL_TIM_MspPostInit>

}
 8000506:	bf00      	nop
 8000508:	3768      	adds	r7, #104	; 0x68
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200000f4 	.word	0x200000f4
 8000514:	40012c00 	.word	0x40012c00

08000518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800051e:	4a15      	ldr	r2, [pc, #84]	; (8000574 <MX_USART2_UART_Init+0x5c>)
 8000520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000524:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_USART2_UART_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_USART2_UART_Init+0x58>)
 800055c:	f003 fbf3 	bl	8003d46 <HAL_UART_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000566:	f000 f859 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000140 	.word	0x20000140
 8000574:	40004400 	.word	0x40004400

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <MX_GPIO_Init+0x8c>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_GPIO_Init+0x8c>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_GPIO_Init+0x8c>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_GPIO_Init+0x8c>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <MX_GPIO_Init+0x8c>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_GPIO_Init+0x8c>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_GPIO_Init+0x8c>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a10      	ldr	r2, [pc, #64]	; (8000604 <MX_GPIO_Init+0x8c>)
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_GPIO_Init+0x8c>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <MX_GPIO_Init+0x90>)
 80005dc:	f000 fcdc 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80005e0:	2308      	movs	r3, #8
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4619      	mov	r1, r3
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_GPIO_Init+0x90>)
 80005f8:	f000 fb5c 	bl	8000cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	48000400 	.word	0x48000400

0800060c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f004 f843 	bl	80046a0 <osDelay>
 800061a:	e7fb      	b.n	8000614 <StartDefaultTask+0x8>

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <HAL_MspInit+0x4c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <HAL_MspInit+0x4c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_MspInit+0x4c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <HAL_MspInit+0x4c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <HAL_MspInit+0x4c>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_MspInit+0x4c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	210f      	movs	r1, #15
 8000662:	f06f 0001 	mvn.w	r0, #1
 8000666:	f000 faee 	bl	8000c46 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a25      	ldr	r2, [pc, #148]	; (800072c <HAL_SPI_MspInit+0xb4>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d144      	bne.n	8000724 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a24      	ldr	r2, [pc, #144]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 80006a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 80006d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_SPI_MspInit+0xb8>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80006e2:	2370      	movs	r3, #112	; 0x70
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f2:	2305      	movs	r3, #5
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f000 fad8 	bl	8000cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000704:	2320      	movs	r3, #32
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000714:	2305      	movs	r3, #5
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_SPI_MspInit+0xbc>)
 8000720:	f000 fac8 	bl	8000cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013000 	.word	0x40013000
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_TIM_Base_MspInit+0x38>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d10b      	bne.n	8000762 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_TIM_Base_MspInit+0x3c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a09      	ldr	r2, [pc, #36]	; (8000774 <HAL_TIM_Base_MspInit+0x3c>)
 8000750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <HAL_TIM_Base_MspInit+0x3c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40012c00 	.word	0x40012c00
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a20      	ldr	r2, [pc, #128]	; (8000818 <HAL_TIM_MspPostInit+0xa0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d139      	bne.n	800080e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <HAL_TIM_MspPostInit+0xa4>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a1f      	ldr	r2, [pc, #124]	; (800081c <HAL_TIM_MspPostInit+0xa4>)
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_TIM_MspPostInit+0xa4>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <HAL_TIM_MspPostInit+0xa4>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a19      	ldr	r2, [pc, #100]	; (800081c <HAL_TIM_MspPostInit+0xa4>)
 80007b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <HAL_TIM_MspPostInit+0xa4>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80007ca:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80007dc:	2306      	movs	r3, #6
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 fa63 	bl	8000cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ee:	2303      	movs	r3, #3
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80007fe:	2306      	movs	r3, #6
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <HAL_TIM_MspPostInit+0xa8>)
 800080a:	f000 fa53 	bl	8000cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40012c00 	.word	0x40012c00
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <HAL_UART_MspInit+0x80>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d129      	bne.n	800089a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x84>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_UART_MspInit+0x84>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000876:	f248 0304 	movw	r3, #32772	; 0x8004
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000888:	2307      	movs	r3, #7
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fa0d 	bl	8000cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f8b8 	bl	8000a50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008e0:	f005 fb24 	bl	8005f2c <xTaskGetSchedulerState>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d001      	beq.n	80008ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008ea:	f006 f8cd 	bl	8006a88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	static uint32_t current_cnt;
	 current_cnt = TIM1->CNT;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <TIM1_CC_IRQHandler+0x48>)
 80008fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fc:	4a10      	ldr	r2, [pc, #64]	; (8000940 <TIM1_CC_IRQHandler+0x4c>)
 80008fe:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <TIM1_CC_IRQHandler+0x50>)
 8000902:	f002 f943 	bl	8002b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  while(current_cnt == TIM1->CNT);	// Wait until CNT change
 8000906:	bf00      	nop
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <TIM1_CC_IRQHandler+0x48>)
 800090a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <TIM1_CC_IRQHandler+0x4c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d0f9      	beq.n	8000908 <TIM1_CC_IRQHandler+0x14>
  if(current_cnt < TIM1->CNT)
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <TIM1_CC_IRQHandler+0x48>)
 8000916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <TIM1_CC_IRQHandler+0x4c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d905      	bls.n	800092c <TIM1_CC_IRQHandler+0x38>
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2108      	movs	r1, #8
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <TIM1_CC_IRQHandler+0x54>)
 8000926:	f000 fb37 	bl	8000f98 <HAL_GPIO_WritePin>
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
  }

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800092a:	e004      	b.n	8000936 <TIM1_CC_IRQHandler+0x42>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2108      	movs	r1, #8
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <TIM1_CC_IRQHandler+0x54>)
 8000932:	f000 fb31 	bl	8000f98 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40012c00 	.word	0x40012c00
 8000940:	200001cc 	.word	0x200001cc
 8000944:	200000f4 	.word	0x200000f4
 8000948:	48000400 	.word	0x48000400

0800094c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <SystemInit+0x20>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <SystemInit+0x20>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000974:	f7ff ffea 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	; (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f006 fadd 	bl	8006f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a2:	f7ff fc15 	bl	80001d0 <main>

080009a6 <LoopForever>:

LoopForever:
    b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009b4:	08007258 	.word	0x08007258
  ldr r2, =_sbss
 80009b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009bc:	200010e4 	.word	0x200010e4

080009c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x28>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x28>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f92b 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff fe22 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f943 	bl	8000c9a <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2c:	f000 f90b 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	200001d0 	.word	0x200001d0

08000a78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200001d0 	.word	0x200001d0

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4907      	ldr	r1, [pc, #28]	; (8000b2c <__NVIC_EnableIRQ+0x38>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	; (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	; 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff29 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff3e 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff8e 	bl	8000b84 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff31 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffa2 	bl	8000bec <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc2:	e14e      	b.n	8000f62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 8140 	beq.w	8000f5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d005      	beq.n	8000cf4 <HAL_GPIO_Init+0x40>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d130      	bne.n	8000d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	f003 0201 	and.w	r2, r3, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d017      	beq.n	8000d92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d123      	bne.n	8000de6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	08da      	lsrs	r2, r3, #3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3208      	adds	r2, #8
 8000de0:	6939      	ldr	r1, [r7, #16]
 8000de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0203 	and.w	r2, r3, #3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 809a 	beq.w	8000f5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e28:	4b55      	ldr	r3, [pc, #340]	; (8000f80 <HAL_GPIO_Init+0x2cc>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a54      	ldr	r2, [pc, #336]	; (8000f80 <HAL_GPIO_Init+0x2cc>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b52      	ldr	r3, [pc, #328]	; (8000f80 <HAL_GPIO_Init+0x2cc>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e40:	4a50      	ldr	r2, [pc, #320]	; (8000f84 <HAL_GPIO_Init+0x2d0>)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e6a:	d013      	beq.n	8000e94 <HAL_GPIO_Init+0x1e0>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a46      	ldr	r2, [pc, #280]	; (8000f88 <HAL_GPIO_Init+0x2d4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d00d      	beq.n	8000e90 <HAL_GPIO_Init+0x1dc>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a45      	ldr	r2, [pc, #276]	; (8000f8c <HAL_GPIO_Init+0x2d8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0x1d8>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <HAL_GPIO_Init+0x2dc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_Init+0x1d4>
 8000e84:	2303      	movs	r3, #3
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1e2>
 8000e88:	2305      	movs	r3, #5
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x1e2>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x1e2>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x1e2>
 8000e94:	2300      	movs	r3, #0
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea6:	4937      	ldr	r1, [pc, #220]	; (8000f84 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb4:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed8:	4a2e      	ldr	r2, [pc, #184]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f02:	4a24      	ldr	r2, [pc, #144]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f aea9 	bne.w	8000cc4 <HAL_GPIO_Init+0x10>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48000c00 	.word	0x48000c00
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f001 b823 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 817d 	beq.w	80012fe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001004:	4bbc      	ldr	r3, [pc, #752]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b04      	cmp	r3, #4
 800100e:	d00c      	beq.n	800102a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001010:	4bb9      	ldr	r3, [pc, #740]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b08      	cmp	r3, #8
 800101a:	d15c      	bne.n	80010d6 <HAL_RCC_OscConfig+0x10e>
 800101c:	4bb6      	ldr	r3, [pc, #728]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d155      	bne.n	80010d6 <HAL_RCC_OscConfig+0x10e>
 800102a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800103e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001042:	fab3 f383 	clz	r3, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d102      	bne.n	800105c <HAL_RCC_OscConfig+0x94>
 8001056:	4ba8      	ldr	r3, [pc, #672]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	e015      	b.n	8001088 <HAL_RCC_OscConfig+0xc0>
 800105c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001060:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001074:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001078:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001084:	4b9c      	ldr	r3, [pc, #624]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800108c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001090:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001094:	fa92 f2a2 	rbit	r2, r2
 8001098:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800109c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	f042 0220 	orr.w	r2, r2, #32
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	f002 021f 	and.w	r2, r2, #31
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 811f 	beq.w	80012fc <HAL_RCC_OscConfig+0x334>
 80010be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 8116 	bne.w	80012fc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f000 bfaf 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x12e>
 80010e8:	4b83      	ldr	r3, [pc, #524]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a82      	ldr	r2, [pc, #520]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e036      	b.n	8001164 <HAL_RCC_OscConfig+0x19c>
 80010f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x158>
 8001106:	4b7c      	ldr	r3, [pc, #496]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a7b      	ldr	r2, [pc, #492]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 800110c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b79      	ldr	r3, [pc, #484]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a78      	ldr	r2, [pc, #480]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e021      	b.n	8001164 <HAL_RCC_OscConfig+0x19c>
 8001120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x184>
 8001132:	4b71      	ldr	r3, [pc, #452]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a70      	ldr	r2, [pc, #448]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b6e      	ldr	r3, [pc, #440]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6d      	ldr	r2, [pc, #436]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0x19c>
 800114c:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a66      	ldr	r2, [pc, #408]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001164:	4b64      	ldr	r3, [pc, #400]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	f023 020f 	bic.w	r2, r3, #15
 800116c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	495f      	ldr	r1, [pc, #380]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 800117a:	4313      	orrs	r3, r2
 800117c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d059      	beq.n	8001242 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fc73 	bl	8000a78 <HAL_GetTick>
 8001192:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	e00a      	b.n	80011ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fc6e 	bl	8000a78 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b64      	cmp	r3, #100	; 0x64
 80011a6:	d902      	bls.n	80011ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	f000 bf43 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>
 80011ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	095b      	lsrs	r3, r3, #5
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d102      	bne.n	80011e0 <HAL_RCC_OscConfig+0x218>
 80011da:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	e015      	b.n	800120c <HAL_RCC_OscConfig+0x244>
 80011e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001208:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001210:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001214:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001218:	fa92 f2a2 	rbit	r2, r2
 800121c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001220:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001224:	fab2 f282 	clz	r2, r2
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f042 0220 	orr.w	r2, r2, #32
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	f002 021f 	and.w	r2, r2, #31
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ab      	beq.n	8001198 <HAL_RCC_OscConfig+0x1d0>
 8001240:	e05d      	b.n	80012fe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fc19 	bl	8000a78 <HAL_GetTick>
 8001246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	e00a      	b.n	8001262 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fc14 	bl	8000a78 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b64      	cmp	r3, #100	; 0x64
 800125a:	d902      	bls.n	8001262 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	f000 bee9 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>
 8001262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001266:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001276:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	fab3 f383 	clz	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	095b      	lsrs	r3, r3, #5
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HAL_RCC_OscConfig+0x2cc>
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	e015      	b.n	80012c0 <HAL_RCC_OscConfig+0x2f8>
 8001294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001298:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_RCC_OscConfig+0x330>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012c8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012cc:	fa92 f2a2 	rbit	r2, r2
 80012d0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012d8:	fab2 f282 	clz	r2, r2
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f002 021f 	and.w	r2, r2, #31
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ab      	bne.n	800124c <HAL_RCC_OscConfig+0x284>
 80012f4:	e003      	b.n	80012fe <HAL_RCC_OscConfig+0x336>
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 817d 	beq.w	800160e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001314:	4ba6      	ldr	r3, [pc, #664]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00b      	beq.n	8001338 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001320:	4ba3      	ldr	r3, [pc, #652]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d172      	bne.n	8001412 <HAL_RCC_OscConfig+0x44a>
 800132c:	4ba0      	ldr	r3, [pc, #640]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d16c      	bne.n	8001412 <HAL_RCC_OscConfig+0x44a>
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800134a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	095b      	lsrs	r3, r3, #5
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <HAL_RCC_OscConfig+0x3a0>
 8001362:	4b93      	ldr	r3, [pc, #588]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	e013      	b.n	8001390 <HAL_RCC_OscConfig+0x3c8>
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001380:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800138c:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	2202      	movs	r2, #2
 8001392:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001396:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800139a:	fa92 f2a2 	rbit	r2, r2
 800139e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80013a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013a6:	fab2 f282 	clz	r2, r2
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	f002 021f 	and.w	r2, r2, #31
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00a      	beq.n	80013d8 <HAL_RCC_OscConfig+0x410>
 80013c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d002      	beq.n	80013d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	f000 be2e 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b75      	ldr	r3, [pc, #468]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	21f8      	movs	r1, #248	; 0xf8
 80013ee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013f6:	fa91 f1a1 	rbit	r1, r1
 80013fa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001402:	fab1 f181 	clz	r1, r1
 8001406:	b2c9      	uxtb	r1, r1
 8001408:	408b      	lsls	r3, r1
 800140a:	4969      	ldr	r1, [pc, #420]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001410:	e0fd      	b.n	800160e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8088 	beq.w	8001534 <HAL_RCC_OscConfig+0x56c>
 8001424:	2301      	movs	r3, #1
 8001426:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001436:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001444:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	461a      	mov	r2, r3
 800144c:	2301      	movs	r3, #1
 800144e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb12 	bl	8000a78 <HAL_GetTick>
 8001454:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fb0d 	bl	8000a78 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d902      	bls.n	8001470 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	f000 bde2 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001482:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	095b      	lsrs	r3, r3, #5
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d102      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4d8>
 800149a:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	e013      	b.n	80014c8 <HAL_RCC_OscConfig+0x500>
 80014a0:	2302      	movs	r3, #2
 80014a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	2202      	movs	r2, #2
 80014ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014d2:	fa92 f2a2 	rbit	r2, r2
 80014d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014de:	fab2 f282 	clz	r2, r2
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	f042 0220 	orr.w	r2, r2, #32
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	f002 021f 	and.w	r2, r2, #31
 80014ee:	2101      	movs	r1, #1
 80014f0:	fa01 f202 	lsl.w	r2, r1, r2
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0af      	beq.n	800145a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	21f8      	movs	r1, #248	; 0xf8
 8001510:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001518:	fa91 f1a1 	rbit	r1, r1
 800151c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001520:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001524:	fab1 f181 	clz	r1, r1
 8001528:	b2c9      	uxtb	r1, r1
 800152a:	408b      	lsls	r3, r1
 800152c:	4920      	ldr	r1, [pc, #128]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
 8001532:	e06c      	b.n	800160e <HAL_RCC_OscConfig+0x646>
 8001534:	2301      	movs	r3, #1
 8001536:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	461a      	mov	r2, r3
 800155c:	2300      	movs	r3, #0
 800155e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fa8a 	bl	8000a78 <HAL_GetTick>
 8001564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fa85 	bl	8000a78 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d902      	bls.n	8001580 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	f000 bd5a 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d104      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5ec>
 80015aa:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <HAL_RCC_OscConfig+0x5e8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	e015      	b.n	80015dc <HAL_RCC_OscConfig+0x614>
 80015b0:	40021000 	.word	0x40021000
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015d8:	4bc8      	ldr	r3, [pc, #800]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	2202      	movs	r2, #2
 80015de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015e6:	fa92 f2a2 	rbit	r2, r2
 80015ea:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015f2:	fab2 f282 	clz	r2, r2
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f042 0220 	orr.w	r2, r2, #32
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f002 021f 	and.w	r2, r2, #31
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ad      	bne.n	800156a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8110 	beq.w	8001844 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d079      	beq.n	8001728 <HAL_RCC_OscConfig+0x760>
 8001634:	2301      	movs	r3, #1
 8001636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4bab      	ldr	r3, [pc, #684]	; (8001900 <HAL_RCC_OscConfig+0x938>)
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	461a      	mov	r2, r3
 800165a:	2301      	movs	r3, #1
 800165c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fa0b 	bl	8000a78 <HAL_GetTick>
 8001662:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e00a      	b.n	800167e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fa06 	bl	8000a78 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d902      	bls.n	800167e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	f000 bcdb 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fa93 f2a3 	rbit	r2, r3
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016bc:	2202      	movs	r2, #2
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d8:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 80016da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016e4:	2102      	movs	r1, #2
 80016e6:	6019      	str	r1, [r3, #0]
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f1a3 	rbit	r1, r3
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016fe:	6019      	str	r1, [r3, #0]
  return result;
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0a0      	beq.n	8001668 <HAL_RCC_OscConfig+0x6a0>
 8001726:	e08d      	b.n	8001844 <HAL_RCC_OscConfig+0x87c>
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800174a:	601a      	str	r2, [r3, #0]
  return result;
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001754:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	4b68      	ldr	r3, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x938>)
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	461a      	mov	r2, r3
 8001766:	2300      	movs	r3, #0
 8001768:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff f985 	bl	8000a78 <HAL_GetTick>
 800176e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff f980 	bl	8000a78 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d902      	bls.n	800178a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	f000 bc55 	b.w	8002034 <HAL_RCC_OscConfig+0x106c>
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001792:	2202      	movs	r2, #2
 8001794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017b6:	2202      	movs	r2, #2
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa93 f2a3 	rbit	r2, r3
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017da:	2202      	movs	r2, #2
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fa93 f2a3 	rbit	r2, r3
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 80017f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001802:	2102      	movs	r1, #2
 8001804:	6019      	str	r1, [r3, #0]
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f1a3 	rbit	r1, r3
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800181c:	6019      	str	r1, [r3, #0]
  return result;
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d197      	bne.n	8001774 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 81a1 	beq.w	8001b9c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d116      	bne.n	800189a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001876:	61d3      	str	r3, [r2, #28]
 8001878:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001892:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_RCC_OscConfig+0x93c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d11a      	bne.n	80018dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCC_OscConfig+0x93c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <HAL_RCC_OscConfig+0x93c>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b2:	f7ff f8e1 	bl	8000a78 <HAL_GetTick>
 80018b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	e009      	b.n	80018d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018bc:	f7ff f8dc 	bl	8000a78 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e3b1      	b.n	8002034 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_RCC_OscConfig+0x93c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ef      	beq.n	80018bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10d      	bne.n	8001908 <HAL_RCC_OscConfig+0x940>
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a02      	ldr	r2, [pc, #8]	; (80018fc <HAL_RCC_OscConfig+0x934>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	e03c      	b.n	8001974 <HAL_RCC_OscConfig+0x9ac>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	10908120 	.word	0x10908120
 8001904:	40007000 	.word	0x40007000
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0x96a>
 8001918:	4bc1      	ldr	r3, [pc, #772]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4ac0      	ldr	r2, [pc, #768]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	4bbe      	ldr	r3, [pc, #760]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4abd      	ldr	r2, [pc, #756]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e020      	b.n	8001974 <HAL_RCC_OscConfig+0x9ac>
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x994>
 8001942:	4bb7      	ldr	r3, [pc, #732]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4ab6      	ldr	r2, [pc, #728]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6213      	str	r3, [r2, #32]
 800194e:	4bb4      	ldr	r3, [pc, #720]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4ab3      	ldr	r2, [pc, #716]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0x9ac>
 800195c:	4bb0      	ldr	r3, [pc, #704]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4aaf      	ldr	r2, [pc, #700]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	4bad      	ldr	r3, [pc, #692]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4aac      	ldr	r2, [pc, #688]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 800196e:	f023 0304 	bic.w	r3, r3, #4
 8001972:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8081 	beq.w	8001a88 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff f877 	bl	8000a78 <HAL_GetTick>
 800198a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7ff f872 	bl	8000a78 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e345      	b.n	8002034 <HAL_RCC_OscConfig+0x106c>
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019ee:	601a      	str	r2, [r3, #0]
  return result;
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d102      	bne.n	8001a14 <HAL_RCC_OscConfig+0xa4c>
 8001a0e:	4b84      	ldr	r3, [pc, #528]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	e013      	b.n	8001a3c <HAL_RCC_OscConfig+0xa74>
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	4b79      	ldr	r3, [pc, #484]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a40:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a44:	2102      	movs	r1, #2
 8001a46:	6011      	str	r1, [r2, #0]
 8001a48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	fa92 f1a2 	rbit	r1, r2
 8001a56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a5a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a5e:	6011      	str	r1, [r2, #0]
  return result;
 8001a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a64:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	fab2 f282 	clz	r2, r2
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f002 021f 	and.w	r2, r2, #31
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d084      	beq.n	8001990 <HAL_RCC_OscConfig+0x9c8>
 8001a86:	e07f      	b.n	8001b88 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a88:	f7fe fff6 	bl	8000a78 <HAL_GetTick>
 8001a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	e00b      	b.n	8001aaa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7fe fff1 	bl	8000a78 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e2c4      	b.n	8002034 <HAL_RCC_OscConfig+0x106c>
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fa93 f2a3 	rbit	r2, r3
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001af0:	601a      	str	r2, [r3, #0]
  return result;
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001afa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_OscConfig+0xb4e>
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	e013      	b.n	8001b3e <HAL_RCC_OscConfig+0xb76>
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b42:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b46:	2102      	movs	r1, #2
 8001b48:	6011      	str	r1, [r2, #0]
 8001b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	fa92 f1a2 	rbit	r1, r2
 8001b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b5c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b60:	6011      	str	r1, [r2, #0]
  return result;
 8001b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b66:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f002 021f 	and.w	r2, r2, #31
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d184      	bne.n	8001a92 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b88:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 8242 	beq.w	8002032 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_RCC_OscConfig+0xc58>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	f000 8213 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	f040 8162 	bne.w	8001e92 <HAL_RCC_OscConfig+0xeca>
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bf2:	601a      	str	r2, [r3, #0]
  return result;
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bfc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe ff30 	bl	8000a78 <HAL_GetTick>
 8001c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	e00c      	b.n	8001c38 <HAL_RCC_OscConfig+0xc70>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c24:	f7fe ff28 	bl	8000a78 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1fd      	b.n	8002034 <HAL_RCC_OscConfig+0x106c>
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c5c:	601a      	str	r2, [r3, #0]
  return result;
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_RCC_OscConfig+0xcba>
 8001c7c:	4bb0      	ldr	r3, [pc, #704]	; (8001f40 <HAL_RCC_OscConfig+0xf78>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	e027      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd0a>
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f2a3 	rbit	r2, r3
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cac:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	fa93 f2a3 	rbit	r2, r3
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	4b9c      	ldr	r3, [pc, #624]	; (8001f40 <HAL_RCC_OscConfig+0xf78>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cda:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cde:	6011      	str	r1, [r2, #0]
 8001ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	fa92 f1a2 	rbit	r1, r2
 8001cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cf6:	6011      	str	r1, [r2, #0]
  return result;
 8001cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cfc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	fab2 f282 	clz	r2, r2
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f042 0220 	orr.w	r2, r2, #32
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f002 021f 	and.w	r2, r2, #31
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f202 	lsl.w	r2, r1, r2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d182      	bne.n	8001c24 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0xf78>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	497f      	ldr	r1, [pc, #508]	; (8001f40 <HAL_RCC_OscConfig+0xf78>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d74:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	461a      	mov	r2, r3
 8001d88:	2301      	movs	r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fe74 	bl	8000a78 <HAL_GetTick>
 8001d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d94:	e009      	b.n	8001daa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe fe6f 	bl	8000a78 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e144      	b.n	8002034 <HAL_RCC_OscConfig+0x106c>
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dce:	601a      	str	r2, [r3, #0]
  return result;
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d102      	bne.n	8001df4 <HAL_RCC_OscConfig+0xe2c>
 8001dee:	4b54      	ldr	r3, [pc, #336]	; (8001f40 <HAL_RCC_OscConfig+0xf78>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	e027      	b.n	8001e44 <HAL_RCC_OscConfig+0xe7c>
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_OscConfig+0xf78>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e48:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e50:	6011      	str	r1, [r2, #0]
 8001e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e56:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	fa92 f1a2 	rbit	r1, r2
 8001e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e68:	6011      	str	r1, [r2, #0]
  return result;
 8001e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e6e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	fab2 f282 	clz	r2, r2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d082      	beq.n	8001d96 <HAL_RCC_OscConfig+0xdce>
 8001e90:	e0cf      	b.n	8002032 <HAL_RCC_OscConfig+0x106a>
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001eb6:	601a      	str	r2, [r3, #0]
  return result;
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ec0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ecc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fdce 	bl	8000a78 <HAL_GetTick>
 8001edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe fdc9 	bl	8000a78 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e09e      	b.n	8002034 <HAL_RCC_OscConfig+0x106c>
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f1a:	601a      	str	r2, [r3, #0]
  return result;
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d104      	bne.n	8001f44 <HAL_RCC_OscConfig+0xf7c>
 8001f3a:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <HAL_RCC_OscConfig+0xf78>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	e029      	b.n	8001f94 <HAL_RCC_OscConfig+0xfcc>
 8001f40:	40021000 	.word	0x40021000
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f2a3 	rbit	r2, r3
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f2a3 	rbit	r2, r3
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_RCC_OscConfig+0x1078>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f98:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fa0:	6011      	str	r1, [r2, #0]
 8001fa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	fa92 f1a2 	rbit	r1, r2
 8001fb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fb4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fb8:	6011      	str	r1, [r2, #0]
  return result;
 8001fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fbe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	fab2 f282 	clz	r2, r2
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	f042 0220 	orr.w	r2, r2, #32
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f002 021f 	and.w	r2, r2, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d180      	bne.n	8001ee2 <HAL_RCC_OscConfig+0xf1a>
 8001fe0:	e027      	b.n	8002032 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e01e      	b.n	8002034 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_OscConfig+0x1078>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ffe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002002:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	429a      	cmp	r2, r3
 8002014:	d10b      	bne.n	800202e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002016:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800201a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b09e      	sub	sp, #120	; 0x78
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e162      	b.n	8002322 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b90      	ldr	r3, [pc, #576]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d910      	bls.n	800208c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b8d      	ldr	r3, [pc, #564]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	498b      	ldr	r1, [pc, #556]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e14a      	b.n	8002322 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b82      	ldr	r3, [pc, #520]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	497f      	ldr	r1, [pc, #508]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80dc 	beq.w	8002270 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d13c      	bne.n	800213a <HAL_RCC_ClockConfig+0xf6>
 80020c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_ClockConfig+0xa6>
 80020e4:	4b6f      	ldr	r3, [pc, #444]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	e00f      	b.n	800210a <HAL_RCC_ClockConfig+0xc6>
 80020ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	667b      	str	r3, [r7, #100]	; 0x64
 80020f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fc:	663b      	str	r3, [r7, #96]	; 0x60
 80020fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800210e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800211a:	fab2 f282 	clz	r2, r2
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f042 0220 	orr.w	r2, r2, #32
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f002 021f 	and.w	r2, r2, #31
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d17b      	bne.n	800222e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0f3      	b.n	8002322 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d13c      	bne.n	80021bc <HAL_RCC_ClockConfig+0x178>
 8002142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002146:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_RCC_ClockConfig+0x128>
 8002166:	4b4f      	ldr	r3, [pc, #316]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e00f      	b.n	800218c <HAL_RCC_ClockConfig+0x148>
 800216c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002170:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	647b      	str	r3, [r7, #68]	; 0x44
 800217a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217e:	643b      	str	r3, [r7, #64]	; 0x40
 8002180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002188:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002190:	63ba      	str	r2, [r7, #56]	; 0x38
 8002192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002194:	fa92 f2a2 	rbit	r2, r2
 8002198:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800219a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f042 0220 	orr.w	r2, r2, #32
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f002 021f 	and.w	r2, r2, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d13a      	bne.n	800222e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0b2      	b.n	8002322 <HAL_RCC_ClockConfig+0x2de>
 80021bc:	2302      	movs	r3, #2
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d102      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x1a0>
 80021de:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	e00d      	b.n	8002200 <HAL_RCC_ClockConfig+0x1bc>
 80021e4:	2302      	movs	r3, #2
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	2302      	movs	r3, #2
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	2202      	movs	r2, #2
 8002202:	61ba      	str	r2, [r7, #24]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	fa92 f2a2 	rbit	r2, r2
 800220a:	617a      	str	r2, [r7, #20]
  return result;
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e079      	b.n	8002322 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	491a      	ldr	r1, [pc, #104]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7fe fc1a 	bl	8000a78 <HAL_GetTick>
 8002244:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7fe fc16 	bl	8000a78 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e061      	b.n	8002322 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d214      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	4906      	ldr	r1, [pc, #24]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e040      	b.n	8002322 <HAL_RCC_ClockConfig+0x2de>
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_ClockConfig+0x2e8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	491a      	ldr	r1, [pc, #104]	; (800232c <HAL_RCC_ClockConfig+0x2e8>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_RCC_ClockConfig+0x2e8>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4912      	ldr	r1, [pc, #72]	; (800232c <HAL_RCC_ClockConfig+0x2e8>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022e6:	f000 f829 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022ea:	4601      	mov	r1, r0
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_RCC_ClockConfig+0x2e8>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f4:	22f0      	movs	r2, #240	; 0xf0
 80022f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	fa92 f2a2 	rbit	r2, r2
 80022fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	40d3      	lsrs	r3, r2
 800230a:	4a09      	ldr	r2, [pc, #36]	; (8002330 <HAL_RCC_ClockConfig+0x2ec>)
 800230c:	5cd3      	ldrb	r3, [r2, r3]
 800230e:	fa21 f303 	lsr.w	r3, r1, r3
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_RCC_ClockConfig+0x2f0>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_RCC_ClockConfig+0x2f4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fb68 	bl	80009f0 <HAL_InitTick>
  
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3778      	adds	r7, #120	; 0x78
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	080071b8 	.word	0x080071b8
 8002334:	20000000 	.word	0x20000000
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b08b      	sub	sp, #44	; 0x2c
 8002340:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d002      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x30>
 8002366:	2b08      	cmp	r3, #8
 8002368:	d003      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x36>
 800236a:	e03c      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_GetSysClockFreq+0xc4>)
 800236e:	623b      	str	r3, [r7, #32]
      break;
 8002370:	e03c      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002378:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800237c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	fa92 f2a2 	rbit	r2, r2
 8002384:	607a      	str	r2, [r7, #4]
  return result;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	fab2 f282 	clz	r2, r2
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	40d3      	lsrs	r3, r2
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	220f      	movs	r2, #15
 80023a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	fa92 f2a2 	rbit	r2, r2
 80023a8:	60fa      	str	r2, [r7, #12]
  return result;
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	fab2 f282 	clz	r2, r2
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	40d3      	lsrs	r3, r2
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023c4:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	e004      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4a0c      	ldr	r2, [pc, #48]	; (800240c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	623b      	str	r3, [r7, #32]
      break;
 80023e4:	e002      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023e8:	623b      	str	r3, [r7, #32]
      break;
 80023ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ec:	6a3b      	ldr	r3, [r7, #32]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	372c      	adds	r7, #44	; 0x2c
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	007a1200 	.word	0x007a1200
 8002404:	080071d0 	.word	0x080071d0
 8002408:	080071e0 	.word	0x080071e0
 800240c:	003d0900 	.word	0x003d0900

08002410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_RCC_GetHCLKFreq+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800242e:	f7ff ffef 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002432:	4601      	mov	r1, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800243c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002440:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	fa92 f2a2 	rbit	r2, r2
 8002448:	603a      	str	r2, [r7, #0]
  return result;
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	fab2 f282 	clz	r2, r2
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	40d3      	lsrs	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	080071c8 	.word	0x080071c8

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002472:	f7ff ffcd 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002476:	4601      	mov	r1, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002480:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002484:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	fa92 f2a2 	rbit	r2, r2
 800248c:	603a      	str	r2, [r7, #0]
  return result;
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	40d3      	lsrs	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	080071c8 	.word	0x080071c8

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b092      	sub	sp, #72	; 0x48
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80cd 	beq.w	800266e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d4:	4b86      	ldr	r3, [pc, #536]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10e      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	4b83      	ldr	r3, [pc, #524]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	4a82      	ldr	r2, [pc, #520]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ea:	61d3      	str	r3, [r2, #28]
 80024ec:	4b80      	ldr	r3, [pc, #512]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	4b7d      	ldr	r3, [pc, #500]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d118      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250a:	4b7a      	ldr	r3, [pc, #488]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a79      	ldr	r2, [pc, #484]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002514:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002516:	f7fe faaf 	bl	8000a78 <HAL_GetTick>
 800251a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	e008      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251e:	f7fe faab 	bl	8000a78 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b64      	cmp	r3, #100	; 0x64
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0db      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800253c:	4b6c      	ldr	r3, [pc, #432]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d07d      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002556:	429a      	cmp	r2, r3
 8002558:	d076      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800255a:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	461a      	mov	r2, r3
 8002584:	2301      	movs	r3, #1
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	461a      	mov	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025ac:	4a50      	ldr	r2, [pc, #320]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d045      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fa5c 	bl	8000a78 <HAL_GetTick>
 80025c0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fa58 	bl	8000a78 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e086      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80025da:	2302      	movs	r3, #2
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	2302      	movs	r3, #2
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	61fb      	str	r3, [r7, #28]
  return result;
 80025f2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d102      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002608:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	e007      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800260e:	2302      	movs	r3, #2
 8002610:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2202      	movs	r2, #2
 8002620:	613a      	str	r2, [r7, #16]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	fa92 f2a2 	rbit	r2, r2
 8002628:	60fa      	str	r2, [r7, #12]
  return result;
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	fab2 f282 	clz	r2, r2
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f002 021f 	and.w	r2, r2, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f202 	lsl.w	r2, r1, r2
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0bd      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4926      	ldr	r1, [pc, #152]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002656:	4313      	orrs	r3, r2
 8002658:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800265a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800265e:	2b01      	cmp	r3, #1
 8002660:	d105      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	491a      	ldr	r1, [pc, #104]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002688:	4313      	orrs	r3, r2
 800268a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f023 0210 	bic.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4912      	ldr	r1, [pc, #72]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	490b      	ldr	r1, [pc, #44]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	4903      	ldr	r1, [pc, #12]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3748      	adds	r7, #72	; 0x48
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	10908100 	.word	0x10908100

080026fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e095      	b.n	800283a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800271e:	d009      	beq.n	8002734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
 8002726:	e005      	b.n	8002734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fd ff92 	bl	8000678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002774:	d902      	bls.n	800277c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e002      	b.n	8002782 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800277c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002780:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800278a:	d007      	beq.n	800279c <HAL_SPI_Init+0xa0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002794:	d002      	beq.n	800279c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	ea42 0103 	orr.w	r1, r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	f003 0204 	and.w	r2, r3, #4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002818:	ea42 0103 	orr.w	r1, r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e049      	b.n	80028e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fd ff65 	bl	8000738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3304      	adds	r3, #4
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f000 fcb3 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e049      	b.n	8002996 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f841 	bl	800299e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f000 fc5c 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_TIM_PWM_Start+0x24>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e03c      	b.n	8002a52 <HAL_TIM_PWM_Start+0x9e>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d109      	bne.n	80029f2 <HAL_TIM_PWM_Start+0x3e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	bf14      	ite	ne
 80029ea:	2301      	movne	r3, #1
 80029ec:	2300      	moveq	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	e02f      	b.n	8002a52 <HAL_TIM_PWM_Start+0x9e>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d109      	bne.n	8002a0c <HAL_TIM_PWM_Start+0x58>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e022      	b.n	8002a52 <HAL_TIM_PWM_Start+0x9e>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d109      	bne.n	8002a26 <HAL_TIM_PWM_Start+0x72>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e015      	b.n	8002a52 <HAL_TIM_PWM_Start+0x9e>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d109      	bne.n	8002a40 <HAL_TIM_PWM_Start+0x8c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e008      	b.n	8002a52 <HAL_TIM_PWM_Start+0x9e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e088      	b.n	8002b6c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_PWM_Start+0xb6>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a68:	e023      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xfe>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_PWM_Start+0xc6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a78:	e01b      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xfe>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_PWM_Start+0xd6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	e013      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xfe>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_PWM_Start+0xe6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a98:	e00b      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xfe>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start+0xf6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa8:	e003      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xfe>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	6839      	ldr	r1, [r7, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 ff4e 	bl	800395c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	; (8002b74 <HAL_TIM_PWM_Start+0x1c0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00e      	beq.n	8002ae8 <HAL_TIM_PWM_Start+0x134>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_TIM_PWM_Start+0x1c4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIM_PWM_Start+0x134>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <HAL_TIM_PWM_Start+0x1c8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIM_PWM_Start+0x134>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <HAL_TIM_PWM_Start+0x1cc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_TIM_PWM_Start+0x138>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_TIM_PWM_Start+0x13a>
 8002aec:	2300      	movs	r3, #0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_TIM_PWM_Start+0x1c0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x176>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d009      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x176>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_TIM_PWM_Start+0x1d0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x176>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_TIM_PWM_Start+0x1c4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d115      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_TIM_PWM_Start+0x1d4>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b06      	cmp	r3, #6
 8002b3a:	d015      	beq.n	8002b68 <HAL_TIM_PWM_Start+0x1b4>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b42:	d011      	beq.n	8002b68 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b54:	e008      	b.n	8002b68 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e000      	b.n	8002b6a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40014400 	.word	0x40014400
 8002b80:	40014800 	.word	0x40014800
 8002b84:	40000400 	.word	0x40000400
 8002b88:	00010007 	.word	0x00010007

08002b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0202 	mvn.w	r2, #2
 8002bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 faed 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fadf 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 faf0 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0204 	mvn.w	r2, #4
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fac3 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fab5 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fac6 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d122      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0208 	mvn.w	r2, #8
 8002c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2204      	movs	r2, #4
 8002c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fa99 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa8b 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fa9c 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b10      	cmp	r3, #16
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0210 	mvn.w	r2, #16
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa6f 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa61 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa72 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0201 	mvn.w	r2, #1
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa3b 	bl	8003186 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b80      	cmp	r3, #128	; 0x80
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	2b80      	cmp	r3, #128	; 0x80
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 ffcc 	bl	8003cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4a:	d10e      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d107      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 ffbf 	bl	8003ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d10e      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa20 	bl	80031d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d10e      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0220 	mvn.w	r2, #32
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 ff7f 	bl	8003cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e0ff      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b14      	cmp	r3, #20
 8002df6:	f200 80f0 	bhi.w	8002fda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e55 	.word	0x08002e55
 8002e04:	08002fdb 	.word	0x08002fdb
 8002e08:	08002fdb 	.word	0x08002fdb
 8002e0c:	08002fdb 	.word	0x08002fdb
 8002e10:	08002e95 	.word	0x08002e95
 8002e14:	08002fdb 	.word	0x08002fdb
 8002e18:	08002fdb 	.word	0x08002fdb
 8002e1c:	08002fdb 	.word	0x08002fdb
 8002e20:	08002ed7 	.word	0x08002ed7
 8002e24:	08002fdb 	.word	0x08002fdb
 8002e28:	08002fdb 	.word	0x08002fdb
 8002e2c:	08002fdb 	.word	0x08002fdb
 8002e30:	08002f17 	.word	0x08002f17
 8002e34:	08002fdb 	.word	0x08002fdb
 8002e38:	08002fdb 	.word	0x08002fdb
 8002e3c:	08002fdb 	.word	0x08002fdb
 8002e40:	08002f59 	.word	0x08002f59
 8002e44:	08002fdb 	.word	0x08002fdb
 8002e48:	08002fdb 	.word	0x08002fdb
 8002e4c:	08002fdb 	.word	0x08002fdb
 8002e50:	08002f99 	.word	0x08002f99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fa3e 	bl	80032dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0208 	orr.w	r2, r2, #8
 8002e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6999      	ldr	r1, [r3, #24]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]
      break;
 8002e92:	e0a5      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 faa4 	bl	80033e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	619a      	str	r2, [r3, #24]
      break;
 8002ed4:	e084      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fb03 	bl	80034e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0208 	orr.w	r2, r2, #8
 8002ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0204 	bic.w	r2, r2, #4
 8002f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69d9      	ldr	r1, [r3, #28]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
      break;
 8002f14:	e064      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fb61 	bl	80035e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69d9      	ldr	r1, [r3, #28]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	61da      	str	r2, [r3, #28]
      break;
 8002f56:	e043      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fba4 	bl	80036ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0208 	orr.w	r2, r2, #8
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0204 	bic.w	r2, r2, #4
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f96:	e023      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fbe2 	bl	8003768 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	021a      	lsls	r2, r3, #8
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fd8:	e002      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8002fde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop

08002ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIM_ConfigClockSource+0x1c>
 800300c:	2302      	movs	r3, #2
 800300e:	e0b6      	b.n	800317e <HAL_TIM_ConfigClockSource+0x18a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304c:	d03e      	beq.n	80030cc <HAL_TIM_ConfigClockSource+0xd8>
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	f200 8087 	bhi.w	8003164 <HAL_TIM_ConfigClockSource+0x170>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305a:	f000 8086 	beq.w	800316a <HAL_TIM_ConfigClockSource+0x176>
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003062:	d87f      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x170>
 8003064:	2b70      	cmp	r3, #112	; 0x70
 8003066:	d01a      	beq.n	800309e <HAL_TIM_ConfigClockSource+0xaa>
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d87b      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x170>
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d050      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x11e>
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d877      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x170>
 8003074:	2b50      	cmp	r3, #80	; 0x50
 8003076:	d03c      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0xfe>
 8003078:	2b50      	cmp	r3, #80	; 0x50
 800307a:	d873      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x170>
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d058      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0x13e>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d86f      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x170>
 8003084:	2b30      	cmp	r3, #48	; 0x30
 8003086:	d064      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x15e>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d86b      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x170>
 800308c:	2b20      	cmp	r3, #32
 800308e:	d060      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x15e>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d867      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x170>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05c      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x15e>
 8003098:	2b10      	cmp	r3, #16
 800309a:	d05a      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x15e>
 800309c:	e062      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f000 fc35 	bl	800391c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	609a      	str	r2, [r3, #8]
      break;
 80030ca:	e04f      	b.n	800316c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f000 fc1e 	bl	800391c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ee:	609a      	str	r2, [r3, #8]
      break;
 80030f0:	e03c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	f000 fb92 	bl	8003828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2150      	movs	r1, #80	; 0x50
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fbeb 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003110:	e02c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	461a      	mov	r2, r3
 8003120:	f000 fbb1 	bl	8003886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2160      	movs	r1, #96	; 0x60
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fbdb 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003130:	e01c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	461a      	mov	r2, r3
 8003140:	f000 fb72 	bl	8003828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2140      	movs	r1, #64	; 0x40
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fbcb 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003150:	e00c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f000 fbc2 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003162:	e003      	b.n	800316c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      break;
 8003168:	e000      	b.n	800316c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800316a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <TIM_Base_SetConfig+0xdc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <TIM_Base_SetConfig+0x28>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d003      	beq.n	8003214 <TIM_Base_SetConfig+0x28>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <TIM_Base_SetConfig+0xe0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d108      	bne.n	8003226 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a27      	ldr	r2, [pc, #156]	; (80032c8 <TIM_Base_SetConfig+0xdc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d00f      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <TIM_Base_SetConfig+0xe0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00b      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <TIM_Base_SetConfig+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <TIM_Base_SetConfig+0xe8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <TIM_Base_SetConfig+0x6a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <TIM_Base_SetConfig+0xec>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d108      	bne.n	8003268 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <TIM_Base_SetConfig+0xdc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0xc0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <TIM_Base_SetConfig+0xe4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0xc0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <TIM_Base_SetConfig+0xe8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0xc0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <TIM_Base_SetConfig+0xec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d103      	bne.n	80032b4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	615a      	str	r2, [r3, #20]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40014400 	.word	0x40014400
 80032d8:	40014800 	.word	0x40014800

080032dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0201 	bic.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f023 0302 	bic.w	r3, r3, #2
 8003328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <TIM_OC1_SetConfig+0xfc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00b      	beq.n	8003354 <TIM_OC1_SetConfig+0x78>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a27      	ldr	r2, [pc, #156]	; (80033dc <TIM_OC1_SetConfig+0x100>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <TIM_OC1_SetConfig+0x78>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <TIM_OC1_SetConfig+0x104>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_OC1_SetConfig+0x78>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a25      	ldr	r2, [pc, #148]	; (80033e4 <TIM_OC1_SetConfig+0x108>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10c      	bne.n	800336e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 0308 	bic.w	r3, r3, #8
 800335a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <TIM_OC1_SetConfig+0xfc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00b      	beq.n	800338e <TIM_OC1_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <TIM_OC1_SetConfig+0x100>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <TIM_OC1_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a17      	ldr	r2, [pc, #92]	; (80033e0 <TIM_OC1_SetConfig+0x104>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_OC1_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <TIM_OC1_SetConfig+0x108>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d111      	bne.n	80033b2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800339c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	621a      	str	r2, [r3, #32]
}
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800

080033e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f023 0210 	bic.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f023 0320 	bic.w	r3, r3, #32
 8003436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <TIM_OC2_SetConfig+0xf0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10d      	bne.n	8003468 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003466:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <TIM_OC2_SetConfig+0xf0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_OC2_SetConfig+0xa0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a1a      	ldr	r2, [pc, #104]	; (80034dc <TIM_OC2_SetConfig+0xf4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_OC2_SetConfig+0xa0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <TIM_OC2_SetConfig+0xf8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_OC2_SetConfig+0xa0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <TIM_OC2_SetConfig+0xfc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d113      	bne.n	80034b0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800348e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003496:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <TIM_OC3_SetConfig+0xec>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10d      	bne.n	8003566 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003564:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <TIM_OC3_SetConfig+0xec>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_OC3_SetConfig+0x9e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <TIM_OC3_SetConfig+0xf0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_OC3_SetConfig+0x9e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a18      	ldr	r2, [pc, #96]	; (80035dc <TIM_OC3_SetConfig+0xf4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_OC3_SetConfig+0x9e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a17      	ldr	r2, [pc, #92]	; (80035e0 <TIM_OC3_SetConfig+0xf8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d113      	bne.n	80035ae <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800358c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	031b      	lsls	r3, r3, #12
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a16      	ldr	r2, [pc, #88]	; (800369c <TIM_OC4_SetConfig+0xb8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00b      	beq.n	8003660 <TIM_OC4_SetConfig+0x7c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <TIM_OC4_SetConfig+0xbc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_OC4_SetConfig+0x7c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <TIM_OC4_SetConfig+0xc0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_OC4_SetConfig+0x7c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <TIM_OC4_SetConfig+0xc4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d109      	bne.n	8003674 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800

080036ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a15      	ldr	r2, [pc, #84]	; (8003758 <TIM_OC5_SetConfig+0xac>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_OC5_SetConfig+0x72>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a14      	ldr	r2, [pc, #80]	; (800375c <TIM_OC5_SetConfig+0xb0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_OC5_SetConfig+0x72>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a13      	ldr	r2, [pc, #76]	; (8003760 <TIM_OC5_SetConfig+0xb4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_OC5_SetConfig+0x72>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a12      	ldr	r2, [pc, #72]	; (8003764 <TIM_OC5_SetConfig+0xb8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d109      	bne.n	8003732 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	621a      	str	r2, [r3, #32]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800

08003768 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	051b      	lsls	r3, r3, #20
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a16      	ldr	r2, [pc, #88]	; (8003818 <TIM_OC6_SetConfig+0xb0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_OC6_SetConfig+0x74>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <TIM_OC6_SetConfig+0xb4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_OC6_SetConfig+0x74>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a14      	ldr	r2, [pc, #80]	; (8003820 <TIM_OC6_SetConfig+0xb8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_OC6_SetConfig+0x74>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <TIM_OC6_SetConfig+0xbc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d109      	bne.n	80037f0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	029b      	lsls	r3, r3, #10
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b087      	sub	sp, #28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 0210 	bic.w	r2, r3, #16
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	031b      	lsls	r3, r3, #12
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	f043 0307 	orr.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	021a      	lsls	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	431a      	orrs	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2201      	movs	r2, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1a      	ldr	r2, [r3, #32]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	43db      	mvns	r3, r3
 800397e:	401a      	ands	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <HAL_TIMEx_PWMN_Start+0x24>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e022      	b.n	8003a12 <HAL_TIMEx_PWMN_Start+0x6a>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d109      	bne.n	80039e6 <HAL_TIMEx_PWMN_Start+0x3e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	e015      	b.n	8003a12 <HAL_TIMEx_PWMN_Start+0x6a>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d109      	bne.n	8003a00 <HAL_TIMEx_PWMN_Start+0x58>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e008      	b.n	8003a12 <HAL_TIMEx_PWMN_Start+0x6a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e05f      	b.n	8003ada <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIMEx_PWMN_Start+0x82>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a28:	e013      	b.n	8003a52 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d104      	bne.n	8003a3a <HAL_TIMEx_PWMN_Start+0x92>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a38:	e00b      	b.n	8003a52 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d104      	bne.n	8003a4a <HAL_TIMEx_PWMN_Start+0xa2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a48:	e003      	b.n	8003a52 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2204      	movs	r2, #4
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f94e 	bl	8003cfc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <HAL_TIMEx_PWMN_Start+0x13c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_TIMEx_PWMN_Start+0xf0>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a82:	d009      	beq.n	8003a98 <HAL_TIMEx_PWMN_Start+0xf0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_TIMEx_PWMN_Start+0x140>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_TIMEx_PWMN_Start+0xf0>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_TIMEx_PWMN_Start+0x144>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d115      	bne.n	8003ac4 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_TIMEx_PWMN_Start+0x148>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d015      	beq.n	8003ad6 <HAL_TIMEx_PWMN_Start+0x12e>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d011      	beq.n	8003ad6 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac2:	e008      	b.n	8003ad6 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e000      	b.n	8003ad8 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	00010007 	.word	0x00010007

08003af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e054      	b.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d009      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10c      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40014000 	.word	0x40014000

08003bd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e060      	b.n	8003cae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d115      	bne.n	8003c9c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	051b      	lsls	r3, r3, #20
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40012c00 	.word	0x40012c00

08003cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2204      	movs	r2, #4
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	401a      	ands	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e040      	b.n	8003dda <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7fc fd5b 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2224      	movs	r2, #36	; 0x24
 8003d72:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f82d 	bl	8003de4 <UART_SetConfig>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e022      	b.n	8003dda <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f957 	bl	8004050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9de 	bl	8004194 <UART_CheckIdleState>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b8a      	ldr	r3, [pc, #552]	; (8004038 <UART_SetConfig+0x254>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a78      	ldr	r2, [pc, #480]	; (800403c <UART_SetConfig+0x258>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d120      	bne.n	8003ea2 <UART_SetConfig+0xbe>
 8003e60:	4b77      	ldr	r3, [pc, #476]	; (8004040 <UART_SetConfig+0x25c>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d817      	bhi.n	8003e9c <UART_SetConfig+0xb8>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0x90>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003e85 	.word	0x08003e85
 8003e78:	08003e91 	.word	0x08003e91
 8003e7c:	08003e97 	.word	0x08003e97
 8003e80:	08003e8b 	.word	0x08003e8b
 8003e84:	2300      	movs	r3, #0
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e01d      	b.n	8003ec6 <UART_SetConfig+0xe2>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e01a      	b.n	8003ec6 <UART_SetConfig+0xe2>
 8003e90:	2304      	movs	r3, #4
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e017      	b.n	8003ec6 <UART_SetConfig+0xe2>
 8003e96:	2308      	movs	r3, #8
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e014      	b.n	8003ec6 <UART_SetConfig+0xe2>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e011      	b.n	8003ec6 <UART_SetConfig+0xe2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a67      	ldr	r2, [pc, #412]	; (8004044 <UART_SetConfig+0x260>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d102      	bne.n	8003eb2 <UART_SetConfig+0xce>
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0xe2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a64      	ldr	r2, [pc, #400]	; (8004048 <UART_SetConfig+0x264>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d102      	bne.n	8003ec2 <UART_SetConfig+0xde>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e001      	b.n	8003ec6 <UART_SetConfig+0xe2>
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	d15a      	bne.n	8003f86 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003ed0:	7ffb      	ldrb	r3, [r7, #31]
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d827      	bhi.n	8003f26 <UART_SetConfig+0x142>
 8003ed6:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <UART_SetConfig+0xf8>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	08003f09 	.word	0x08003f09
 8003ee4:	08003f11 	.word	0x08003f11
 8003ee8:	08003f27 	.word	0x08003f27
 8003eec:	08003f17 	.word	0x08003f17
 8003ef0:	08003f27 	.word	0x08003f27
 8003ef4:	08003f27 	.word	0x08003f27
 8003ef8:	08003f27 	.word	0x08003f27
 8003efc:	08003f1f 	.word	0x08003f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f00:	f7fe fa92 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 8003f04:	61b8      	str	r0, [r7, #24]
        break;
 8003f06:	e013      	b.n	8003f30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f08:	f7fe fab0 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8003f0c:	61b8      	str	r0, [r7, #24]
        break;
 8003f0e:	e00f      	b.n	8003f30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f10:	4b4e      	ldr	r3, [pc, #312]	; (800404c <UART_SetConfig+0x268>)
 8003f12:	61bb      	str	r3, [r7, #24]
        break;
 8003f14:	e00c      	b.n	8003f30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f16:	f7fe fa11 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8003f1a:	61b8      	str	r0, [r7, #24]
        break;
 8003f1c:	e008      	b.n	8003f30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f22:	61bb      	str	r3, [r7, #24]
        break;
 8003f24:	e004      	b.n	8003f30 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d074      	beq.n	8004020 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	005a      	lsls	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d916      	bls.n	8003f80 <UART_SetConfig+0x19c>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d212      	bcs.n	8003f80 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f023 030f 	bic.w	r3, r3, #15
 8003f62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	89fa      	ldrh	r2, [r7, #14]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	e04f      	b.n	8004020 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	77bb      	strb	r3, [r7, #30]
 8003f84:	e04c      	b.n	8004020 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f86:	7ffb      	ldrb	r3, [r7, #31]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d828      	bhi.n	8003fde <UART_SetConfig+0x1fa>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <UART_SetConfig+0x1b0>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fdf 	.word	0x08003fdf
 8003fa4:	08003fcf 	.word	0x08003fcf
 8003fa8:	08003fdf 	.word	0x08003fdf
 8003fac:	08003fdf 	.word	0x08003fdf
 8003fb0:	08003fdf 	.word	0x08003fdf
 8003fb4:	08003fd7 	.word	0x08003fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f7fe fa36 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 8003fbc:	61b8      	str	r0, [r7, #24]
        break;
 8003fbe:	e013      	b.n	8003fe8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7fe fa54 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8003fc4:	61b8      	str	r0, [r7, #24]
        break;
 8003fc6:	e00f      	b.n	8003fe8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc8:	4b20      	ldr	r3, [pc, #128]	; (800404c <UART_SetConfig+0x268>)
 8003fca:	61bb      	str	r3, [r7, #24]
        break;
 8003fcc:	e00c      	b.n	8003fe8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fce:	f7fe f9b5 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8003fd2:	61b8      	str	r0, [r7, #24]
        break;
 8003fd4:	e008      	b.n	8003fe8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fda:	61bb      	str	r3, [r7, #24]
        break;
 8003fdc:	e004      	b.n	8003fe8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	77bb      	strb	r3, [r7, #30]
        break;
 8003fe6:	bf00      	nop
    }

    if (pclk != 0U)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d018      	beq.n	8004020 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	085a      	lsrs	r2, r3, #1
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b0f      	cmp	r3, #15
 8004006:	d909      	bls.n	800401c <UART_SetConfig+0x238>
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d205      	bcs.n	800401c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	e001      	b.n	8004020 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800402c:	7fbb      	ldrb	r3, [r7, #30]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	efff69f3 	.word	0xefff69f3
 800403c:	40013800 	.word	0x40013800
 8004040:	40021000 	.word	0x40021000
 8004044:	40004400 	.word	0x40004400
 8004048:	40004800 	.word	0x40004800
 800404c:	007a1200 	.word	0x007a1200

08004050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01a      	beq.n	8004166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414e:	d10a      	bne.n	8004166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b098      	sub	sp, #96	; 0x60
 8004198:	af02      	add	r7, sp, #8
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041a4:	f7fc fc68 	bl	8000a78 <HAL_GetTick>
 80041a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d12e      	bne.n	8004216 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c0:	2200      	movs	r2, #0
 80041c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f88c 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d021      	beq.n	8004216 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e6:	653b      	str	r3, [r7, #80]	; 0x50
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
 80041f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e062      	b.n	80042dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d149      	bne.n	80042b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f856 	bl	80042e4 <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d03c      	beq.n	80042b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	623b      	str	r3, [r7, #32]
   return(result);
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425c:	633b      	str	r3, [r7, #48]	; 0x30
 800425e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004290:	61fa      	str	r2, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	69b9      	ldr	r1, [r7, #24]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	617b      	str	r3, [r7, #20]
   return(result);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e011      	b.n	80042dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3758      	adds	r7, #88	; 0x58
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f4:	e049      	b.n	800438a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042fc:	d045      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fc fbbb 	bl	8000a78 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <UART_WaitOnFlagUntilTimeout+0x30>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e048      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d031      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d110      	bne.n	8004356 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2208      	movs	r2, #8
 800433a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f838 	bl	80043b2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2208      	movs	r2, #8
 8004346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e029      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d111      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800436e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f81e 	bl	80043b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e00f      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d0a6      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b095      	sub	sp, #84	; 0x54
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d8:	643b      	str	r3, [r7, #64]	; 0x40
 80043da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e6      	bne.n	80043ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800440c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	2b01      	cmp	r3, #1
 8004426:	d118      	bne.n	800445a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	60bb      	str	r3, [r7, #8]
   return(result);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f023 0310 	bic.w	r3, r3, #16
 800443c:	647b      	str	r3, [r7, #68]	; 0x44
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	613b      	str	r3, [r7, #16]
   return(result);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e6      	bne.n	8004428 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800446e:	bf00      	nop
 8004470:	3754      	adds	r7, #84	; 0x54
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004482:	f3ef 8305 	mrs	r3, IPSR
 8004486:	60bb      	str	r3, [r7, #8]
  return(result);
 8004488:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10f      	bne.n	80044ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448e:	f3ef 8310 	mrs	r3, PRIMASK
 8004492:	607b      	str	r3, [r7, #4]
  return(result);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <osKernelInitialize+0x32>
 800449a:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <osKernelInitialize+0x64>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d109      	bne.n	80044b6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044a2:	f3ef 8311 	mrs	r3, BASEPRI
 80044a6:	603b      	str	r3, [r7, #0]
  return(result);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80044ae:	f06f 0305 	mvn.w	r3, #5
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e00c      	b.n	80044d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <osKernelInitialize+0x64>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <osKernelInitialize+0x64>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e002      	b.n	80044d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	200001d4 	.word	0x200001d4

080044e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ea:	f3ef 8305 	mrs	r3, IPSR
 80044ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80044f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f6:	f3ef 8310 	mrs	r3, PRIMASK
 80044fa:	607b      	str	r3, [r7, #4]
  return(result);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <osKernelStart+0x32>
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <osKernelStart+0x64>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d109      	bne.n	800451e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800450a:	f3ef 8311 	mrs	r3, BASEPRI
 800450e:	603b      	str	r3, [r7, #0]
  return(result);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004516:	f06f 0305 	mvn.w	r3, #5
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e00e      	b.n	800453c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <osKernelStart+0x64>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d107      	bne.n	8004536 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <osKernelStart+0x64>)
 8004528:	2202      	movs	r2, #2
 800452a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800452c:	f001 f898 	bl	8005660 <vTaskStartScheduler>
      stat = osOK;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e002      	b.n	800453c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800453a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800453c:	68fb      	ldr	r3, [r7, #12]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	200001d4 	.word	0x200001d4

0800454c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b092      	sub	sp, #72	; 0x48
 8004550:	af04      	add	r7, sp, #16
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800455c:	f3ef 8305 	mrs	r3, IPSR
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004564:	2b00      	cmp	r3, #0
 8004566:	f040 8094 	bne.w	8004692 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456a:	f3ef 8310 	mrs	r3, PRIMASK
 800456e:	623b      	str	r3, [r7, #32]
  return(result);
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 808d 	bne.w	8004692 <osThreadNew+0x146>
 8004578:	4b48      	ldr	r3, [pc, #288]	; (800469c <osThreadNew+0x150>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d106      	bne.n	800458e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004580:	f3ef 8311 	mrs	r3, BASEPRI
 8004584:	61fb      	str	r3, [r7, #28]
  return(result);
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f040 8082 	bne.w	8004692 <osThreadNew+0x146>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d07e      	beq.n	8004692 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004594:	2340      	movs	r3, #64	; 0x40
 8004596:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004598:	2318      	movs	r3, #24
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800459c:	2300      	movs	r3, #0
 800459e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80045a0:	f107 031b 	add.w	r3, r7, #27
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d045      	beq.n	800463e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <osThreadNew+0x74>
        name = attr->name;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <osThreadNew+0x9a>
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	2b38      	cmp	r3, #56	; 0x38
 80045d8:	d805      	bhi.n	80045e6 <osThreadNew+0x9a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <osThreadNew+0x9e>
        return (NULL);
 80045e6:	2300      	movs	r3, #0
 80045e8:	e054      	b.n	8004694 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00e      	beq.n	8004620 <osThreadNew+0xd4>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2bbb      	cmp	r3, #187	; 0xbb
 8004608:	d90a      	bls.n	8004620 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800460e:	2b00      	cmp	r3, #0
 8004610:	d006      	beq.n	8004620 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <osThreadNew+0xd4>
        mem = 1;
 800461a:	2301      	movs	r3, #1
 800461c:	62bb      	str	r3, [r7, #40]	; 0x28
 800461e:	e010      	b.n	8004642 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10c      	bne.n	8004642 <osThreadNew+0xf6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d108      	bne.n	8004642 <osThreadNew+0xf6>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d104      	bne.n	8004642 <osThreadNew+0xf6>
          mem = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
 800463c:	e001      	b.n	8004642 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	2b01      	cmp	r3, #1
 8004646:	d110      	bne.n	800466a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004650:	9202      	str	r2, [sp, #8]
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fe1a 	bl	8005298 <xTaskCreateStatic>
 8004664:	4603      	mov	r3, r0
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e013      	b.n	8004692 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d110      	bne.n	8004692 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	b29a      	uxth	r2, r3
 8004674:	f107 0314 	add.w	r3, r7, #20
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fe64 	bl	8005350 <xTaskCreate>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d001      	beq.n	8004692 <osThreadNew+0x146>
          hTask = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004692:	697b      	ldr	r3, [r7, #20]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3738      	adds	r7, #56	; 0x38
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	200001d4 	.word	0x200001d4

080046a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a8:	f3ef 8305 	mrs	r3, IPSR
 80046ac:	613b      	str	r3, [r7, #16]
  return(result);
 80046ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10f      	bne.n	80046d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b4:	f3ef 8310 	mrs	r3, PRIMASK
 80046b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <osDelay+0x34>
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <osDelay+0x58>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d109      	bne.n	80046dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046c8:	f3ef 8311 	mrs	r3, BASEPRI
 80046cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <osDelay+0x3c>
    stat = osErrorISR;
 80046d4:	f06f 0305 	mvn.w	r3, #5
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e007      	b.n	80046ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 ff86 	bl	80055f8 <vTaskDelay>
    }
  }

  return (stat);
 80046ec:	697b      	ldr	r3, [r7, #20]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200001d4 	.word	0x200001d4

080046fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a07      	ldr	r2, [pc, #28]	; (8004728 <vApplicationGetIdleTaskMemory+0x2c>)
 800470c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a06      	ldr	r2, [pc, #24]	; (800472c <vApplicationGetIdleTaskMemory+0x30>)
 8004712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2240      	movs	r2, #64	; 0x40
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	200001d8 	.word	0x200001d8
 800472c:	20000294 	.word	0x20000294

08004730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a07      	ldr	r2, [pc, #28]	; (800475c <vApplicationGetTimerTaskMemory+0x2c>)
 8004740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a06      	ldr	r2, [pc, #24]	; (8004760 <vApplicationGetTimerTaskMemory+0x30>)
 8004746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2280      	movs	r2, #128	; 0x80
 800474c:	601a      	str	r2, [r3, #0]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000394 	.word	0x20000394
 8004760:	20000450 	.word	0x20000450

08004764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f103 0208 	add.w	r2, r3, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800477c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f103 0208 	add.w	r2, r3, #8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f103 0208 	add.w	r2, r3, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	601a      	str	r2, [r3, #0]
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800481c:	d103      	bne.n	8004826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e00c      	b.n	8004840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3308      	adds	r3, #8
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e002      	b.n	8004834 <vListInsert+0x2e>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	d2f6      	bcs.n	800482e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	601a      	str	r2, [r3, #0]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6892      	ldr	r2, [r2, #8]
 800488e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6852      	ldr	r2, [r2, #4]
 8004898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d103      	bne.n	80048ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048f6:	f002 f835 	bl	8006964 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	3b01      	subs	r3, #1
 8004928:	68f9      	ldr	r1, [r7, #12]
 800492a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	441a      	add	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	22ff      	movs	r2, #255	; 0xff
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d114      	bne.n	8004976 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3310      	adds	r3, #16
 8004958:	4618      	mov	r0, r3
 800495a:	f001 f91f 	bl	8005b9c <xTaskRemoveFromEventList>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <xQueueGenericReset+0xcc>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	e009      	b.n	800498a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3310      	adds	r3, #16
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fef2 	bl	8004764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3324      	adds	r3, #36	; 0x24
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff feed 	bl	8004764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800498a:	f002 f81b 	bl	80069c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800498e:	2301      	movs	r3, #1
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08e      	sub	sp, #56	; 0x38
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <xQueueGenericCreateStatic+0x52>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <xQueueGenericCreateStatic+0x56>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xQueueGenericCreateStatic+0x58>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	623b      	str	r3, [r7, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <xQueueGenericCreateStatic+0x7e>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <xQueueGenericCreateStatic+0x82>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueGenericCreateStatic+0x84>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61fb      	str	r3, [r7, #28]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a3a:	2350      	movs	r3, #80	; 0x50
 8004a3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b50      	cmp	r3, #80	; 0x50
 8004a42:	d00a      	beq.n	8004a5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	61bb      	str	r3, [r7, #24]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f805 	bl	8004a8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3730      	adds	r7, #48	; 0x30
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ab8:	2101      	movs	r1, #1
 8004aba:	69b8      	ldr	r0, [r7, #24]
 8004abc:	f7ff ff06 	bl	80048cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xQueueGenericSend+0x32>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <xQueueGenericSend+0x40>
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <xQueueGenericSend+0x44>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <xQueueGenericSend+0x46>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <xQueueGenericSend+0x60>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d103      	bne.n	8004b3e <xQueueGenericSend+0x6e>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <xQueueGenericSend+0x72>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <xQueueGenericSend+0x74>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <xQueueGenericSend+0x8e>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	623b      	str	r3, [r7, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b5e:	f001 f9e5 	bl	8005f2c <xTaskGetSchedulerState>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <xQueueGenericSend+0x9e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xQueueGenericSend+0xa2>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueGenericSend+0xa4>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xQueueGenericSend+0xbe>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	61fb      	str	r3, [r7, #28]
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b8e:	f001 fee9 	bl	8006964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <xQueueGenericSend+0xd4>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d129      	bne.n	8004bf8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004baa:	f000 fa07 	bl	8004fbc <prvCopyDataToQueue>
 8004bae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 ffed 	bl	8005b9c <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <xQueueGenericSend+0x1f8>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	e00a      	b.n	8004bf0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <xQueueGenericSend+0x1f8>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bf0:	f001 fee8 	bl	80069c4 <vPortExitCritical>
				return pdPASS;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e063      	b.n	8004cc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bfe:	f001 fee1 	bl	80069c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e05c      	b.n	8004cc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f827 	bl	8005c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c1a:	f001 fed3 	bl	80069c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c1e:	f000 fd8f 	bl	8005740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c22:	f001 fe9f 	bl	8006964 <vPortEnterCritical>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c32:	d103      	bne.n	8004c3c <xQueueGenericSend+0x16c>
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSend+0x182>
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c52:	f001 feb7 	bl	80069c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c56:	1d3a      	adds	r2, r7, #4
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f816 	bl	8005c90 <xTaskCheckForTimeOut>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d124      	bne.n	8004cb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6c:	f000 fa9e 	bl	80051ac <prvIsQueueFull>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3310      	adds	r3, #16
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 ff3c 	bl	8005afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c86:	f000 fa29 	bl	80050dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c8a:	f000 fd67 	bl	800575c <xTaskResumeAll>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f af7c 	bne.w	8004b8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <xQueueGenericSend+0x1f8>)
 8004c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	e772      	b.n	8004b8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004caa:	f000 fa17 	bl	80050dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cae:	f000 fd55 	bl	800575c <xTaskResumeAll>
 8004cb2:	e76c      	b.n	8004b8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb6:	f000 fa11 	bl	80050dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cba:	f000 fd4f 	bl	800575c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cbe:	2300      	movs	r3, #0
		}
	}
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3738      	adds	r7, #56	; 0x38
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08e      	sub	sp, #56	; 0x38
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <xQueueGenericSendFromISR+0x3c>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <xQueueGenericSendFromISR+0x40>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <xQueueGenericSendFromISR+0x42>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	623b      	str	r3, [r7, #32]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d103      	bne.n	8004d36 <xQueueGenericSendFromISR+0x6a>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <xQueueGenericSendFromISR+0x6e>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueGenericSendFromISR+0x70>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	61fb      	str	r3, [r7, #28]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d56:	f001 fee7 	bl	8006b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	61ba      	str	r2, [r7, #24]
 8004d70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <xQueueGenericSendFromISR+0xbc>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d12c      	bne.n	8004de2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d98:	f000 f910 	bl	8004fbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d9c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da4:	d112      	bne.n	8004dcc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	3324      	adds	r3, #36	; 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fef2 	bl	8005b9c <xTaskRemoveFromEventList>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e007      	b.n	8004ddc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	b25a      	sxtb	r2, r3
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004de0:	e001      	b.n	8004de6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004df0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3738      	adds	r7, #56	; 0x38
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	; 0x30
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <xQueueReceive+0x30>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	623b      	str	r3, [r7, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d103      	bne.n	8004e3a <xQueueReceive+0x3e>
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <xQueueReceive+0x42>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xQueueReceive+0x44>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <xQueueReceive+0x5e>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	61fb      	str	r3, [r7, #28]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e5a:	f001 f867 	bl	8005f2c <xTaskGetSchedulerState>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <xQueueReceive+0x6e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueReceive+0x72>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueReceive+0x74>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xQueueReceive+0x8e>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61bb      	str	r3, [r7, #24]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e8a:	f001 fd6b 	bl	8006964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01f      	beq.n	8004eda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9e:	f000 f8f7 	bl	8005090 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1e5a      	subs	r2, r3, #1
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00f      	beq.n	8004ed2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fe70 	bl	8005b9c <xTaskRemoveFromEventList>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	; (8004fb8 <xQueueReceive+0x1bc>)
 8004ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ed2:	f001 fd77 	bl	80069c4 <vPortExitCritical>
				return pdPASS;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e069      	b.n	8004fae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ee0:	f001 fd70 	bl	80069c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e062      	b.n	8004fae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eee:	f107 0310 	add.w	r3, r7, #16
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 feb6 	bl	8005c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efc:	f001 fd62 	bl	80069c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f00:	f000 fc1e 	bl	8005740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f04:	f001 fd2e 	bl	8006964 <vPortEnterCritical>
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f14:	d103      	bne.n	8004f1e <xQueueReceive+0x122>
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f2a:	d103      	bne.n	8004f34 <xQueueReceive+0x138>
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f34:	f001 fd46 	bl	80069c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f38:	1d3a      	adds	r2, r7, #4
 8004f3a:	f107 0310 	add.w	r3, r7, #16
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fea5 	bl	8005c90 <xTaskCheckForTimeOut>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d123      	bne.n	8004f94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4e:	f000 f917 	bl	8005180 <prvIsQueueEmpty>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d017      	beq.n	8004f88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	3324      	adds	r3, #36	; 0x24
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fdcb 	bl	8005afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f68:	f000 f8b8 	bl	80050dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f6c:	f000 fbf6 	bl	800575c <xTaskResumeAll>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d189      	bne.n	8004e8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f76:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <xQueueReceive+0x1bc>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	e780      	b.n	8004e8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8a:	f000 f8a7 	bl	80050dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f8e:	f000 fbe5 	bl	800575c <xTaskResumeAll>
 8004f92:	e77a      	b.n	8004e8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f96:	f000 f8a1 	bl	80050dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f9a:	f000 fbdf 	bl	800575c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa0:	f000 f8ee 	bl	8005180 <prvIsQueueEmpty>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f43f af6f 	beq.w	8004e8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3730      	adds	r7, #48	; 0x30
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10d      	bne.n	8004ff6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d14d      	bne.n	800507e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 ffbe 	bl	8005f68 <xTaskPriorityDisinherit>
 8004fec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	e043      	b.n	800507e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d119      	bne.n	8005030 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6898      	ldr	r0, [r3, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	461a      	mov	r2, r3
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	f001 ffce 	bl	8006fa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d32b      	bcc.n	800507e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	609a      	str	r2, [r3, #8]
 800502e:	e026      	b.n	800507e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68d8      	ldr	r0, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	461a      	mov	r2, r3
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	f001 ffb4 	bl	8006fa8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	425b      	negs	r3, r3
 800504a:	441a      	add	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d207      	bcs.n	800506c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	425b      	negs	r3, r3
 8005066:	441a      	add	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d105      	bne.n	800507e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	3b01      	subs	r3, #1
 800507c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005086:	697b      	ldr	r3, [r7, #20]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d018      	beq.n	80050d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	441a      	add	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d303      	bcc.n	80050c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68d9      	ldr	r1, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	461a      	mov	r2, r3
 80050ce:	6838      	ldr	r0, [r7, #0]
 80050d0:	f001 ff6a 	bl	8006fa8 <memcpy>
	}
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050e4:	f001 fc3e 	bl	8006964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f0:	e011      	b.n	8005116 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d012      	beq.n	8005120 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3324      	adds	r3, #36	; 0x24
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fd4c 	bl	8005b9c <xTaskRemoveFromEventList>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800510a:	f000 fe23 	bl	8005d54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	3b01      	subs	r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	dce9      	bgt.n	80050f2 <prvUnlockQueue+0x16>
 800511e:	e000      	b.n	8005122 <prvUnlockQueue+0x46>
					break;
 8005120:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	22ff      	movs	r2, #255	; 0xff
 8005126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800512a:	f001 fc4b 	bl	80069c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800512e:	f001 fc19 	bl	8006964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005138:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800513a:	e011      	b.n	8005160 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3310      	adds	r3, #16
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fd27 	bl	8005b9c <xTaskRemoveFromEventList>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005154:	f000 fdfe 	bl	8005d54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	3b01      	subs	r3, #1
 800515c:	b2db      	uxtb	r3, r3
 800515e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005164:	2b00      	cmp	r3, #0
 8005166:	dce9      	bgt.n	800513c <prvUnlockQueue+0x60>
 8005168:	e000      	b.n	800516c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800516a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	22ff      	movs	r2, #255	; 0xff
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005174:	f001 fc26 	bl	80069c4 <vPortExitCritical>
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005188:	f001 fbec 	bl	8006964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e001      	b.n	800519e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800519e:	f001 fc11 	bl	80069c4 <vPortExitCritical>

	return xReturn;
 80051a2:	68fb      	ldr	r3, [r7, #12]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051b4:	f001 fbd6 	bl	8006964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d102      	bne.n	80051ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051c4:	2301      	movs	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e001      	b.n	80051ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ce:	f001 fbf9 	bl	80069c4 <vPortExitCritical>

	return xReturn;
 80051d2:	68fb      	ldr	r3, [r7, #12]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e014      	b.n	8005216 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051ec:	4a0f      	ldr	r2, [pc, #60]	; (800522c <vQueueAddToRegistry+0x50>)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051f8:	490c      	ldr	r1, [pc, #48]	; (800522c <vQueueAddToRegistry+0x50>)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <vQueueAddToRegistry+0x50>)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4413      	add	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800520e:	e006      	b.n	800521e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b07      	cmp	r3, #7
 800521a:	d9e7      	bls.n	80051ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000650 	.word	0x20000650

08005230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005240:	f001 fb90 	bl	8006964 <vPortEnterCritical>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800524a:	b25b      	sxtb	r3, r3
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005250:	d103      	bne.n	800525a <vQueueWaitForMessageRestricted+0x2a>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005260:	b25b      	sxtb	r3, r3
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005266:	d103      	bne.n	8005270 <vQueueWaitForMessageRestricted+0x40>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005270:	f001 fba8 	bl	80069c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3324      	adds	r3, #36	; 0x24
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fc5d 	bl	8005b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800528a:	6978      	ldr	r0, [r7, #20]
 800528c:	f7ff ff26 	bl	80050dc <prvUnlockQueue>
	}
 8005290:	bf00      	nop
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08e      	sub	sp, #56	; 0x38
 800529c:	af04      	add	r7, sp, #16
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	623b      	str	r3, [r7, #32]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xTaskCreateStatic+0x46>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	61fb      	str	r3, [r7, #28]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052de:	23bc      	movs	r3, #188	; 0xbc
 80052e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2bbc      	cmp	r3, #188	; 0xbc
 80052e6:	d00a      	beq.n	80052fe <xTaskCreateStatic+0x66>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	61bb      	str	r3, [r7, #24]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01e      	beq.n	8005342 <xTaskCreateStatic+0xaa>
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01b      	beq.n	8005342 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005312:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	2202      	movs	r2, #2
 8005318:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800531c:	2300      	movs	r3, #0
 800531e:	9303      	str	r3, [sp, #12]
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	9302      	str	r3, [sp, #8]
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f851 	bl	80053dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800533a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800533c:	f000 f8ec 	bl	8005518 <prvAddNewTaskToReadyList>
 8005340:	e001      	b.n	8005346 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005346:	697b      	ldr	r3, [r7, #20]
	}
 8005348:	4618      	mov	r0, r3
 800534a:	3728      	adds	r7, #40	; 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af04      	add	r7, sp, #16
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4618      	mov	r0, r3
 8005366:	f001 fc1f 	bl	8006ba8 <pvPortMalloc>
 800536a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00e      	beq.n	8005390 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005372:	20bc      	movs	r0, #188	; 0xbc
 8005374:	f001 fc18 	bl	8006ba8 <pvPortMalloc>
 8005378:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
 8005386:	e005      	b.n	8005394 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005388:	6978      	ldr	r0, [r7, #20]
 800538a:	f001 fcd1 	bl	8006d30 <vPortFree>
 800538e:	e001      	b.n	8005394 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d017      	beq.n	80053ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	2300      	movs	r3, #0
 80053a6:	9303      	str	r3, [sp, #12]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	9302      	str	r3, [sp, #8]
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f80f 	bl	80053dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053be:	69f8      	ldr	r0, [r7, #28]
 80053c0:	f000 f8aa 	bl	8005518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053c4:	2301      	movs	r3, #1
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	e002      	b.n	80053d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053d0:	69bb      	ldr	r3, [r7, #24]
	}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	461a      	mov	r2, r3
 80053f4:	21a5      	movs	r1, #165	; 0xa5
 80053f6:	f001 fde5 	bl	8006fc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005404:	3b01      	subs	r3, #1
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f023 0307 	bic.w	r3, r3, #7
 8005412:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <prvInitialiseNewTask+0x58>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	617b      	str	r3, [r7, #20]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	e012      	b.n	8005460 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	7819      	ldrb	r1, [r3, #0]
 8005442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	4413      	add	r3, r2
 8005448:	3334      	adds	r3, #52	; 0x34
 800544a:	460a      	mov	r2, r1
 800544c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d006      	beq.n	8005468 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3301      	adds	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d9e9      	bls.n	800543a <prvInitialiseNewTask+0x5e>
 8005466:	e000      	b.n	800546a <prvInitialiseNewTask+0x8e>
		{
			break;
 8005468:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	2b37      	cmp	r3, #55	; 0x37
 8005476:	d901      	bls.n	800547c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005478:	2337      	movs	r3, #55	; 0x37
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005480:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005486:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	2200      	movs	r2, #0
 800548c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff f986 	bl	80047a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	3318      	adds	r3, #24
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff f981 	bl	80047a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	3354      	adds	r3, #84	; 0x54
 80054cc:	2260      	movs	r2, #96	; 0x60
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 fd77 	bl	8006fc4 <memset>
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	4a0c      	ldr	r2, [pc, #48]	; (800550c <prvInitialiseNewTask+0x130>)
 80054da:	659a      	str	r2, [r3, #88]	; 0x58
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	4a0c      	ldr	r2, [pc, #48]	; (8005510 <prvInitialiseNewTask+0x134>)
 80054e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <prvInitialiseNewTask+0x138>)
 80054e6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	69b8      	ldr	r0, [r7, #24]
 80054ee:	f001 f90f 	bl	8006710 <pxPortInitialiseStack>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005504:	bf00      	nop
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	08007210 	.word	0x08007210
 8005510:	08007230 	.word	0x08007230
 8005514:	080071f0 	.word	0x080071f0

08005518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005520:	f001 fa20 	bl	8006964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005524:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <prvAddNewTaskToReadyList+0xc4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	4a2c      	ldr	r2, [pc, #176]	; (80055dc <prvAddNewTaskToReadyList+0xc4>)
 800552c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800552e:	4b2c      	ldr	r3, [pc, #176]	; (80055e0 <prvAddNewTaskToReadyList+0xc8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005536:	4a2a      	ldr	r2, [pc, #168]	; (80055e0 <prvAddNewTaskToReadyList+0xc8>)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800553c:	4b27      	ldr	r3, [pc, #156]	; (80055dc <prvAddNewTaskToReadyList+0xc4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d110      	bne.n	8005566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005544:	f000 fc2a 	bl	8005d9c <prvInitialiseTaskLists>
 8005548:	e00d      	b.n	8005566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800554a:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <prvAddNewTaskToReadyList+0xcc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005552:	4b23      	ldr	r3, [pc, #140]	; (80055e0 <prvAddNewTaskToReadyList+0xc8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	429a      	cmp	r2, r3
 800555e:	d802      	bhi.n	8005566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005560:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <prvAddNewTaskToReadyList+0xc8>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <prvAddNewTaskToReadyList+0xd0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <prvAddNewTaskToReadyList+0xd0>)
 800556e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <prvAddNewTaskToReadyList+0xd0>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557c:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <prvAddNewTaskToReadyList+0xd4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d903      	bls.n	800558c <prvAddNewTaskToReadyList+0x74>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <prvAddNewTaskToReadyList+0xd4>)
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <prvAddNewTaskToReadyList+0xd8>)
 800559a:	441a      	add	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7ff f90b 	bl	80047be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055a8:	f001 fa0c 	bl	80069c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <prvAddNewTaskToReadyList+0xcc>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00e      	beq.n	80055d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <prvAddNewTaskToReadyList+0xc8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	429a      	cmp	r2, r3
 80055c0:	d207      	bcs.n	80055d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <prvAddNewTaskToReadyList+0xdc>)
 80055c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000b64 	.word	0x20000b64
 80055e0:	20000690 	.word	0x20000690
 80055e4:	20000b70 	.word	0x20000b70
 80055e8:	20000b80 	.word	0x20000b80
 80055ec:	20000b6c 	.word	0x20000b6c
 80055f0:	20000694 	.word	0x20000694
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d017      	beq.n	800563a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <vTaskDelay+0x60>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <vTaskDelay+0x30>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	60bb      	str	r3, [r7, #8]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005628:	f000 f88a 	bl	8005740 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800562c:	2100      	movs	r1, #0
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fd08 	bl	8006044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005634:	f000 f892 	bl	800575c <xTaskResumeAll>
 8005638:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d107      	bne.n	8005650 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <vTaskDelay+0x64>)
 8005642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000b8c 	.word	0x20000b8c
 800565c:	e000ed04 	.word	0xe000ed04

08005660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800566e:	463a      	mov	r2, r7
 8005670:	1d39      	adds	r1, r7, #4
 8005672:	f107 0308 	add.w	r3, r7, #8
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff f840 	bl	80046fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	9202      	str	r2, [sp, #8]
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	2300      	movs	r3, #0
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	460a      	mov	r2, r1
 800568e:	4924      	ldr	r1, [pc, #144]	; (8005720 <vTaskStartScheduler+0xc0>)
 8005690:	4824      	ldr	r0, [pc, #144]	; (8005724 <vTaskStartScheduler+0xc4>)
 8005692:	f7ff fe01 	bl	8005298 <xTaskCreateStatic>
 8005696:	4603      	mov	r3, r0
 8005698:	4a23      	ldr	r2, [pc, #140]	; (8005728 <vTaskStartScheduler+0xc8>)
 800569a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800569c:	4b22      	ldr	r3, [pc, #136]	; (8005728 <vTaskStartScheduler+0xc8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e001      	b.n	80056ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d102      	bne.n	80056ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056b4:	f000 fd1a 	bl	80060ec <xTimerCreateTimerTask>
 80056b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d11b      	bne.n	80056f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	613b      	str	r3, [r7, #16]
}
 80056d2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <vTaskStartScheduler+0xcc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3354      	adds	r3, #84	; 0x54
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <vTaskStartScheduler+0xd0>)
 80056dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <vTaskStartScheduler+0xd4>)
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <vTaskStartScheduler+0xd8>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80056ec:	4b13      	ldr	r3, [pc, #76]	; (800573c <vTaskStartScheduler+0xdc>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056f2:	f001 f895 	bl	8006820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056f6:	e00e      	b.n	8005716 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056fe:	d10a      	bne.n	8005716 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	60fb      	str	r3, [r7, #12]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <vTaskStartScheduler+0xb4>
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	0800717c 	.word	0x0800717c
 8005724:	08005d6d 	.word	0x08005d6d
 8005728:	20000b88 	.word	0x20000b88
 800572c:	20000690 	.word	0x20000690
 8005730:	20000010 	.word	0x20000010
 8005734:	20000b84 	.word	0x20000b84
 8005738:	20000b70 	.word	0x20000b70
 800573c:	20000b68 	.word	0x20000b68

08005740 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <vTaskSuspendAll+0x18>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	4a03      	ldr	r2, [pc, #12]	; (8005758 <vTaskSuspendAll+0x18>)
 800574c:	6013      	str	r3, [r2, #0]
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	20000b8c 	.word	0x20000b8c

0800575c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800576a:	4b42      	ldr	r3, [pc, #264]	; (8005874 <xTaskResumeAll+0x118>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <xTaskResumeAll+0x2c>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	603b      	str	r3, [r7, #0]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005788:	f001 f8ec 	bl	8006964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800578c:	4b39      	ldr	r3, [pc, #228]	; (8005874 <xTaskResumeAll+0x118>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3b01      	subs	r3, #1
 8005792:	4a38      	ldr	r2, [pc, #224]	; (8005874 <xTaskResumeAll+0x118>)
 8005794:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005796:	4b37      	ldr	r3, [pc, #220]	; (8005874 <xTaskResumeAll+0x118>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d162      	bne.n	8005864 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800579e:	4b36      	ldr	r3, [pc, #216]	; (8005878 <xTaskResumeAll+0x11c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d05e      	beq.n	8005864 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a6:	e02f      	b.n	8005808 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80057a8:	4b34      	ldr	r3, [pc, #208]	; (800587c <xTaskResumeAll+0x120>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3318      	adds	r3, #24
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff f85f 	bl	8004878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff f85a 	bl	8004878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <xTaskResumeAll+0x124>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d903      	bls.n	80057d8 <xTaskResumeAll+0x7c>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a2a      	ldr	r2, [pc, #168]	; (8005880 <xTaskResumeAll+0x124>)
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4a27      	ldr	r2, [pc, #156]	; (8005884 <xTaskResumeAll+0x128>)
 80057e6:	441a      	add	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe ffe5 	bl	80047be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4b23      	ldr	r3, [pc, #140]	; (8005888 <xTaskResumeAll+0x12c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <xTaskResumeAll+0x130>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005808:	4b1c      	ldr	r3, [pc, #112]	; (800587c <xTaskResumeAll+0x120>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1cb      	bne.n	80057a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005816:	f000 fb63 	bl	8005ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800581a:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <xTaskResumeAll+0x134>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005826:	f000 f847 	bl	80058b8 <xTaskIncrementTick>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <xTaskResumeAll+0x130>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3b01      	subs	r3, #1
 800583a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f1      	bne.n	8005826 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005842:	4b13      	ldr	r3, [pc, #76]	; (8005890 <xTaskResumeAll+0x134>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005848:	4b10      	ldr	r3, [pc, #64]	; (800588c <xTaskResumeAll+0x130>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <xTaskResumeAll+0x138>)
 8005856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005864:	f001 f8ae 	bl	80069c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005868:	68bb      	ldr	r3, [r7, #8]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000b8c 	.word	0x20000b8c
 8005878:	20000b64 	.word	0x20000b64
 800587c:	20000b24 	.word	0x20000b24
 8005880:	20000b6c 	.word	0x20000b6c
 8005884:	20000694 	.word	0x20000694
 8005888:	20000690 	.word	0x20000690
 800588c:	20000b78 	.word	0x20000b78
 8005890:	20000b74 	.word	0x20000b74
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800589e:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <xTaskGetTickCount+0x1c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058a4:	687b      	ldr	r3, [r7, #4]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20000b68 	.word	0x20000b68

080058b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b51      	ldr	r3, [pc, #324]	; (8005a08 <xTaskIncrementTick+0x150>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f040 808e 	bne.w	80059e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058cc:	4b4f      	ldr	r3, [pc, #316]	; (8005a0c <xTaskIncrementTick+0x154>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058d4:	4a4d      	ldr	r2, [pc, #308]	; (8005a0c <xTaskIncrementTick+0x154>)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d120      	bne.n	8005922 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058e0:	4b4b      	ldr	r3, [pc, #300]	; (8005a10 <xTaskIncrementTick+0x158>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <xTaskIncrementTick+0x48>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	603b      	str	r3, [r7, #0]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xTaskIncrementTick+0x46>
 8005900:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <xTaskIncrementTick+0x158>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	4b43      	ldr	r3, [pc, #268]	; (8005a14 <xTaskIncrementTick+0x15c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a41      	ldr	r2, [pc, #260]	; (8005a10 <xTaskIncrementTick+0x158>)
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	4a41      	ldr	r2, [pc, #260]	; (8005a14 <xTaskIncrementTick+0x15c>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	4b40      	ldr	r3, [pc, #256]	; (8005a18 <xTaskIncrementTick+0x160>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	4a3f      	ldr	r2, [pc, #252]	; (8005a18 <xTaskIncrementTick+0x160>)
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	f000 fadf 	bl	8005ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005922:	4b3e      	ldr	r3, [pc, #248]	; (8005a1c <xTaskIncrementTick+0x164>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	429a      	cmp	r2, r3
 800592a:	d34e      	bcc.n	80059ca <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800592c:	4b38      	ldr	r3, [pc, #224]	; (8005a10 <xTaskIncrementTick+0x158>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <xTaskIncrementTick+0x82>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <xTaskIncrementTick+0x84>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005940:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <xTaskIncrementTick+0x164>)
 8005942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005946:	601a      	str	r2, [r3, #0]
					break;
 8005948:	e03f      	b.n	80059ca <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <xTaskIncrementTick+0x158>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	d203      	bcs.n	800596a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005962:	4a2e      	ldr	r2, [pc, #184]	; (8005a1c <xTaskIncrementTick+0x164>)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6013      	str	r3, [r2, #0]
						break;
 8005968:	e02f      	b.n	80059ca <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	3304      	adds	r3, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe ff82 	bl	8004878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	3318      	adds	r3, #24
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe ff79 	bl	8004878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598a:	4b25      	ldr	r3, [pc, #148]	; (8005a20 <xTaskIncrementTick+0x168>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d903      	bls.n	800599a <xTaskIncrementTick+0xe2>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <xTaskIncrementTick+0x168>)
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <xTaskIncrementTick+0x16c>)
 80059a8:	441a      	add	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7fe ff04 	bl	80047be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <xTaskIncrementTick+0x170>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3b3      	bcc.n	800592c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c8:	e7b0      	b.n	800592c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ca:	4b17      	ldr	r3, [pc, #92]	; (8005a28 <xTaskIncrementTick+0x170>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4914      	ldr	r1, [pc, #80]	; (8005a24 <xTaskIncrementTick+0x16c>)
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d907      	bls.n	80059f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	e004      	b.n	80059f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <xTaskIncrementTick+0x174>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	4a0f      	ldr	r2, [pc, #60]	; (8005a2c <xTaskIncrementTick+0x174>)
 80059f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059f2:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <xTaskIncrementTick+0x178>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059fe:	697b      	ldr	r3, [r7, #20]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000b8c 	.word	0x20000b8c
 8005a0c:	20000b68 	.word	0x20000b68
 8005a10:	20000b1c 	.word	0x20000b1c
 8005a14:	20000b20 	.word	0x20000b20
 8005a18:	20000b7c 	.word	0x20000b7c
 8005a1c:	20000b84 	.word	0x20000b84
 8005a20:	20000b6c 	.word	0x20000b6c
 8005a24:	20000694 	.word	0x20000694
 8005a28:	20000690 	.word	0x20000690
 8005a2c:	20000b74 	.word	0x20000b74
 8005a30:	20000b78 	.word	0x20000b78

08005a34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ae4 <vTaskSwitchContext+0xb0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a42:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <vTaskSwitchContext+0xb4>)
 8005a44:	2201      	movs	r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a48:	e046      	b.n	8005ad8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a4a:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <vTaskSwitchContext+0xb4>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a50:	4b26      	ldr	r3, [pc, #152]	; (8005aec <vTaskSwitchContext+0xb8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e010      	b.n	8005a7a <vTaskSwitchContext+0x46>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <vTaskSwitchContext+0x3e>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	491d      	ldr	r1, [pc, #116]	; (8005af0 <vTaskSwitchContext+0xbc>)
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0e4      	beq.n	8005a58 <vTaskSwitchContext+0x24>
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <vTaskSwitchContext+0xbc>)
 8005a9a:	4413      	add	r3, r2
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	605a      	str	r2, [r3, #4]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d104      	bne.n	8005abe <vTaskSwitchContext+0x8a>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4a0b      	ldr	r2, [pc, #44]	; (8005af4 <vTaskSwitchContext+0xc0>)
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	4a08      	ldr	r2, [pc, #32]	; (8005aec <vTaskSwitchContext+0xb8>)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <vTaskSwitchContext+0xc0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3354      	adds	r3, #84	; 0x54
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <vTaskSwitchContext+0xc4>)
 8005ad6:	6013      	str	r3, [r2, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	20000b8c 	.word	0x20000b8c
 8005ae8:	20000b78 	.word	0x20000b78
 8005aec:	20000b6c 	.word	0x20000b6c
 8005af0:	20000694 	.word	0x20000694
 8005af4:	20000690 	.word	0x20000690
 8005af8:	20000010 	.word	0x20000010

08005afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	60fb      	str	r3, [r7, #12]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <vTaskPlaceOnEventList+0x44>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3318      	adds	r3, #24
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fe fe6b 	bl	8004806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b30:	2101      	movs	r1, #1
 8005b32:	6838      	ldr	r0, [r7, #0]
 8005b34:	f000 fa86 	bl	8006044 <prvAddCurrentTaskToDelayedList>
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000690 	.word	0x20000690

08005b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	617b      	str	r3, [r7, #20]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3318      	adds	r3, #24
 8005b72:	4619      	mov	r1, r3
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7fe fe22 	bl	80047be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68b8      	ldr	r0, [r7, #8]
 8005b8a:	f000 fa5b 	bl	8006044 <prvAddCurrentTaskToDelayedList>
	}
 8005b8e:	bf00      	nop
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000690 	.word	0x20000690

08005b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60fb      	str	r3, [r7, #12]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3318      	adds	r3, #24
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fe53 	bl	8004878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <xTaskRemoveFromEventList+0xb0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d11d      	bne.n	8005c16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe fe4a 	bl	8004878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <xTaskRemoveFromEventList+0xb4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d903      	bls.n	8005bf8 <xTaskRemoveFromEventList+0x5c>
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	4a16      	ldr	r2, [pc, #88]	; (8005c50 <xTaskRemoveFromEventList+0xb4>)
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4a13      	ldr	r2, [pc, #76]	; (8005c54 <xTaskRemoveFromEventList+0xb8>)
 8005c06:	441a      	add	r2, r3
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f7fe fdd5 	bl	80047be <vListInsertEnd>
 8005c14:	e005      	b.n	8005c22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	3318      	adds	r3, #24
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	480e      	ldr	r0, [pc, #56]	; (8005c58 <xTaskRemoveFromEventList+0xbc>)
 8005c1e:	f7fe fdce 	bl	80047be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c26:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <xTaskRemoveFromEventList+0xc0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d905      	bls.n	8005c3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <xTaskRemoveFromEventList+0xc4>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e001      	b.n	8005c40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005c40:	697b      	ldr	r3, [r7, #20]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000b8c 	.word	0x20000b8c
 8005c50:	20000b6c 	.word	0x20000b6c
 8005c54:	20000694 	.word	0x20000694
 8005c58:	20000b24 	.word	0x20000b24
 8005c5c:	20000690 	.word	0x20000690
 8005c60:	20000b78 	.word	0x20000b78

08005c64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <vTaskInternalSetTimeOutState+0x24>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <vTaskInternalSetTimeOutState+0x28>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	605a      	str	r2, [r3, #4]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20000b7c 	.word	0x20000b7c
 8005c8c:	20000b68 	.word	0x20000b68

08005c90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	613b      	str	r3, [r7, #16]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60fb      	str	r3, [r7, #12]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cd2:	f000 fe47 	bl	8006964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cd6:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <xTaskCheckForTimeOut+0xbc>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cee:	d102      	bne.n	8005cf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	e023      	b.n	8005d3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <xTaskCheckForTimeOut+0xc0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d007      	beq.n	8005d12 <xTaskCheckForTimeOut+0x82>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d302      	bcc.n	8005d12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	e015      	b.n	8005d3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d20b      	bcs.n	8005d34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff ff9b 	bl	8005c64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	e004      	b.n	8005d3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d3e:	f000 fe41 	bl	80069c4 <vPortExitCritical>

	return xReturn;
 8005d42:	69fb      	ldr	r3, [r7, #28]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000b68 	.word	0x20000b68
 8005d50:	20000b7c 	.word	0x20000b7c

08005d54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <vTaskMissedYield+0x14>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000b78 	.word	0x20000b78

08005d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d74:	f000 f852 	bl	8005e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <prvIdleTask+0x28>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d9f9      	bls.n	8005d74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <prvIdleTask+0x2c>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d90:	e7f0      	b.n	8005d74 <prvIdleTask+0x8>
 8005d92:	bf00      	nop
 8005d94:	20000694 	.word	0x20000694
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005da2:	2300      	movs	r3, #0
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	e00c      	b.n	8005dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <prvInitialiseTaskLists+0x60>)
 8005db4:	4413      	add	r3, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fcd4 	bl	8004764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b37      	cmp	r3, #55	; 0x37
 8005dc6:	d9ef      	bls.n	8005da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dc8:	480d      	ldr	r0, [pc, #52]	; (8005e00 <prvInitialiseTaskLists+0x64>)
 8005dca:	f7fe fccb 	bl	8004764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dce:	480d      	ldr	r0, [pc, #52]	; (8005e04 <prvInitialiseTaskLists+0x68>)
 8005dd0:	f7fe fcc8 	bl	8004764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dd4:	480c      	ldr	r0, [pc, #48]	; (8005e08 <prvInitialiseTaskLists+0x6c>)
 8005dd6:	f7fe fcc5 	bl	8004764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dda:	480c      	ldr	r0, [pc, #48]	; (8005e0c <prvInitialiseTaskLists+0x70>)
 8005ddc:	f7fe fcc2 	bl	8004764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005de0:	480b      	ldr	r0, [pc, #44]	; (8005e10 <prvInitialiseTaskLists+0x74>)
 8005de2:	f7fe fcbf 	bl	8004764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <prvInitialiseTaskLists+0x78>)
 8005de8:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <prvInitialiseTaskLists+0x64>)
 8005dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <prvInitialiseTaskLists+0x7c>)
 8005dee:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <prvInitialiseTaskLists+0x68>)
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000694 	.word	0x20000694
 8005e00:	20000af4 	.word	0x20000af4
 8005e04:	20000b08 	.word	0x20000b08
 8005e08:	20000b24 	.word	0x20000b24
 8005e0c:	20000b38 	.word	0x20000b38
 8005e10:	20000b50 	.word	0x20000b50
 8005e14:	20000b1c 	.word	0x20000b1c
 8005e18:	20000b20 	.word	0x20000b20

08005e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e22:	e019      	b.n	8005e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e24:	f000 fd9e 	bl	8006964 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005e28:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <prvCheckTasksWaitingTermination+0x50>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe fd1f 	bl	8004878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <prvCheckTasksWaitingTermination+0x54>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <prvCheckTasksWaitingTermination+0x54>)
 8005e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <prvCheckTasksWaitingTermination+0x58>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <prvCheckTasksWaitingTermination+0x58>)
 8005e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e4e:	f000 fdb9 	bl	80069c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f810 	bl	8005e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <prvCheckTasksWaitingTermination+0x58>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e1      	bne.n	8005e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000b38 	.word	0x20000b38
 8005e70:	20000b64 	.word	0x20000b64
 8005e74:	20000b4c 	.word	0x20000b4c

08005e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3354      	adds	r3, #84	; 0x54
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 f8b3 	bl	8006ff0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d108      	bne.n	8005ea6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 ff49 	bl	8006d30 <vPortFree>
				vPortFree( pxTCB );
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 ff46 	bl	8006d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ea4:	e018      	b.n	8005ed8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d103      	bne.n	8005eb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 ff3d 	bl	8006d30 <vPortFree>
	}
 8005eb6:	e00f      	b.n	8005ed8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d00a      	beq.n	8005ed8 <prvDeleteTCB+0x60>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60fb      	str	r3, [r7, #12]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <prvDeleteTCB+0x5e>
	}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <prvResetNextTaskUnblockTime+0x44>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <prvResetNextTaskUnblockTime+0x14>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <prvResetNextTaskUnblockTime+0x16>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <prvResetNextTaskUnblockTime+0x48>)
 8005efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f02:	e008      	b.n	8005f16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f04:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <prvResetNextTaskUnblockTime+0x44>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4a05      	ldr	r2, [pc, #20]	; (8005f28 <prvResetNextTaskUnblockTime+0x48>)
 8005f14:	6013      	str	r3, [r2, #0]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000b1c 	.word	0x20000b1c
 8005f28:	20000b84 	.word	0x20000b84

08005f2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <xTaskGetSchedulerState+0x34>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	607b      	str	r3, [r7, #4]
 8005f3e:	e008      	b.n	8005f52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f40:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <xTaskGetSchedulerState+0x38>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	607b      	str	r3, [r7, #4]
 8005f4c:	e001      	b.n	8005f52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f52:	687b      	ldr	r3, [r7, #4]
	}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	20000b70 	.word	0x20000b70
 8005f64:	20000b8c 	.word	0x20000b8c

08005f68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d056      	beq.n	800602c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f7e:	4b2e      	ldr	r3, [pc, #184]	; (8006038 <xTaskPriorityDisinherit+0xd0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d00a      	beq.n	8005f9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	60fb      	str	r3, [r7, #12]
}
 8005f9a:	bf00      	nop
 8005f9c:	e7fe      	b.n	8005f9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60bb      	str	r3, [r7, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc0:	1e5a      	subs	r2, r3, #1
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d02c      	beq.n	800602c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d128      	bne.n	800602c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fc4a 	bl	8004878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	; (800603c <xTaskPriorityDisinherit+0xd4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d903      	bls.n	800600c <xTaskPriorityDisinherit+0xa4>
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	4a0c      	ldr	r2, [pc, #48]	; (800603c <xTaskPriorityDisinherit+0xd4>)
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <xTaskPriorityDisinherit+0xd8>)
 800601a:	441a      	add	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f7fe fbcb 	bl	80047be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006028:	2301      	movs	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800602c:	697b      	ldr	r3, [r7, #20]
	}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000690 	.word	0x20000690
 800603c:	20000b6c 	.word	0x20000b6c
 8006040:	20000694 	.word	0x20000694

08006044 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800604e:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006054:	4b20      	ldr	r3, [pc, #128]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fc0c 	bl	8004878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006066:	d10a      	bne.n	800607e <prvAddCurrentTaskToDelayedList+0x3a>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800606e:	4b1a      	ldr	r3, [pc, #104]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4819      	ldr	r0, [pc, #100]	; (80060dc <prvAddCurrentTaskToDelayedList+0x98>)
 8006078:	f7fe fba1 	bl	80047be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800607c:	e026      	b.n	80060cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4413      	add	r3, r2
 8006084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006086:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	429a      	cmp	r2, r3
 8006094:	d209      	bcs.n	80060aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3304      	adds	r3, #4
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f7fe fbaf 	bl	8004806 <vListInsert>
}
 80060a8:	e010      	b.n	80060cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060aa:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f7fe fba5 	bl	8004806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060bc:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d202      	bcs.n	80060cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060c6:	4a08      	ldr	r2, [pc, #32]	; (80060e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	6013      	str	r3, [r2, #0]
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000b68 	.word	0x20000b68
 80060d8:	20000690 	.word	0x20000690
 80060dc:	20000b50 	.word	0x20000b50
 80060e0:	20000b20 	.word	0x20000b20
 80060e4:	20000b1c 	.word	0x20000b1c
 80060e8:	20000b84 	.word	0x20000b84

080060ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060f6:	f000 facb 	bl	8006690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060fa:	4b1c      	ldr	r3, [pc, #112]	; (800616c <xTimerCreateTimerTask+0x80>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d021      	beq.n	8006146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800610a:	1d3a      	adds	r2, r7, #4
 800610c:	f107 0108 	add.w	r1, r7, #8
 8006110:	f107 030c 	add.w	r3, r7, #12
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fb0b 	bl	8004730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	9202      	str	r2, [sp, #8]
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	2302      	movs	r3, #2
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	2300      	movs	r3, #0
 800612a:	460a      	mov	r2, r1
 800612c:	4910      	ldr	r1, [pc, #64]	; (8006170 <xTimerCreateTimerTask+0x84>)
 800612e:	4811      	ldr	r0, [pc, #68]	; (8006174 <xTimerCreateTimerTask+0x88>)
 8006130:	f7ff f8b2 	bl	8005298 <xTaskCreateStatic>
 8006134:	4603      	mov	r3, r0
 8006136:	4a10      	ldr	r2, [pc, #64]	; (8006178 <xTimerCreateTimerTask+0x8c>)
 8006138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800613a:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <xTimerCreateTimerTask+0x8c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006142:	2301      	movs	r3, #1
 8006144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	613b      	str	r3, [r7, #16]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006162:	697b      	ldr	r3, [r7, #20]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000bc0 	.word	0x20000bc0
 8006170:	08007184 	.word	0x08007184
 8006174:	08006299 	.word	0x08006299
 8006178:	20000bc4 	.word	0x20000bc4

0800617c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	; 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800618a:	2300      	movs	r3, #0
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	623b      	str	r3, [r7, #32]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061aa:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <xTimerGenericCommand+0x98>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d02a      	beq.n	8006208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b05      	cmp	r3, #5
 80061c2:	dc18      	bgt.n	80061f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061c4:	f7ff feb2 	bl	8005f2c <xTaskGetSchedulerState>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d109      	bne.n	80061e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061ce:	4b11      	ldr	r3, [pc, #68]	; (8006214 <xTimerGenericCommand+0x98>)
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	f107 0110 	add.w	r1, r7, #16
 80061d6:	2300      	movs	r3, #0
 80061d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061da:	f7fe fc79 	bl	8004ad0 <xQueueGenericSend>
 80061de:	6278      	str	r0, [r7, #36]	; 0x24
 80061e0:	e012      	b.n	8006208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061e2:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <xTimerGenericCommand+0x98>)
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	f107 0110 	add.w	r1, r7, #16
 80061ea:	2300      	movs	r3, #0
 80061ec:	2200      	movs	r2, #0
 80061ee:	f7fe fc6f 	bl	8004ad0 <xQueueGenericSend>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24
 80061f4:	e008      	b.n	8006208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061f6:	4b07      	ldr	r3, [pc, #28]	; (8006214 <xTimerGenericCommand+0x98>)
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	f107 0110 	add.w	r1, r7, #16
 80061fe:	2300      	movs	r3, #0
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	f7fe fd63 	bl	8004ccc <xQueueGenericSendFromISR>
 8006206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800620a:	4618      	mov	r0, r3
 800620c:	3728      	adds	r7, #40	; 0x28
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000bc0 	.word	0x20000bc0

08006218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af02      	add	r7, sp, #8
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006222:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <prvProcessExpiredTimer+0x7c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe fb21 	bl	8004878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d122      	bne.n	8006284 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	18d1      	adds	r1, r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	f000 f8c8 	bl	80063e0 <prvInsertTimerInActiveList>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006256:	2300      	movs	r3, #0
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	2100      	movs	r1, #0
 8006260:	6978      	ldr	r0, [r7, #20]
 8006262:	f7ff ff8b 	bl	800617c <xTimerGenericCommand>
 8006266:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60fb      	str	r3, [r7, #12]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	6978      	ldr	r0, [r7, #20]
 800628a:	4798      	blx	r3
}
 800628c:	bf00      	nop
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000bb8 	.word	0x20000bb8

08006298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062a0:	f107 0308 	add.w	r3, r7, #8
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 f857 	bl	8006358 <prvGetNextExpireTime>
 80062aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4619      	mov	r1, r3
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 f803 	bl	80062bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062b6:	f000 f8d5 	bl	8006464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062ba:	e7f1      	b.n	80062a0 <prvTimerTask+0x8>

080062bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062c6:	f7ff fa3b 	bl	8005740 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062ca:	f107 0308 	add.w	r3, r7, #8
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f866 	bl	80063a0 <prvSampleTimeNow>
 80062d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d130      	bne.n	800633e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <prvProcessTimerOrBlockTask+0x3c>
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d806      	bhi.n	80062f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062ea:	f7ff fa37 	bl	800575c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062ee:	68f9      	ldr	r1, [r7, #12]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff91 	bl	8006218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062f6:	e024      	b.n	8006342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <prvProcessTimerOrBlockTask+0x90>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf0c      	ite	eq
 8006308:	2301      	moveq	r3, #1
 800630a:	2300      	movne	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <prvProcessTimerOrBlockTask+0x94>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	4619      	mov	r1, r3
 800631e:	f7fe ff87 	bl	8005230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006322:	f7ff fa1b 	bl	800575c <xTaskResumeAll>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800632c:	4b09      	ldr	r3, [pc, #36]	; (8006354 <prvProcessTimerOrBlockTask+0x98>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	f3bf 8f6f 	isb	sy
}
 800633c:	e001      	b.n	8006342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800633e:	f7ff fa0d 	bl	800575c <xTaskResumeAll>
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000bbc 	.word	0x20000bbc
 8006350:	20000bc0 	.word	0x20000bc0
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <prvGetNextExpireTime+0x44>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800637e:	4b07      	ldr	r3, [pc, #28]	; (800639c <prvGetNextExpireTime+0x44>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e001      	b.n	800638e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800638e:	68fb      	ldr	r3, [r7, #12]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20000bb8 	.word	0x20000bb8

080063a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063a8:	f7ff fa76 	bl	8005898 <xTaskGetTickCount>
 80063ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <prvSampleTimeNow+0x3c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d205      	bcs.n	80063c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063b8:	f000 f908 	bl	80065cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e002      	b.n	80063ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063ca:	4a04      	ldr	r2, [pc, #16]	; (80063dc <prvSampleTimeNow+0x3c>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063d0:	68fb      	ldr	r3, [r7, #12]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000bc8 	.word	0x20000bc8

080063e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	429a      	cmp	r2, r3
 8006404:	d812      	bhi.n	800642c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	429a      	cmp	r2, r3
 8006412:	d302      	bcc.n	800641a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006414:	2301      	movs	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e01b      	b.n	8006452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800641a:	4b10      	ldr	r3, [pc, #64]	; (800645c <prvInsertTimerInActiveList+0x7c>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3304      	adds	r3, #4
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f7fe f9ee 	bl	8004806 <vListInsert>
 800642a:	e012      	b.n	8006452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d206      	bcs.n	8006442 <prvInsertTimerInActiveList+0x62>
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d302      	bcc.n	8006442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e007      	b.n	8006452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <prvInsertTimerInActiveList+0x80>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7fe f9da 	bl	8004806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006452:	697b      	ldr	r3, [r7, #20]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000bbc 	.word	0x20000bbc
 8006460:	20000bb8 	.word	0x20000bb8

08006464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08e      	sub	sp, #56	; 0x38
 8006468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800646a:	e09d      	b.n	80065a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	da18      	bge.n	80064a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006472:	1d3b      	adds	r3, r7, #4
 8006474:	3304      	adds	r3, #4
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	61fb      	str	r3, [r7, #28]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649a:	6850      	ldr	r0, [r2, #4]
 800649c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649e:	6892      	ldr	r2, [r2, #8]
 80064a0:	4611      	mov	r1, r2
 80064a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	db7d      	blt.n	80065a6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	3304      	adds	r3, #4
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe f9dc 	bl	8004878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064c0:	463b      	mov	r3, r7
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff ff6c 	bl	80063a0 <prvSampleTimeNow>
 80064c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b09      	cmp	r3, #9
 80064ce:	d86b      	bhi.n	80065a8 <prvProcessReceivedCommands+0x144>
 80064d0:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <prvProcessReceivedCommands+0x74>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	08006501 	.word	0x08006501
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006501 	.word	0x08006501
 80064e4:	080065a9 	.word	0x080065a9
 80064e8:	0800655d 	.word	0x0800655d
 80064ec:	08006595 	.word	0x08006595
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006501 	.word	0x08006501
 80064f8:	080065a9 	.word	0x080065a9
 80064fc:	0800655d 	.word	0x0800655d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	18d1      	adds	r1, r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650e:	f7ff ff67 	bl	80063e0 <prvInsertTimerInActiveList>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d047      	beq.n	80065a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d13f      	bne.n	80065a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	441a      	add	r2, r3
 8006530:	2300      	movs	r3, #0
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	2100      	movs	r1, #0
 8006538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800653a:	f7ff fe1f 	bl	800617c <xTimerGenericCommand>
 800653e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d130      	bne.n	80065a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	61bb      	str	r3, [r7, #24]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	617b      	str	r3, [r7, #20]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	699a      	ldr	r2, [r3, #24]
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	18d1      	adds	r1, r2, r3
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f7ff ff27 	bl	80063e0 <prvInsertTimerInActiveList>
					break;
 8006592:	e009      	b.n	80065a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800659e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a0:	f000 fbc6 	bl	8006d30 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065a4:	e000      	b.n	80065a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065a8:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <prvProcessReceivedCommands+0x164>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	1d39      	adds	r1, r7, #4
 80065ae:	2200      	movs	r2, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe fc23 	bl	8004dfc <xQueueReceive>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f47f af57 	bne.w	800646c <prvProcessReceivedCommands+0x8>
	}
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	3730      	adds	r7, #48	; 0x30
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000bc0 	.word	0x20000bc0

080065cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065d2:	e045      	b.n	8006660 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065d4:	4b2c      	ldr	r3, [pc, #176]	; (8006688 <prvSwitchTimerLists+0xbc>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065de:	4b2a      	ldr	r3, [pc, #168]	; (8006688 <prvSwitchTimerLists+0xbc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe f943 	bl	8004878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d12e      	bne.n	8006660 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4413      	add	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	429a      	cmp	r2, r3
 8006612:	d90e      	bls.n	8006632 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006620:	4b19      	ldr	r3, [pc, #100]	; (8006688 <prvSwitchTimerLists+0xbc>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	4610      	mov	r0, r2
 800662c:	f7fe f8eb 	bl	8004806 <vListInsert>
 8006630:	e016      	b.n	8006660 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006632:	2300      	movs	r3, #0
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	2100      	movs	r1, #0
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f7ff fd9d 	bl	800617c <xTimerGenericCommand>
 8006642:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <prvSwitchTimerLists+0x94>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	603b      	str	r3, [r7, #0]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <prvSwitchTimerLists+0xbc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1b4      	bne.n	80065d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800666a:	4b07      	ldr	r3, [pc, #28]	; (8006688 <prvSwitchTimerLists+0xbc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <prvSwitchTimerLists+0xc0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a04      	ldr	r2, [pc, #16]	; (8006688 <prvSwitchTimerLists+0xbc>)
 8006676:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006678:	4a04      	ldr	r2, [pc, #16]	; (800668c <prvSwitchTimerLists+0xc0>)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6013      	str	r3, [r2, #0]
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000bb8 	.word	0x20000bb8
 800668c:	20000bbc 	.word	0x20000bbc

08006690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006696:	f000 f965 	bl	8006964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800669a:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <prvCheckForValidListAndQueue+0x60>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d120      	bne.n	80066e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066a2:	4814      	ldr	r0, [pc, #80]	; (80066f4 <prvCheckForValidListAndQueue+0x64>)
 80066a4:	f7fe f85e 	bl	8004764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066a8:	4813      	ldr	r0, [pc, #76]	; (80066f8 <prvCheckForValidListAndQueue+0x68>)
 80066aa:	f7fe f85b 	bl	8004764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066ae:	4b13      	ldr	r3, [pc, #76]	; (80066fc <prvCheckForValidListAndQueue+0x6c>)
 80066b0:	4a10      	ldr	r2, [pc, #64]	; (80066f4 <prvCheckForValidListAndQueue+0x64>)
 80066b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066b4:	4b12      	ldr	r3, [pc, #72]	; (8006700 <prvCheckForValidListAndQueue+0x70>)
 80066b6:	4a10      	ldr	r2, [pc, #64]	; (80066f8 <prvCheckForValidListAndQueue+0x68>)
 80066b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066ba:	2300      	movs	r3, #0
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	4b11      	ldr	r3, [pc, #68]	; (8006704 <prvCheckForValidListAndQueue+0x74>)
 80066c0:	4a11      	ldr	r2, [pc, #68]	; (8006708 <prvCheckForValidListAndQueue+0x78>)
 80066c2:	2110      	movs	r1, #16
 80066c4:	200a      	movs	r0, #10
 80066c6:	f7fe f969 	bl	800499c <xQueueGenericCreateStatic>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4a08      	ldr	r2, [pc, #32]	; (80066f0 <prvCheckForValidListAndQueue+0x60>)
 80066ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <prvCheckForValidListAndQueue+0x60>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <prvCheckForValidListAndQueue+0x60>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	490b      	ldr	r1, [pc, #44]	; (800670c <prvCheckForValidListAndQueue+0x7c>)
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fd7c 	bl	80051dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066e4:	f000 f96e 	bl	80069c4 <vPortExitCritical>
}
 80066e8:	bf00      	nop
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000bc0 	.word	0x20000bc0
 80066f4:	20000b90 	.word	0x20000b90
 80066f8:	20000ba4 	.word	0x20000ba4
 80066fc:	20000bb8 	.word	0x20000bb8
 8006700:	20000bbc 	.word	0x20000bbc
 8006704:	20000c6c 	.word	0x20000c6c
 8006708:	20000bcc 	.word	0x20000bcc
 800670c:	0800718c 	.word	0x0800718c

08006710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3b04      	subs	r3, #4
 8006720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3b04      	subs	r3, #4
 800672e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f023 0201 	bic.w	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3b04      	subs	r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006740:	4a0c      	ldr	r2, [pc, #48]	; (8006774 <pxPortInitialiseStack+0x64>)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3b14      	subs	r3, #20
 800674a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3b04      	subs	r3, #4
 8006756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f06f 0202 	mvn.w	r2, #2
 800675e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3b20      	subs	r3, #32
 8006764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006766:	68fb      	ldr	r3, [r7, #12]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	08006779 	.word	0x08006779

08006778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006782:	4b12      	ldr	r3, [pc, #72]	; (80067cc <prvTaskExitError+0x54>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800678a:	d00a      	beq.n	80067a2 <prvTaskExitError+0x2a>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	60fb      	str	r3, [r7, #12]
}
 800679e:	bf00      	nop
 80067a0:	e7fe      	b.n	80067a0 <prvTaskExitError+0x28>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60bb      	str	r3, [r7, #8]
}
 80067b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067b6:	bf00      	nop
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0fc      	beq.n	80067b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	2000000c 	.word	0x2000000c

080067d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <pxCurrentTCBConst2>)
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	6808      	ldr	r0, [r1, #0]
 80067d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	f380 8809 	msr	PSP, r0
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f380 8811 	msr	BASEPRI, r0
 80067ea:	4770      	bx	lr
 80067ec:	f3af 8000 	nop.w

080067f0 <pxCurrentTCBConst2>:
 80067f0:	20000690 	.word	0x20000690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop

080067f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067f8:	4808      	ldr	r0, [pc, #32]	; (800681c <prvPortStartFirstTask+0x24>)
 80067fa:	6800      	ldr	r0, [r0, #0]
 80067fc:	6800      	ldr	r0, [r0, #0]
 80067fe:	f380 8808 	msr	MSP, r0
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8814 	msr	CONTROL, r0
 800680a:	b662      	cpsie	i
 800680c:	b661      	cpsie	f
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	df00      	svc	0
 8006818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800681a:	bf00      	nop
 800681c:	e000ed08 	.word	0xe000ed08

08006820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006826:	4b46      	ldr	r3, [pc, #280]	; (8006940 <xPortStartScheduler+0x120>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a46      	ldr	r2, [pc, #280]	; (8006944 <xPortStartScheduler+0x124>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10a      	bne.n	8006846 <xPortStartScheduler+0x26>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	613b      	str	r3, [r7, #16]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006846:	4b3e      	ldr	r3, [pc, #248]	; (8006940 <xPortStartScheduler+0x120>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3f      	ldr	r2, [pc, #252]	; (8006948 <xPortStartScheduler+0x128>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10a      	bne.n	8006866 <xPortStartScheduler+0x46>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006866:	4b39      	ldr	r3, [pc, #228]	; (800694c <xPortStartScheduler+0x12c>)
 8006868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006888:	b2da      	uxtb	r2, r3
 800688a:	4b31      	ldr	r3, [pc, #196]	; (8006950 <xPortStartScheduler+0x130>)
 800688c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800688e:	4b31      	ldr	r3, [pc, #196]	; (8006954 <xPortStartScheduler+0x134>)
 8006890:	2207      	movs	r2, #7
 8006892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006894:	e009      	b.n	80068aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006896:	4b2f      	ldr	r3, [pc, #188]	; (8006954 <xPortStartScheduler+0x134>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3b01      	subs	r3, #1
 800689c:	4a2d      	ldr	r2, [pc, #180]	; (8006954 <xPortStartScheduler+0x134>)
 800689e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d0ef      	beq.n	8006896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068b6:	4b27      	ldr	r3, [pc, #156]	; (8006954 <xPortStartScheduler+0x134>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1c3 0307 	rsb	r3, r3, #7
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d00a      	beq.n	80068d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	60bb      	str	r3, [r7, #8]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <xPortStartScheduler+0x134>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <xPortStartScheduler+0x134>)
 80068e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068e2:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <xPortStartScheduler+0x134>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068ea:	4a1a      	ldr	r2, [pc, #104]	; (8006954 <xPortStartScheduler+0x134>)
 80068ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068f6:	4b18      	ldr	r3, [pc, #96]	; (8006958 <xPortStartScheduler+0x138>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a17      	ldr	r2, [pc, #92]	; (8006958 <xPortStartScheduler+0x138>)
 80068fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006902:	4b15      	ldr	r3, [pc, #84]	; (8006958 <xPortStartScheduler+0x138>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a14      	ldr	r2, [pc, #80]	; (8006958 <xPortStartScheduler+0x138>)
 8006908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800690c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800690e:	f000 f8dd 	bl	8006acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006912:	4b12      	ldr	r3, [pc, #72]	; (800695c <xPortStartScheduler+0x13c>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006918:	f000 f8fc 	bl	8006b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800691c:	4b10      	ldr	r3, [pc, #64]	; (8006960 <xPortStartScheduler+0x140>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a0f      	ldr	r2, [pc, #60]	; (8006960 <xPortStartScheduler+0x140>)
 8006922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006928:	f7ff ff66 	bl	80067f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800692c:	f7ff f882 	bl	8005a34 <vTaskSwitchContext>
	prvTaskExitError();
 8006930:	f7ff ff22 	bl	8006778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	e000ed00 	.word	0xe000ed00
 8006944:	410fc271 	.word	0x410fc271
 8006948:	410fc270 	.word	0x410fc270
 800694c:	e000e400 	.word	0xe000e400
 8006950:	20000cbc 	.word	0x20000cbc
 8006954:	20000cc0 	.word	0x20000cc0
 8006958:	e000ed20 	.word	0xe000ed20
 800695c:	2000000c 	.word	0x2000000c
 8006960:	e000ef34 	.word	0xe000ef34

08006964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	607b      	str	r3, [r7, #4]
}
 800697c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800697e:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <vPortEnterCritical+0x58>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a0d      	ldr	r2, [pc, #52]	; (80069bc <vPortEnterCritical+0x58>)
 8006986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <vPortEnterCritical+0x58>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10f      	bne.n	80069b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <vPortEnterCritical+0x5c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	603b      	str	r3, [r7, #0]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <vPortEnterCritical+0x4a>
	}
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	2000000c 	.word	0x2000000c
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <vPortExitCritical+0x50>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <vPortExitCritical+0x24>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	607b      	str	r3, [r7, #4]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <vPortExitCritical+0x50>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <vPortExitCritical+0x50>)
 80069f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069f2:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <vPortExitCritical+0x42>
 80069fa:	2300      	movs	r3, #0
 80069fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f383 8811 	msr	BASEPRI, r3
}
 8006a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c
	...

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f01e 0f10 	tst.w	lr, #16
 8006a30:	bf08      	it	eq
 8006a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	6010      	str	r0, [r2, #0]
 8006a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a44:	f380 8811 	msr	BASEPRI, r0
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f7fe fff0 	bl	8005a34 <vTaskSwitchContext>
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	f380 8811 	msr	BASEPRI, r0
 8006a5c:	bc09      	pop	{r0, r3}
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a66:	f01e 0f10 	tst.w	lr, #16
 8006a6a:	bf08      	it	eq
 8006a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a70:	f380 8809 	msr	PSP, r0
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w

08006a80 <pxCurrentTCBConst>:
 8006a80:	20000690 	.word	0x20000690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
}
 8006aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006aa2:	f7fe ff09 	bl	80058b8 <xTaskIncrementTick>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <xPortSysTickHandler+0x40>)
 8006aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f383 8811 	msr	BASEPRI, r3
}
 8006abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <vPortSetupTimerInterrupt+0x38>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <vPortSetupTimerInterrupt+0x3c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <vPortSetupTimerInterrupt+0x40>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	099b      	lsrs	r3, r3, #6
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <vPortSetupTimerInterrupt+0x44>)
 8006aea:	3b01      	subs	r3, #1
 8006aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010
 8006b04:	e000e018 	.word	0xe000e018
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	10624dd3 	.word	0x10624dd3
 8006b10:	e000e014 	.word	0xe000e014

08006b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b24 <vPortEnableVFP+0x10>
 8006b18:	6801      	ldr	r1, [r0, #0]
 8006b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b1e:	6001      	str	r1, [r0, #0]
 8006b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b22:	bf00      	nop
 8006b24:	e000ed88 	.word	0xe000ed88

08006b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b2e:	f3ef 8305 	mrs	r3, IPSR
 8006b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d914      	bls.n	8006b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b3a:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <vPortValidateInterruptPriority+0x70>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b44:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <vPortValidateInterruptPriority+0x74>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	7afa      	ldrb	r2, [r7, #11]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d20a      	bcs.n	8006b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <vPortValidateInterruptPriority+0x78>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ba4 <vPortValidateInterruptPriority+0x7c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d90a      	bls.n	8006b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	603b      	str	r3, [r7, #0]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <vPortValidateInterruptPriority+0x60>
	}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	e000e3f0 	.word	0xe000e3f0
 8006b9c:	20000cbc 	.word	0x20000cbc
 8006ba0:	e000ed0c 	.word	0xe000ed0c
 8006ba4:	20000cc0 	.word	0x20000cc0

08006ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bb4:	f7fe fdc4 	bl	8005740 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bb8:	4b58      	ldr	r3, [pc, #352]	; (8006d1c <pvPortMalloc+0x174>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bc0:	f000 f910 	bl	8006de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bc4:	4b56      	ldr	r3, [pc, #344]	; (8006d20 <pvPortMalloc+0x178>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 808e 	bne.w	8006cee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01d      	beq.n	8006c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006bd8:	2208      	movs	r2, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4413      	add	r3, r2
 8006bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d014      	beq.n	8006c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f023 0307 	bic.w	r3, r3, #7
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <pvPortMalloc+0x6c>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	617b      	str	r3, [r7, #20]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d069      	beq.n	8006cee <pvPortMalloc+0x146>
 8006c1a:	4b42      	ldr	r3, [pc, #264]	; (8006d24 <pvPortMalloc+0x17c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d864      	bhi.n	8006cee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c24:	4b40      	ldr	r3, [pc, #256]	; (8006d28 <pvPortMalloc+0x180>)
 8006c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c28:	4b3f      	ldr	r3, [pc, #252]	; (8006d28 <pvPortMalloc+0x180>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c2e:	e004      	b.n	8006c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <pvPortMalloc+0xa4>
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f1      	bne.n	8006c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c4c:	4b33      	ldr	r3, [pc, #204]	; (8006d1c <pvPortMalloc+0x174>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d04b      	beq.n	8006cee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	2308      	movs	r3, #8
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d91f      	bls.n	8006cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	613b      	str	r3, [r7, #16]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cb2:	69b8      	ldr	r0, [r7, #24]
 8006cb4:	f000 f8f8 	bl	8006ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	; (8006d24 <pvPortMalloc+0x17c>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <pvPortMalloc+0x17c>)
 8006cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cc6:	4b17      	ldr	r3, [pc, #92]	; (8006d24 <pvPortMalloc+0x17c>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <pvPortMalloc+0x184>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d203      	bcs.n	8006cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cd2:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <pvPortMalloc+0x17c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <pvPortMalloc+0x184>)
 8006cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <pvPortMalloc+0x178>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cee:	f7fe fd35 	bl	800575c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <pvPortMalloc+0x16a>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60fb      	str	r3, [r7, #12]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <pvPortMalloc+0x168>
	return pvReturn;
 8006d12:	69fb      	ldr	r3, [r7, #28]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3728      	adds	r7, #40	; 0x28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	200010cc 	.word	0x200010cc
 8006d20:	200010d8 	.word	0x200010d8
 8006d24:	200010d0 	.word	0x200010d0
 8006d28:	200010c4 	.word	0x200010c4
 8006d2c:	200010d4 	.word	0x200010d4

08006d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d048      	beq.n	8006dd4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d42:	2308      	movs	r3, #8
 8006d44:	425b      	negs	r3, r3
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4413      	add	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <vPortFree+0xac>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <vPortFree+0x44>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <vPortFree+0x62>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60bb      	str	r3, [r7, #8]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <vPortFree+0xac>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d019      	beq.n	8006dd4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d115      	bne.n	8006dd4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <vPortFree+0xac>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	401a      	ands	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006db8:	f7fe fcc2 	bl	8005740 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <vPortFree+0xb0>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	4a06      	ldr	r2, [pc, #24]	; (8006de0 <vPortFree+0xb0>)
 8006dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f000 f86c 	bl	8006ea8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006dd0:	f7fe fcc4 	bl	800575c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dd4:	bf00      	nop
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	200010d8 	.word	0x200010d8
 8006de0:	200010d0 	.word	0x200010d0

08006de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006df0:	4b27      	ldr	r3, [pc, #156]	; (8006e90 <prvHeapInit+0xac>)
 8006df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3307      	adds	r3, #7
 8006e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0307 	bic.w	r3, r3, #7
 8006e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <prvHeapInit+0xac>)
 8006e14:	4413      	add	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <prvHeapInit+0xb0>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <prvHeapInit+0xb0>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e30:	2208      	movs	r2, #8
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0307 	bic.w	r3, r3, #7
 8006e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <prvHeapInit+0xb4>)
 8006e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <prvHeapInit+0xb4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e4e:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <prvHeapInit+0xb4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e64:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <prvHeapInit+0xb4>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <prvHeapInit+0xb8>)
 8006e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <prvHeapInit+0xbc>)
 8006e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <prvHeapInit+0xc0>)
 8006e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e82:	601a      	str	r2, [r3, #0]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	20000cc4 	.word	0x20000cc4
 8006e94:	200010c4 	.word	0x200010c4
 8006e98:	200010cc 	.word	0x200010cc
 8006e9c:	200010d4 	.word	0x200010d4
 8006ea0:	200010d0 	.word	0x200010d0
 8006ea4:	200010d8 	.word	0x200010d8

08006ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006eb0:	4b28      	ldr	r3, [pc, #160]	; (8006f54 <prvInsertBlockIntoFreeList+0xac>)
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e002      	b.n	8006ebc <prvInsertBlockIntoFreeList+0x14>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d8f7      	bhi.n	8006eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d108      	bne.n	8006eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	441a      	add	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d118      	bne.n	8006f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <prvInsertBlockIntoFreeList+0xb0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d00d      	beq.n	8006f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	441a      	add	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e008      	b.n	8006f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f26:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <prvInsertBlockIntoFreeList+0xb0>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e003      	b.n	8006f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d002      	beq.n	8006f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	200010c4 	.word	0x200010c4
 8006f58:	200010cc 	.word	0x200010cc

08006f5c <__libc_init_array>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	4d0d      	ldr	r5, [pc, #52]	; (8006f94 <__libc_init_array+0x38>)
 8006f60:	4c0d      	ldr	r4, [pc, #52]	; (8006f98 <__libc_init_array+0x3c>)
 8006f62:	1b64      	subs	r4, r4, r5
 8006f64:	10a4      	asrs	r4, r4, #2
 8006f66:	2600      	movs	r6, #0
 8006f68:	42a6      	cmp	r6, r4
 8006f6a:	d109      	bne.n	8006f80 <__libc_init_array+0x24>
 8006f6c:	4d0b      	ldr	r5, [pc, #44]	; (8006f9c <__libc_init_array+0x40>)
 8006f6e:	4c0c      	ldr	r4, [pc, #48]	; (8006fa0 <__libc_init_array+0x44>)
 8006f70:	f000 f8f2 	bl	8007158 <_init>
 8006f74:	1b64      	subs	r4, r4, r5
 8006f76:	10a4      	asrs	r4, r4, #2
 8006f78:	2600      	movs	r6, #0
 8006f7a:	42a6      	cmp	r6, r4
 8006f7c:	d105      	bne.n	8006f8a <__libc_init_array+0x2e>
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f84:	4798      	blx	r3
 8006f86:	3601      	adds	r6, #1
 8006f88:	e7ee      	b.n	8006f68 <__libc_init_array+0xc>
 8006f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8e:	4798      	blx	r3
 8006f90:	3601      	adds	r6, #1
 8006f92:	e7f2      	b.n	8006f7a <__libc_init_array+0x1e>
 8006f94:	08007250 	.word	0x08007250
 8006f98:	08007250 	.word	0x08007250
 8006f9c:	08007250 	.word	0x08007250
 8006fa0:	08007254 	.word	0x08007254

08006fa4 <__retarget_lock_acquire_recursive>:
 8006fa4:	4770      	bx	lr

08006fa6 <__retarget_lock_release_recursive>:
 8006fa6:	4770      	bx	lr

08006fa8 <memcpy>:
 8006fa8:	440a      	add	r2, r1
 8006faa:	4291      	cmp	r1, r2
 8006fac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fb0:	d100      	bne.n	8006fb4 <memcpy+0xc>
 8006fb2:	4770      	bx	lr
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	d1f9      	bne.n	8006fb6 <memcpy+0xe>
 8006fc2:	bd10      	pop	{r4, pc}

08006fc4 <memset>:
 8006fc4:	4402      	add	r2, r0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d100      	bne.n	8006fce <memset+0xa>
 8006fcc:	4770      	bx	lr
 8006fce:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd2:	e7f9      	b.n	8006fc8 <memset+0x4>

08006fd4 <cleanup_glue>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	6809      	ldr	r1, [r1, #0]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	b109      	cbz	r1, 8006fe2 <cleanup_glue+0xe>
 8006fde:	f7ff fff9 	bl	8006fd4 <cleanup_glue>
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fea:	f000 b869 	b.w	80070c0 <_free_r>
	...

08006ff0 <_reclaim_reent>:
 8006ff0:	4b2c      	ldr	r3, [pc, #176]	; (80070a4 <_reclaim_reent+0xb4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4283      	cmp	r3, r0
 8006ff6:	b570      	push	{r4, r5, r6, lr}
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	d051      	beq.n	80070a0 <_reclaim_reent+0xb0>
 8006ffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ffe:	b143      	cbz	r3, 8007012 <_reclaim_reent+0x22>
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d14a      	bne.n	800709c <_reclaim_reent+0xac>
 8007006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007008:	6819      	ldr	r1, [r3, #0]
 800700a:	b111      	cbz	r1, 8007012 <_reclaim_reent+0x22>
 800700c:	4620      	mov	r0, r4
 800700e:	f000 f857 	bl	80070c0 <_free_r>
 8007012:	6961      	ldr	r1, [r4, #20]
 8007014:	b111      	cbz	r1, 800701c <_reclaim_reent+0x2c>
 8007016:	4620      	mov	r0, r4
 8007018:	f000 f852 	bl	80070c0 <_free_r>
 800701c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800701e:	b111      	cbz	r1, 8007026 <_reclaim_reent+0x36>
 8007020:	4620      	mov	r0, r4
 8007022:	f000 f84d 	bl	80070c0 <_free_r>
 8007026:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007028:	b111      	cbz	r1, 8007030 <_reclaim_reent+0x40>
 800702a:	4620      	mov	r0, r4
 800702c:	f000 f848 	bl	80070c0 <_free_r>
 8007030:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007032:	b111      	cbz	r1, 800703a <_reclaim_reent+0x4a>
 8007034:	4620      	mov	r0, r4
 8007036:	f000 f843 	bl	80070c0 <_free_r>
 800703a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800703c:	b111      	cbz	r1, 8007044 <_reclaim_reent+0x54>
 800703e:	4620      	mov	r0, r4
 8007040:	f000 f83e 	bl	80070c0 <_free_r>
 8007044:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007046:	b111      	cbz	r1, 800704e <_reclaim_reent+0x5e>
 8007048:	4620      	mov	r0, r4
 800704a:	f000 f839 	bl	80070c0 <_free_r>
 800704e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007050:	b111      	cbz	r1, 8007058 <_reclaim_reent+0x68>
 8007052:	4620      	mov	r0, r4
 8007054:	f000 f834 	bl	80070c0 <_free_r>
 8007058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800705a:	b111      	cbz	r1, 8007062 <_reclaim_reent+0x72>
 800705c:	4620      	mov	r0, r4
 800705e:	f000 f82f 	bl	80070c0 <_free_r>
 8007062:	69a3      	ldr	r3, [r4, #24]
 8007064:	b1e3      	cbz	r3, 80070a0 <_reclaim_reent+0xb0>
 8007066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007068:	4620      	mov	r0, r4
 800706a:	4798      	blx	r3
 800706c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800706e:	b1b9      	cbz	r1, 80070a0 <_reclaim_reent+0xb0>
 8007070:	4620      	mov	r0, r4
 8007072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007076:	f7ff bfad 	b.w	8006fd4 <cleanup_glue>
 800707a:	5949      	ldr	r1, [r1, r5]
 800707c:	b941      	cbnz	r1, 8007090 <_reclaim_reent+0xa0>
 800707e:	3504      	adds	r5, #4
 8007080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007082:	2d80      	cmp	r5, #128	; 0x80
 8007084:	68d9      	ldr	r1, [r3, #12]
 8007086:	d1f8      	bne.n	800707a <_reclaim_reent+0x8a>
 8007088:	4620      	mov	r0, r4
 800708a:	f000 f819 	bl	80070c0 <_free_r>
 800708e:	e7ba      	b.n	8007006 <_reclaim_reent+0x16>
 8007090:	680e      	ldr	r6, [r1, #0]
 8007092:	4620      	mov	r0, r4
 8007094:	f000 f814 	bl	80070c0 <_free_r>
 8007098:	4631      	mov	r1, r6
 800709a:	e7ef      	b.n	800707c <_reclaim_reent+0x8c>
 800709c:	2500      	movs	r5, #0
 800709e:	e7ef      	b.n	8007080 <_reclaim_reent+0x90>
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
 80070a2:	bf00      	nop
 80070a4:	20000010 	.word	0x20000010

080070a8 <__malloc_lock>:
 80070a8:	4801      	ldr	r0, [pc, #4]	; (80070b0 <__malloc_lock+0x8>)
 80070aa:	f7ff bf7b 	b.w	8006fa4 <__retarget_lock_acquire_recursive>
 80070ae:	bf00      	nop
 80070b0:	200010dc 	.word	0x200010dc

080070b4 <__malloc_unlock>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__malloc_unlock+0x8>)
 80070b6:	f7ff bf76 	b.w	8006fa6 <__retarget_lock_release_recursive>
 80070ba:	bf00      	nop
 80070bc:	200010dc 	.word	0x200010dc

080070c0 <_free_r>:
 80070c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070c2:	2900      	cmp	r1, #0
 80070c4:	d044      	beq.n	8007150 <_free_r+0x90>
 80070c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ca:	9001      	str	r0, [sp, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f1a1 0404 	sub.w	r4, r1, #4
 80070d2:	bfb8      	it	lt
 80070d4:	18e4      	addlt	r4, r4, r3
 80070d6:	f7ff ffe7 	bl	80070a8 <__malloc_lock>
 80070da:	4a1e      	ldr	r2, [pc, #120]	; (8007154 <_free_r+0x94>)
 80070dc:	9801      	ldr	r0, [sp, #4]
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	b933      	cbnz	r3, 80070f0 <_free_r+0x30>
 80070e2:	6063      	str	r3, [r4, #4]
 80070e4:	6014      	str	r4, [r2, #0]
 80070e6:	b003      	add	sp, #12
 80070e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070ec:	f7ff bfe2 	b.w	80070b4 <__malloc_unlock>
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	d908      	bls.n	8007106 <_free_r+0x46>
 80070f4:	6825      	ldr	r5, [r4, #0]
 80070f6:	1961      	adds	r1, r4, r5
 80070f8:	428b      	cmp	r3, r1
 80070fa:	bf01      	itttt	eq
 80070fc:	6819      	ldreq	r1, [r3, #0]
 80070fe:	685b      	ldreq	r3, [r3, #4]
 8007100:	1949      	addeq	r1, r1, r5
 8007102:	6021      	streq	r1, [r4, #0]
 8007104:	e7ed      	b.n	80070e2 <_free_r+0x22>
 8007106:	461a      	mov	r2, r3
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	b10b      	cbz	r3, 8007110 <_free_r+0x50>
 800710c:	42a3      	cmp	r3, r4
 800710e:	d9fa      	bls.n	8007106 <_free_r+0x46>
 8007110:	6811      	ldr	r1, [r2, #0]
 8007112:	1855      	adds	r5, r2, r1
 8007114:	42a5      	cmp	r5, r4
 8007116:	d10b      	bne.n	8007130 <_free_r+0x70>
 8007118:	6824      	ldr	r4, [r4, #0]
 800711a:	4421      	add	r1, r4
 800711c:	1854      	adds	r4, r2, r1
 800711e:	42a3      	cmp	r3, r4
 8007120:	6011      	str	r1, [r2, #0]
 8007122:	d1e0      	bne.n	80070e6 <_free_r+0x26>
 8007124:	681c      	ldr	r4, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	6053      	str	r3, [r2, #4]
 800712a:	4421      	add	r1, r4
 800712c:	6011      	str	r1, [r2, #0]
 800712e:	e7da      	b.n	80070e6 <_free_r+0x26>
 8007130:	d902      	bls.n	8007138 <_free_r+0x78>
 8007132:	230c      	movs	r3, #12
 8007134:	6003      	str	r3, [r0, #0]
 8007136:	e7d6      	b.n	80070e6 <_free_r+0x26>
 8007138:	6825      	ldr	r5, [r4, #0]
 800713a:	1961      	adds	r1, r4, r5
 800713c:	428b      	cmp	r3, r1
 800713e:	bf04      	itt	eq
 8007140:	6819      	ldreq	r1, [r3, #0]
 8007142:	685b      	ldreq	r3, [r3, #4]
 8007144:	6063      	str	r3, [r4, #4]
 8007146:	bf04      	itt	eq
 8007148:	1949      	addeq	r1, r1, r5
 800714a:	6021      	streq	r1, [r4, #0]
 800714c:	6054      	str	r4, [r2, #4]
 800714e:	e7ca      	b.n	80070e6 <_free_r+0x26>
 8007150:	b003      	add	sp, #12
 8007152:	bd30      	pop	{r4, r5, pc}
 8007154:	200010e0 	.word	0x200010e0

08007158 <_init>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr

08007164 <_fini>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr
