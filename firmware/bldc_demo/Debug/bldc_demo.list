
bldc_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006980  08006980  00016980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006a60  08006a60  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a60  08006a60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000106c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200010e0  200010e0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab3a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310d  00000000  00000000  0003abde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0003dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f0  00000000  00000000  0003f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f27  00000000  00000000  000405e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184d3  00000000  00000000  0004350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afc7a  00000000  00000000  0005b9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010b65c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c84  00000000  00000000  0010b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006968 	.word	0x08006968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006968 	.word	0x08006968

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fb8a 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f81c 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f9a6 	bl	800052c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f974 	bl	80004cc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001e4:	f000 f870 	bl	80002c8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80001e8:	f000 f8ac 	bl	8000344 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f003 fd48 	bl	8003c80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f0:	4a05      	ldr	r2, [pc, #20]	; (8000208 <main+0x38>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x3c>)
 80001f6:	f003 fdab 	bl	8003d50 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <main+0x40>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f003 fd72 	bl	8003ce8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	e7fe      	b.n	8000204 <main+0x34>
 8000206:	bf00      	nop
 8000208:	080069a4 	.word	0x080069a4
 800020c:	0800058d 	.word	0x0800058d
 8000210:	200001c8 	.word	0x200001c8

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b096      	sub	sp, #88	; 0x58
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f006 fad6 	bl	80067d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 031c 	add.w	r3, r7, #28
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]
 8000246:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000248:	2302      	movs	r3, #2
 800024a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	2310      	movs	r3, #16
 8000252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000258:	2300      	movs	r3, #0
 800025a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000260:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fdfe 	bl	8000e68 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000272:	f000 f993 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	f107 031c 	add.w	r3, r7, #28
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fe26 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800029e:	f000 f97d 	bl	800059c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80002a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ac:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 f84d 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002bc:	f000 f96e 	bl	800059c <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3758      	adds	r7, #88	; 0x58
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_SPI1_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <MX_SPI1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <MX_SPI1_Init+0x74>)
 80002d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_SPI1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_SPI1_Init+0x74>)
 80002e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_SPI1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_SPI1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_SPI1_Init+0x74>)
 80002f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80002fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_SPI1_Init+0x74>)
 80002fe:	2220      	movs	r2, #32
 8000300:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_SPI1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_SPI1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_SPI1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_SPI1_Init+0x74>)
 8000316:	2207      	movs	r2, #7
 8000318:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_SPI1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_SPI1_Init+0x74>)
 8000322:	2208      	movs	r2, #8
 8000324:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_SPI1_Init+0x74>)
 8000328:	f002 f938 	bl	800259c <HAL_SPI_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f933 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000090 	.word	0x20000090
 8000340:	40013000 	.word	0x40013000

08000344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b09a      	sub	sp, #104	; 0x68
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000364:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	615a      	str	r2, [r3, #20]
 8000376:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	222c      	movs	r2, #44	; 0x2c
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f006 fa28 	bl	80067d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000384:	4b4f      	ldr	r3, [pc, #316]	; (80004c4 <MX_TIM1_Init+0x180>)
 8000386:	4a50      	ldr	r2, [pc, #320]	; (80004c8 <MX_TIM1_Init+0x184>)
 8000388:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800038a:	4b4e      	ldr	r3, [pc, #312]	; (80004c4 <MX_TIM1_Init+0x180>)
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000390:	4b4c      	ldr	r3, [pc, #304]	; (80004c4 <MX_TIM1_Init+0x180>)
 8000392:	2220      	movs	r2, #32
 8000394:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3200;
 8000396:	4b4b      	ldr	r3, [pc, #300]	; (80004c4 <MX_TIM1_Init+0x180>)
 8000398:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800039c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039e:	4b49      	ldr	r3, [pc, #292]	; (80004c4 <MX_TIM1_Init+0x180>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003a4:	4b47      	ldr	r3, [pc, #284]	; (80004c4 <MX_TIM1_Init+0x180>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003aa:	4b46      	ldr	r3, [pc, #280]	; (80004c4 <MX_TIM1_Init+0x180>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003b0:	4844      	ldr	r0, [pc, #272]	; (80004c4 <MX_TIM1_Init+0x180>)
 80003b2:	f002 f996 	bl	80026e2 <HAL_TIM_Base_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003bc:	f000 f8ee 	bl	800059c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003ca:	4619      	mov	r1, r3
 80003cc:	483d      	ldr	r0, [pc, #244]	; (80004c4 <MX_TIM1_Init+0x180>)
 80003ce:	f002 fb55 	bl	8002a7c <HAL_TIM_ConfigClockSource>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80003d8:	f000 f8e0 	bl	800059c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003dc:	4839      	ldr	r0, [pc, #228]	; (80004c4 <MX_TIM1_Init+0x180>)
 80003de:	f002 f9d7 	bl	8002790 <HAL_TIM_PWM_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80003e8:	f000 f8d8 	bl	800059c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003fc:	4619      	mov	r1, r3
 80003fe:	4831      	ldr	r0, [pc, #196]	; (80004c4 <MX_TIM1_Init+0x180>)
 8000400:	f002 ffbe 	bl	8003380 <HAL_TIMEx_MasterConfigSynchronization>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800040a:	f000 f8c7 	bl	800059c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800040e:	2360      	movs	r3, #96	; 0x60
 8000410:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000416:	2300      	movs	r3, #0
 8000418:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800041a:	2308      	movs	r3, #8
 800041c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000422:	2300      	movs	r3, #0
 8000424:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	4824      	ldr	r0, [pc, #144]	; (80004c4 <MX_TIM1_Init+0x180>)
 8000434:	f002 fa0e 	bl	8002854 <HAL_TIM_PWM_ConfigChannel>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800043e:	f000 f8ad 	bl	800059c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000446:	2204      	movs	r2, #4
 8000448:	4619      	mov	r1, r3
 800044a:	481e      	ldr	r0, [pc, #120]	; (80004c4 <MX_TIM1_Init+0x180>)
 800044c:	f002 fa02 	bl	8002854 <HAL_TIM_PWM_ConfigChannel>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000456:	f000 f8a1 	bl	800059c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800045a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800045e:	2208      	movs	r2, #8
 8000460:	4619      	mov	r1, r3
 8000462:	4818      	ldr	r0, [pc, #96]	; (80004c4 <MX_TIM1_Init+0x180>)
 8000464:	f002 f9f6 	bl	8002854 <HAL_TIM_PWM_ConfigChannel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800046e:	f000 f895 	bl	800059c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <MX_TIM1_Init+0x180>)
 80004a8:	f002 ffd8 	bl	800345c <HAL_TIMEx_ConfigBreakDeadTime>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80004b2:	f000 f873 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b6:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM1_Init+0x180>)
 80004b8:	f000 f91e 	bl	80006f8 <HAL_TIM_MspPostInit>

}
 80004bc:	bf00      	nop
 80004be:	3768      	adds	r7, #104	; 0x68
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200000f4 	.word	0x200000f4
 80004c8:	40012c00 	.word	0x40012c00

080004cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004d2:	4a15      	ldr	r2, [pc, #84]	; (8000528 <MX_USART2_UART_Init+0x5c>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_USART2_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_USART2_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_USART2_UART_Init+0x58>)
 8000510:	f003 f81c 	bl	800354c <HAL_UART_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800051a:	f000 f83f 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000140 	.word	0x20000140
 8000528:	40004400 	.word	0x40004400

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_GPIO_Init+0x5c>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a14      	ldr	r2, [pc, #80]	; (8000588 <MX_GPIO_Init+0x5c>)
 8000538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_GPIO_Init+0x5c>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_GPIO_Init+0x5c>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <MX_GPIO_Init+0x5c>)
 8000550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_GPIO_Init+0x5c>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_GPIO_Init+0x5c>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a08      	ldr	r2, [pc, #32]	; (8000588 <MX_GPIO_Init+0x5c>)
 8000568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_GPIO_Init+0x5c>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000594:	2001      	movs	r0, #1
 8000596:	f003 fc85 	bl	8003ea4 <osDelay>
 800059a:	e7fb      	b.n	8000594 <StartDefaultTask+0x8>

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_MspInit+0x4c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <HAL_MspInit+0x4c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_MspInit+0x4c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_MspInit+0x4c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <HAL_MspInit+0x4c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_MspInit+0x4c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	210f      	movs	r1, #15
 80005e2:	f06f 0001 	mvn.w	r0, #1
 80005e6:	f000 faa4 	bl	8000b32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a25      	ldr	r2, [pc, #148]	; (80006ac <HAL_SPI_MspInit+0xb4>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d144      	bne.n	80006a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 8000620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 8000650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_SPI_MspInit+0xb8>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000662:	2370      	movs	r3, #112	; 0x70
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000672:	2305      	movs	r3, #5
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f000 fa80 	bl	8000b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000684:	2320      	movs	r3, #32
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000694:	2305      	movs	r3, #5
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_SPI_MspInit+0xbc>)
 80006a0:	f000 fa70 	bl	8000b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40013000 	.word	0x40013000
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000400 	.word	0x48000400

080006b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_TIM_Base_MspInit+0x38>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10b      	bne.n	80006e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40012c00 	.word	0x40012c00
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a20      	ldr	r2, [pc, #128]	; (8000798 <HAL_TIM_MspPostInit+0xa0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d139      	bne.n	800078e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <HAL_TIM_MspPostInit+0xa4>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a1f      	ldr	r2, [pc, #124]	; (800079c <HAL_TIM_MspPostInit+0xa4>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <HAL_TIM_MspPostInit+0xa4>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <HAL_TIM_MspPostInit+0xa4>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_TIM_MspPostInit+0xa4>)
 8000738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_TIM_MspPostInit+0xa4>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800074a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800075c:	2306      	movs	r3, #6
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f000 fa0b 	bl	8000b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800076e:	2303      	movs	r3, #3
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800077e:	2306      	movs	r3, #6
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_TIM_MspPostInit+0xa8>)
 800078a:	f000 f9fb 	bl	8000b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40012c00 	.word	0x40012c00
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d129      	bne.n	800081a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80007f6:	f248 0304 	movw	r3, #32772	; 0x8004
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000808:	2307      	movs	r3, #7
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 f9b5 	bl	8000b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40004400 	.word	0x40004400
 8000828:	40021000 	.word	0x40021000

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 f88c 	bl	8000978 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000860:	f004 ff66 	bl	8005730 <xTaskGetSchedulerState>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d001      	beq.n	800086e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800086a:	f005 fd15 	bl	8006298 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800089c:	f7ff ffea 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LoopForever+0xe>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	; (80008e4 <LoopForever+0x16>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f005 ff51 	bl	800676c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ca:	f7ff fc81 	bl	80001d0 <main>

080008ce <LoopForever>:

LoopForever:
    b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008dc:	08006a68 	.word	0x08006a68
  ldr r2, =_sbss
 80008e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008e4:	200010e0 	.word	0x200010e0

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f90d 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fe4e 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f917 	bl	8000b6a <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000954:	f000 f8ed 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	200001cc 	.word	0x200001cc

080009a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200001cc 	.word	0x200001cc

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff47 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff5c 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff8e 	bl	8000a70 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5d 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffb0 	bl	8000ad8 <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b92:	e14e      	b.n	8000e32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8140 	beq.w	8000e2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d005      	beq.n	8000bc4 <HAL_GPIO_Init+0x40>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d130      	bne.n	8000c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 0201 	and.w	r2, r3, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d017      	beq.n	8000c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d123      	bne.n	8000cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3208      	adds	r2, #8
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0203 	and.w	r2, r3, #3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 809a 	beq.w	8000e2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf8:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a54      	ldr	r2, [pc, #336]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b52      	ldr	r3, [pc, #328]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d10:	4a50      	ldr	r2, [pc, #320]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	3302      	adds	r3, #2
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d3a:	d013      	beq.n	8000d64 <HAL_GPIO_Init+0x1e0>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a46      	ldr	r2, [pc, #280]	; (8000e58 <HAL_GPIO_Init+0x2d4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d00d      	beq.n	8000d60 <HAL_GPIO_Init+0x1dc>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <HAL_GPIO_Init+0x2d8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d007      	beq.n	8000d5c <HAL_GPIO_Init+0x1d8>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a44      	ldr	r2, [pc, #272]	; (8000e60 <HAL_GPIO_Init+0x2dc>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d101      	bne.n	8000d58 <HAL_GPIO_Init+0x1d4>
 8000d54:	2303      	movs	r3, #3
 8000d56:	e006      	b.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d58:	2305      	movs	r3, #5
 8000d5a:	e004      	b.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e002      	b.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d64:	2300      	movs	r3, #0
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	f002 0203 	and.w	r2, r2, #3
 8000d6c:	0092      	lsls	r2, r2, #2
 8000d6e:	4093      	lsls	r3, r2
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d76:	4937      	ldr	r1, [pc, #220]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d84:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000da8:	4a2e      	ldr	r2, [pc, #184]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dd2:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f47f aea9 	bne.w	8000b94 <HAL_GPIO_Init+0x10>
  }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	48000800 	.word	0x48000800
 8000e60:	48000c00 	.word	0x48000c00
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f001 b823 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 817d 	beq.w	800119e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ea4:	4bbc      	ldr	r3, [pc, #752]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d00c      	beq.n	8000eca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb0:	4bb9      	ldr	r3, [pc, #740]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d15c      	bne.n	8000f76 <HAL_RCC_OscConfig+0x10e>
 8000ebc:	4bb6      	ldr	r3, [pc, #728]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec8:	d155      	bne.n	8000f76 <HAL_RCC_OscConfig+0x10e>
 8000eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ece:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ede:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee2:	fab3 f383 	clz	r3, r3
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	095b      	lsrs	r3, r3, #5
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d102      	bne.n	8000efc <HAL_RCC_OscConfig+0x94>
 8000ef6:	4ba8      	ldr	r3, [pc, #672]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	e015      	b.n	8000f28 <HAL_RCC_OscConfig+0xc0>
 8000efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f1c:	fa93 f3a3 	rbit	r3, r3
 8000f20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f24:	4b9c      	ldr	r3, [pc, #624]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f34:	fa92 f2a2 	rbit	r2, r2
 8000f38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f40:	fab2 f282 	clz	r2, r2
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	f042 0220 	orr.w	r2, r2, #32
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	f002 021f 	and.w	r2, r2, #31
 8000f50:	2101      	movs	r1, #1
 8000f52:	fa01 f202 	lsl.w	r2, r1, r2
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 811f 	beq.w	800119c <HAL_RCC_OscConfig+0x334>
 8000f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 8116 	bne.w	800119c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f000 bfaf 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f86:	d106      	bne.n	8000f96 <HAL_RCC_OscConfig+0x12e>
 8000f88:	4b83      	ldr	r3, [pc, #524]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a82      	ldr	r2, [pc, #520]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e036      	b.n	8001004 <HAL_RCC_OscConfig+0x19c>
 8000f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x158>
 8000fa6:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a7b      	ldr	r2, [pc, #492]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b79      	ldr	r3, [pc, #484]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a78      	ldr	r2, [pc, #480]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e021      	b.n	8001004 <HAL_RCC_OscConfig+0x19c>
 8000fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x184>
 8000fd2:	4b71      	ldr	r3, [pc, #452]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a70      	ldr	r2, [pc, #448]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6d      	ldr	r2, [pc, #436]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e00b      	b.n	8001004 <HAL_RCC_OscConfig+0x19c>
 8000fec:	4b6a      	ldr	r3, [pc, #424]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a69      	ldr	r2, [pc, #420]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b67      	ldr	r3, [pc, #412]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a66      	ldr	r2, [pc, #408]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001004:	4b64      	ldr	r3, [pc, #400]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	f023 020f 	bic.w	r2, r3, #15
 800100c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	495f      	ldr	r1, [pc, #380]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800101a:	4313      	orrs	r3, r2
 800101c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d059      	beq.n	80010e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fcb7 	bl	80009a0 <HAL_GetTick>
 8001032:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	e00a      	b.n	800104e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fcb2 	bl	80009a0 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b64      	cmp	r3, #100	; 0x64
 8001046:	d902      	bls.n	800104e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	f000 bf43 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>
 800104e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001052:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001056:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001062:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	fab3 f383 	clz	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	095b      	lsrs	r3, r3, #5
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d102      	bne.n	8001080 <HAL_RCC_OscConfig+0x218>
 800107a:	4b47      	ldr	r3, [pc, #284]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	e015      	b.n	80010ac <HAL_RCC_OscConfig+0x244>
 8001080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001084:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001098:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800109c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010a8:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010b8:	fa92 f2a2 	rbit	r2, r2
 80010bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010c4:	fab2 f282 	clz	r2, r2
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	f042 0220 	orr.w	r2, r2, #32
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	f002 021f 	and.w	r2, r2, #31
 80010d4:	2101      	movs	r1, #1
 80010d6:	fa01 f202 	lsl.w	r2, r1, r2
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0ab      	beq.n	8001038 <HAL_RCC_OscConfig+0x1d0>
 80010e0:	e05d      	b.n	800119e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fc5d 	bl	80009a0 <HAL_GetTick>
 80010e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	e00a      	b.n	8001102 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fc58 	bl	80009a0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b64      	cmp	r3, #100	; 0x64
 80010fa:	d902      	bls.n	8001102 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f000 bee9 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>
 8001102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001106:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001116:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	095b      	lsrs	r3, r3, #5
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x2cc>
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	e015      	b.n	8001160 <HAL_RCC_OscConfig+0x2f8>
 8001134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001138:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001150:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001164:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001168:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800116c:	fa92 f2a2 	rbit	r2, r2
 8001170:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001174:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001178:	fab2 f282 	clz	r2, r2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f002 021f 	and.w	r2, r2, #31
 8001188:	2101      	movs	r1, #1
 800118a:	fa01 f202 	lsl.w	r2, r1, r2
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1ab      	bne.n	80010ec <HAL_RCC_OscConfig+0x284>
 8001194:	e003      	b.n	800119e <HAL_RCC_OscConfig+0x336>
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 817d 	beq.w	80014ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011b4:	4ba6      	ldr	r3, [pc, #664]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011c0:	4ba3      	ldr	r3, [pc, #652]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d172      	bne.n	80012b2 <HAL_RCC_OscConfig+0x44a>
 80011cc:	4ba0      	ldr	r3, [pc, #640]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d16c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x44a>
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <HAL_RCC_OscConfig+0x3a0>
 8001202:	4b93      	ldr	r3, [pc, #588]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	e013      	b.n	8001230 <HAL_RCC_OscConfig+0x3c8>
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001220:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800122c:	4b88      	ldr	r3, [pc, #544]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	2202      	movs	r2, #2
 8001232:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001236:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800123a:	fa92 f2a2 	rbit	r2, r2
 800123e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001242:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001246:	fab2 f282 	clz	r2, r2
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	f042 0220 	orr.w	r2, r2, #32
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	f002 021f 	and.w	r2, r2, #31
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00a      	beq.n	8001278 <HAL_RCC_OscConfig+0x410>
 8001262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001266:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d002      	beq.n	8001278 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	f000 be2e 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001278:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	21f8      	movs	r1, #248	; 0xf8
 800128e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001296:	fa91 f1a1 	rbit	r1, r1
 800129a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800129e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012a2:	fab1 f181 	clz	r1, r1
 80012a6:	b2c9      	uxtb	r1, r1
 80012a8:	408b      	lsls	r3, r1
 80012aa:	4969      	ldr	r1, [pc, #420]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b0:	e0fd      	b.n	80014ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8088 	beq.w	80013d4 <HAL_RCC_OscConfig+0x56c>
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	461a      	mov	r2, r3
 80012ec:	2301      	movs	r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fb56 	bl	80009a0 <HAL_GetTick>
 80012f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fb51 	bl	80009a0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d902      	bls.n	8001310 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	f000 bde2 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001322:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x4d8>
 800133a:	4b45      	ldr	r3, [pc, #276]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	e013      	b.n	8001368 <HAL_RCC_OscConfig+0x500>
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001358:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2202      	movs	r2, #2
 800136a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800136e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001372:	fa92 f2a2 	rbit	r2, r2
 8001376:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800137a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800137e:	fab2 f282 	clz	r2, r2
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	f042 0220 	orr.w	r2, r2, #32
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	f002 021f 	and.w	r2, r2, #31
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0af      	beq.n	80012fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	21f8      	movs	r1, #248	; 0xf8
 80013b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013b8:	fa91 f1a1 	rbit	r1, r1
 80013bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013c4:	fab1 f181 	clz	r1, r1
 80013c8:	b2c9      	uxtb	r1, r1
 80013ca:	408b      	lsls	r3, r1
 80013cc:	4920      	ldr	r1, [pc, #128]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
 80013d2:	e06c      	b.n	80014ae <HAL_RCC_OscConfig+0x646>
 80013d4:	2301      	movs	r3, #1
 80013d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	461a      	mov	r2, r3
 80013fc:	2300      	movs	r3, #0
 80013fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff face 	bl	80009a0 <HAL_GetTick>
 8001404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fac9 	bl	80009a0 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d902      	bls.n	8001420 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	f000 bd5a 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	095b      	lsrs	r3, r3, #5
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d104      	bne.n	8001454 <HAL_RCC_OscConfig+0x5ec>
 800144a:	4b01      	ldr	r3, [pc, #4]	; (8001450 <HAL_RCC_OscConfig+0x5e8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	e015      	b.n	800147c <HAL_RCC_OscConfig+0x614>
 8001450:	40021000 	.word	0x40021000
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800146c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001478:	4bc8      	ldr	r3, [pc, #800]	; (800179c <HAL_RCC_OscConfig+0x934>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	2202      	movs	r2, #2
 800147e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001482:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001486:	fa92 f2a2 	rbit	r2, r2
 800148a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800148e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001492:	fab2 f282 	clz	r2, r2
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	f042 0220 	orr.w	r2, r2, #32
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	f002 021f 	and.w	r2, r2, #31
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f202 	lsl.w	r2, r1, r2
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1ad      	bne.n	800140a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8110 	beq.w	80016e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d079      	beq.n	80015c8 <HAL_RCC_OscConfig+0x760>
 80014d4:	2301      	movs	r3, #1
 80014d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	4bab      	ldr	r3, [pc, #684]	; (80017a0 <HAL_RCC_OscConfig+0x938>)
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	461a      	mov	r2, r3
 80014fa:	2301      	movs	r3, #1
 80014fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa4f 	bl	80009a0 <HAL_GetTick>
 8001502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff fa4a 	bl	80009a0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d902      	bls.n	800151e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	f000 bcdb 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001538:	2202      	movs	r2, #2
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800155c:	2202      	movs	r2, #2
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f2a3 	rbit	r2, r3
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001576:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001578:	4b88      	ldr	r3, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x934>)
 800157a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001584:	2102      	movs	r1, #2
 8001586:	6019      	str	r1, [r3, #0]
 8001588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	fa93 f1a3 	rbit	r1, r3
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800159e:	6019      	str	r1, [r3, #0]
  return result;
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0a0      	beq.n	8001508 <HAL_RCC_OscConfig+0x6a0>
 80015c6:	e08d      	b.n	80016e4 <HAL_RCC_OscConfig+0x87c>
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015ea:	601a      	str	r2, [r3, #0]
  return result;
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x938>)
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	461a      	mov	r2, r3
 8001606:	2300      	movs	r3, #0
 8001608:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7ff f9c9 	bl	80009a0 <HAL_GetTick>
 800160e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff f9c4 	bl	80009a0 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d902      	bls.n	800162a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	f000 bc55 	b.w	8001ed4 <HAL_RCC_OscConfig+0x106c>
 800162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001632:	2202      	movs	r2, #2
 8001634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	fa93 f2a3 	rbit	r2, r3
 8001644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001648:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001656:	2202      	movs	r2, #2
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fa93 f2a3 	rbit	r2, r3
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800167a:	2202      	movs	r2, #2
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001694:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_OscConfig+0x934>)
 8001698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016a2:	2102      	movs	r1, #2
 80016a4:	6019      	str	r1, [r3, #0]
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fa93 f1a3 	rbit	r1, r3
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016bc:	6019      	str	r1, [r3, #0]
  return result;
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d197      	bne.n	8001614 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 81a1 	beq.w	8001a3c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <HAL_RCC_OscConfig+0x934>)
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d116      	bne.n	800173a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_RCC_OscConfig+0x934>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	4a22      	ldr	r2, [pc, #136]	; (800179c <HAL_RCC_OscConfig+0x934>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	61d3      	str	r3, [r2, #28]
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_RCC_OscConfig+0x934>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001732:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_RCC_OscConfig+0x93c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d11a      	bne.n	800177c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_RCC_OscConfig+0x93c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <HAL_RCC_OscConfig+0x93c>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001752:	f7ff f925 	bl	80009a0 <HAL_GetTick>
 8001756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	e009      	b.n	8001770 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175c:	f7ff f920 	bl	80009a0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e3b1      	b.n	8001ed4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_RCC_OscConfig+0x93c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ef      	beq.n	800175c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10d      	bne.n	80017a8 <HAL_RCC_OscConfig+0x940>
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_RCC_OscConfig+0x934>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a02      	ldr	r2, [pc, #8]	; (800179c <HAL_RCC_OscConfig+0x934>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	e03c      	b.n	8001814 <HAL_RCC_OscConfig+0x9ac>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	10908120 	.word	0x10908120
 80017a4:	40007000 	.word	0x40007000
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10c      	bne.n	80017d2 <HAL_RCC_OscConfig+0x96a>
 80017b8:	4bc1      	ldr	r3, [pc, #772]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4ac0      	ldr	r2, [pc, #768]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	4bbe      	ldr	r3, [pc, #760]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4abd      	ldr	r2, [pc, #756]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017ca:	f023 0304 	bic.w	r3, r3, #4
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	e020      	b.n	8001814 <HAL_RCC_OscConfig+0x9ac>
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x994>
 80017e2:	4bb7      	ldr	r3, [pc, #732]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4ab6      	ldr	r2, [pc, #728]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	4bb4      	ldr	r3, [pc, #720]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4ab3      	ldr	r2, [pc, #716]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0x9ac>
 80017fc:	4bb0      	ldr	r3, [pc, #704]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4aaf      	ldr	r2, [pc, #700]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	4bad      	ldr	r3, [pc, #692]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4aac      	ldr	r2, [pc, #688]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 800180e:	f023 0304 	bic.w	r3, r3, #4
 8001812:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8081 	beq.w	8001928 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff f8bb 	bl	80009a0 <HAL_GetTick>
 800182a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff f8b6 	bl	80009a0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e345      	b.n	8001ed4 <HAL_RCC_OscConfig+0x106c>
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001850:	2202      	movs	r2, #2
 8001852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fa93 f2a3 	rbit	r2, r3
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800188e:	601a      	str	r2, [r3, #0]
  return result;
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001898:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_OscConfig+0xa4c>
 80018ae:	4b84      	ldr	r3, [pc, #528]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	e013      	b.n	80018dc <HAL_RCC_OscConfig+0xa74>
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f2a3 	rbit	r2, r3
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018e4:	2102      	movs	r1, #2
 80018e6:	6011      	str	r1, [r2, #0]
 80018e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	fa92 f1a2 	rbit	r1, r2
 80018f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018fe:	6011      	str	r1, [r2, #0]
  return result;
 8001900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001904:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	fab2 f282 	clz	r2, r2
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	f002 021f 	and.w	r2, r2, #31
 800191a:	2101      	movs	r1, #1
 800191c:	fa01 f202 	lsl.w	r2, r1, r2
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d084      	beq.n	8001830 <HAL_RCC_OscConfig+0x9c8>
 8001926:	e07f      	b.n	8001a28 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff f83a 	bl	80009a0 <HAL_GetTick>
 800192c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	e00b      	b.n	800194a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff f835 	bl	80009a0 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e2c4      	b.n	8001ed4 <HAL_RCC_OscConfig+0x106c>
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001952:	2202      	movs	r2, #2
 8001954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001990:	601a      	str	r2, [r3, #0]
  return result;
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800199a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_OscConfig+0xb4e>
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	e013      	b.n	80019de <HAL_RCC_OscConfig+0xb76>
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019be:	2202      	movs	r2, #2
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019e6:	2102      	movs	r1, #2
 80019e8:	6011      	str	r1, [r2, #0]
 80019ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	fa92 f1a2 	rbit	r1, r2
 80019f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a00:	6011      	str	r1, [r2, #0]
  return result;
 8001a02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a06:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	fab2 f282 	clz	r2, r2
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f002 021f 	and.w	r2, r2, #31
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d184      	bne.n	8001932 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a28:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 8001a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8242 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_RCC_OscConfig+0xc58>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	f000 8213 	beq.w	8001e82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 8162 	bne.w	8001d32 <HAL_RCC_OscConfig+0xeca>
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a92:	601a      	str	r2, [r3, #0]
  return result;
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7fe ff74 	bl	80009a0 <HAL_GetTick>
 8001ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	e00c      	b.n	8001ad8 <HAL_RCC_OscConfig+0xc70>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7fe ff6c 	bl	80009a0 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e1fd      	b.n	8001ed4 <HAL_RCC_OscConfig+0x106c>
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001afc:	601a      	str	r2, [r3, #0]
  return result;
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_OscConfig+0xcba>
 8001b1c:	4bb0      	ldr	r3, [pc, #704]	; (8001de0 <HAL_RCC_OscConfig+0xf78>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	e027      	b.n	8001b72 <HAL_RCC_OscConfig+0xd0a>
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	fa93 f2a3 	rbit	r2, r3
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	4b9c      	ldr	r3, [pc, #624]	; (8001de0 <HAL_RCC_OscConfig+0xf78>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b76:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b7e:	6011      	str	r1, [r2, #0]
 8001b80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b84:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	fa92 f1a2 	rbit	r1, r2
 8001b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b92:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b96:	6011      	str	r1, [r2, #0]
  return result;
 8001b98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	fab2 f282 	clz	r2, r2
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f042 0220 	orr.w	r2, r2, #32
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	f002 021f 	and.w	r2, r2, #31
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d182      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbe:	4b88      	ldr	r3, [pc, #544]	; (8001de0 <HAL_RCC_OscConfig+0xf78>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	430b      	orrs	r3, r1
 8001be0:	497f      	ldr	r1, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0xf78>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f2a3 	rbit	r2, r3
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c0a:	601a      	str	r2, [r3, #0]
  return result;
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c14:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	461a      	mov	r2, r3
 8001c28:	2301      	movs	r3, #1
 8001c2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7fe feb8 	bl	80009a0 <HAL_GetTick>
 8001c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c34:	e009      	b.n	8001c4a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c36:	f7fe feb3 	bl	80009a0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e144      	b.n	8001ed4 <HAL_RCC_OscConfig+0x106c>
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c6e:	601a      	str	r2, [r3, #0]
  return result;
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_OscConfig+0xe2c>
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <HAL_RCC_OscConfig+0xf78>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e027      	b.n	8001ce4 <HAL_RCC_OscConfig+0xe7c>
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_OscConfig+0xf78>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fa92 f1a2 	rbit	r1, r2
 8001d00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d08:	6011      	str	r1, [r2, #0]
  return result;
 8001d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f042 0220 	orr.w	r2, r2, #32
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f002 021f 	and.w	r2, r2, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d082      	beq.n	8001c36 <HAL_RCC_OscConfig+0xdce>
 8001d30:	e0cf      	b.n	8001ed2 <HAL_RCC_OscConfig+0x106a>
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d56:	601a      	str	r2, [r3, #0]
  return result;
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	461a      	mov	r2, r3
 8001d74:	2300      	movs	r3, #0
 8001d76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe12 	bl	80009a0 <HAL_GetTick>
 8001d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fe0d 	bl	80009a0 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e09e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x106c>
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dba:	601a      	str	r2, [r3, #0]
  return result;
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d104      	bne.n	8001de4 <HAL_RCC_OscConfig+0xf7c>
 8001dda:	4b01      	ldr	r3, [pc, #4]	; (8001de0 <HAL_RCC_OscConfig+0xf78>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	e029      	b.n	8001e34 <HAL_RCC_OscConfig+0xfcc>
 8001de0:	40021000 	.word	0x40021000
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_OscConfig+0x1078>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e40:	6011      	str	r1, [r2, #0]
 8001e42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	fa92 f1a2 	rbit	r1, r2
 8001e50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e58:	6011      	str	r1, [r2, #0]
  return result;
 8001e5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d180      	bne.n	8001d82 <HAL_RCC_OscConfig+0xf1a>
 8001e80:	e027      	b.n	8001ed2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e01e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_OscConfig+0x1078>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ea2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d10b      	bne.n	8001ece <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09e      	sub	sp, #120	; 0x78
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e162      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b90      	ldr	r3, [pc, #576]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b8d      	ldr	r3, [pc, #564]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	498b      	ldr	r1, [pc, #556]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b89      	ldr	r3, [pc, #548]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e14a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b82      	ldr	r3, [pc, #520]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	497f      	ldr	r1, [pc, #508]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80dc 	beq.w	8002110 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d13c      	bne.n	8001fda <HAL_RCC_ClockConfig+0xf6>
 8001f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xa6>
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e00f      	b.n	8001faa <HAL_RCC_ClockConfig+0xc6>
 8001f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	667b      	str	r3, [r7, #100]	; 0x64
 8001f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8001f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fae:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fb2:	fa92 f2a2 	rbit	r2, r2
 8001fb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f042 0220 	orr.w	r2, r2, #32
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f002 021f 	and.w	r2, r2, #31
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d17b      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0f3      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d13c      	bne.n	800205c <HAL_RCC_ClockConfig+0x178>
 8001fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_RCC_ClockConfig+0x128>
 8002006:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e00f      	b.n	800202c <HAL_RCC_ClockConfig+0x148>
 800200c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002010:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	647b      	str	r3, [r7, #68]	; 0x44
 800201a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201e:	643b      	str	r3, [r7, #64]	; 0x40
 8002020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002030:	63ba      	str	r2, [r7, #56]	; 0x38
 8002032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800203a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f002 021f 	and.w	r2, r2, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d13a      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b2      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
 800205c:	2302      	movs	r3, #2
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1a0>
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e00d      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1bc>
 8002084:	2302      	movs	r3, #2
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	2302      	movs	r3, #2
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	2202      	movs	r2, #2
 80020a2:	61ba      	str	r2, [r7, #24]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	fa92 f2a2 	rbit	r2, r2
 80020aa:	617a      	str	r2, [r7, #20]
  return result;
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e079      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	491a      	ldr	r1, [pc, #104]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7fe fc5e 	bl	80009a0 <HAL_GetTick>
 80020e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe fc5a 	bl	80009a0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e061      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d214      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4906      	ldr	r1, [pc, #24]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e040      	b.n	80021c2 <HAL_RCC_ClockConfig+0x2de>
 8002140:	40022000 	.word	0x40022000
 8002144:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	491a      	ldr	r1, [pc, #104]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4912      	ldr	r1, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002186:	f000 f829 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800218a:	4601      	mov	r1, r0
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_RCC_ClockConfig+0x2e8>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002194:	22f0      	movs	r2, #240	; 0xf0
 8002196:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	fa92 f2a2 	rbit	r2, r2
 800219e:	60fa      	str	r2, [r7, #12]
  return result;
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	fab2 f282 	clz	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	40d3      	lsrs	r3, r2
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x2ec>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	fa21 f303 	lsr.w	r3, r1, r3
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCC_ClockConfig+0x2f0>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCC_ClockConfig+0x2f4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fbac 	bl	8000918 <HAL_InitTick>
  
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3778      	adds	r7, #120	; 0x78
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	080069c8 	.word	0x080069c8
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b08b      	sub	sp, #44	; 0x2c
 80021e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x30>
 8002206:	2b08      	cmp	r3, #8
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x36>
 800220a:	e03c      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800220e:	623b      	str	r3, [r7, #32]
      break;
 8002210:	e03c      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002218:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800221c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	607a      	str	r2, [r7, #4]
  return result;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	40d3      	lsrs	r3, r2
 8002230:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	220f      	movs	r2, #15
 8002240:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	60fa      	str	r2, [r7, #12]
  return result;
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	fab2 f282 	clz	r2, r2
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	40d3      	lsrs	r3, r2
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002264:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	fbb2 f2f3 	udiv	r2, r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e004      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	623b      	str	r3, [r7, #32]
      break;
 8002284:	e002      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002288:	623b      	str	r3, [r7, #32]
      break;
 800228a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228c:	6a3b      	ldr	r3, [r7, #32]
}
 800228e:	4618      	mov	r0, r3
 8002290:	372c      	adds	r7, #44	; 0x2c
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	007a1200 	.word	0x007a1200
 80022a4:	080069e0 	.word	0x080069e0
 80022a8:	080069f0 	.word	0x080069f0
 80022ac:	003d0900 	.word	0x003d0900

080022b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022ce:	f7ff ffef 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022d2:	4601      	mov	r1, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	fa92 f2a2 	rbit	r2, r2
 80022e8:	603a      	str	r2, [r7, #0]
  return result;
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	fab2 f282 	clz	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	40d3      	lsrs	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	080069d8 	.word	0x080069d8

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002312:	f7ff ffcd 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 8002316:	4601      	mov	r1, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002320:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002324:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	fa92 f2a2 	rbit	r2, r2
 800232c:	603a      	str	r2, [r7, #0]
  return result;
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	fab2 f282 	clz	r2, r2
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	40d3      	lsrs	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_RCC_GetPCLK2Freq+0x40>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	080069d8 	.word	0x080069d8

08002350 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b092      	sub	sp, #72	; 0x48
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80cd 	beq.w	800250e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002374:	4b86      	ldr	r3, [pc, #536]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10e      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	4b83      	ldr	r3, [pc, #524]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a82      	ldr	r2, [pc, #520]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238a:	61d3      	str	r3, [r2, #28]
 800238c:	4b80      	ldr	r3, [pc, #512]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b7d      	ldr	r3, [pc, #500]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b7a      	ldr	r3, [pc, #488]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a79      	ldr	r2, [pc, #484]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe faf3 	bl	80009a0 <HAL_GetTick>
 80023ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe faef 	bl	80009a0 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0db      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023dc:	4b6c      	ldr	r3, [pc, #432]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d07d      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d076      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	461a      	mov	r2, r3
 8002424:	2301      	movs	r3, #1
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	4b55      	ldr	r3, [pc, #340]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	461a      	mov	r2, r3
 8002448:	2300      	movs	r3, #0
 800244a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800244c:	4a50      	ldr	r2, [pc, #320]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800244e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002450:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d045      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe faa0 	bl	80009a0 <HAL_GetTick>
 8002460:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fa9c 	bl	80009a0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e086      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800247a:	2302      	movs	r3, #2
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	2302      	movs	r3, #2
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	61fb      	str	r3, [r7, #28]
  return result;
 8002492:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d102      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	e007      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80024ae:	2302      	movs	r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2202      	movs	r2, #2
 80024c0:	613a      	str	r2, [r7, #16]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	fa92 f2a2 	rbit	r2, r2
 80024c8:	60fa      	str	r2, [r7, #12]
  return result;
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	fab2 f282 	clz	r2, r2
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f002 021f 	and.w	r2, r2, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f202 	lsl.w	r2, r1, r2
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0bd      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024e8:	4b29      	ldr	r3, [pc, #164]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4926      	ldr	r1, [pc, #152]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	491a      	ldr	r1, [pc, #104]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002528:	4313      	orrs	r3, r2
 800252a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002538:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	f023 0210 	bic.w	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4912      	ldr	r1, [pc, #72]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002546:	4313      	orrs	r3, r2
 8002548:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	490b      	ldr	r1, [pc, #44]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002564:	4313      	orrs	r3, r2
 8002566:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	4903      	ldr	r1, [pc, #12]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002582:	4313      	orrs	r3, r2
 8002584:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3748      	adds	r7, #72	; 0x48
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
 8002598:	10908100 	.word	0x10908100

0800259c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e095      	b.n	80026da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025be:	d009      	beq.n	80025d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
 80025c6:	e005      	b.n	80025d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe f802 	bl	80005f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002614:	d902      	bls.n	800261c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	e002      	b.n	8002622 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002620:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800262a:	d007      	beq.n	800263c <HAL_SPI_Init+0xa0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002634:	d002      	beq.n	800263c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	ea42 0103 	orr.w	r1, r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	0c1b      	lsrs	r3, r3, #16
 8002698:	f003 0204 	and.w	r2, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026b8:	ea42 0103 	orr.w	r1, r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e049      	b.n	8002788 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fd ffd5 	bl	80006b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f000 fa75 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e049      	b.n	8002836 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f841 	bl	800283e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 fa1e 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800286e:	2302      	movs	r3, #2
 8002870:	e0ff      	b.n	8002a72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b14      	cmp	r3, #20
 800287e:	f200 80f0 	bhi.w	8002a62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	080028dd 	.word	0x080028dd
 800288c:	08002a63 	.word	0x08002a63
 8002890:	08002a63 	.word	0x08002a63
 8002894:	08002a63 	.word	0x08002a63
 8002898:	0800291d 	.word	0x0800291d
 800289c:	08002a63 	.word	0x08002a63
 80028a0:	08002a63 	.word	0x08002a63
 80028a4:	08002a63 	.word	0x08002a63
 80028a8:	0800295f 	.word	0x0800295f
 80028ac:	08002a63 	.word	0x08002a63
 80028b0:	08002a63 	.word	0x08002a63
 80028b4:	08002a63 	.word	0x08002a63
 80028b8:	0800299f 	.word	0x0800299f
 80028bc:	08002a63 	.word	0x08002a63
 80028c0:	08002a63 	.word	0x08002a63
 80028c4:	08002a63 	.word	0x08002a63
 80028c8:	080029e1 	.word	0x080029e1
 80028cc:	08002a63 	.word	0x08002a63
 80028d0:	08002a63 	.word	0x08002a63
 80028d4:	08002a63 	.word	0x08002a63
 80028d8:	08002a21 	.word	0x08002a21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fa0c 	bl	8002d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0208 	orr.w	r2, r2, #8
 80028f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6999      	ldr	r1, [r3, #24]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	619a      	str	r2, [r3, #24]
      break;
 800291a:	e0a5      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fa72 	bl	8002e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6999      	ldr	r1, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	021a      	lsls	r2, r3, #8
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	619a      	str	r2, [r3, #24]
      break;
 800295c:	e084      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fad1 	bl	8002f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0208 	orr.w	r2, r2, #8
 8002978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0204 	bic.w	r2, r2, #4
 8002988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69d9      	ldr	r1, [r3, #28]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
      break;
 800299c:	e064      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fb2f 	bl	8003008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69d9      	ldr	r1, [r3, #28]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	61da      	str	r2, [r3, #28]
      break;
 80029de:	e043      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fb72 	bl	80030d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0208 	orr.w	r2, r2, #8
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0204 	bic.w	r2, r2, #4
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a1e:	e023      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fbb0 	bl	800318c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	021a      	lsls	r2, r3, #8
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a60:	e002      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
      break;
 8002a66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop

08002a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_TIM_ConfigClockSource+0x1c>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0b6      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x18a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad4:	d03e      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0xd8>
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ada:	f200 8087 	bhi.w	8002bec <HAL_TIM_ConfigClockSource+0x170>
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x176>
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	d87f      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x170>
 8002aec:	2b70      	cmp	r3, #112	; 0x70
 8002aee:	d01a      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0xaa>
 8002af0:	2b70      	cmp	r3, #112	; 0x70
 8002af2:	d87b      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x170>
 8002af4:	2b60      	cmp	r3, #96	; 0x60
 8002af6:	d050      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0x11e>
 8002af8:	2b60      	cmp	r3, #96	; 0x60
 8002afa:	d877      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x170>
 8002afc:	2b50      	cmp	r3, #80	; 0x50
 8002afe:	d03c      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0xfe>
 8002b00:	2b50      	cmp	r3, #80	; 0x50
 8002b02:	d873      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x170>
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d058      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0x13e>
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d86f      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x170>
 8002b0c:	2b30      	cmp	r3, #48	; 0x30
 8002b0e:	d064      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15e>
 8002b10:	2b30      	cmp	r3, #48	; 0x30
 8002b12:	d86b      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x170>
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d060      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15e>
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d867      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x170>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d05c      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15e>
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d05a      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15e>
 8002b24:	e062      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f000 fc03 	bl	8003340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	609a      	str	r2, [r3, #8]
      break;
 8002b52:	e04f      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f000 fbec 	bl	8003340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b76:	609a      	str	r2, [r3, #8]
      break;
 8002b78:	e03c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f000 fb60 	bl	800324c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2150      	movs	r1, #80	; 0x50
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fbb9 	bl	800330a <TIM_ITRx_SetConfig>
      break;
 8002b98:	e02c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f000 fb7f 	bl	80032aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2160      	movs	r1, #96	; 0x60
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fba9 	bl	800330a <TIM_ITRx_SetConfig>
      break;
 8002bb8:	e01c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f000 fb40 	bl	800324c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fb99 	bl	800330a <TIM_ITRx_SetConfig>
      break;
 8002bd8:	e00c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	4610      	mov	r0, r2
 8002be6:	f000 fb90 	bl	800330a <TIM_ITRx_SetConfig>
      break;
 8002bea:	e003      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a32      	ldr	r2, [pc, #200]	; (8002cec <TIM_Base_SetConfig+0xdc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <TIM_Base_SetConfig+0x28>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d003      	beq.n	8002c38 <TIM_Base_SetConfig+0x28>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <TIM_Base_SetConfig+0xe0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d108      	bne.n	8002c4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <TIM_Base_SetConfig+0xdc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0x6a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0x6a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a24      	ldr	r2, [pc, #144]	; (8002cf0 <TIM_Base_SetConfig+0xe0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0x6a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <TIM_Base_SetConfig+0xe4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x6a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <TIM_Base_SetConfig+0xe8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x6a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <TIM_Base_SetConfig+0xec>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <TIM_Base_SetConfig+0xdc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0xc0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <TIM_Base_SetConfig+0xe4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0xc0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <TIM_Base_SetConfig+0xe8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0xc0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <TIM_Base_SetConfig+0xec>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800

08002d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 0201 	bic.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f023 0302 	bic.w	r3, r3, #2
 8002d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <TIM_OC1_SetConfig+0xfc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_OC1_SetConfig+0x78>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <TIM_OC1_SetConfig+0x100>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_OC1_SetConfig+0x78>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <TIM_OC1_SetConfig+0x104>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_OC1_SetConfig+0x78>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <TIM_OC1_SetConfig+0x108>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d10c      	bne.n	8002d92 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 0308 	bic.w	r3, r3, #8
 8002d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <TIM_OC1_SetConfig+0xfc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_OC1_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <TIM_OC1_SetConfig+0x100>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_OC1_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <TIM_OC1_SetConfig+0x104>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_OC1_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <TIM_OC1_SetConfig+0x108>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d111      	bne.n	8002dd6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	621a      	str	r2, [r3, #32]
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800

08002e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0210 	bic.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0320 	bic.w	r3, r3, #32
 8002e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a24      	ldr	r2, [pc, #144]	; (8002efc <TIM_OC2_SetConfig+0xf0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10d      	bne.n	8002e8c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <TIM_OC2_SetConfig+0xf0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00b      	beq.n	8002eac <TIM_OC2_SetConfig+0xa0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <TIM_OC2_SetConfig+0xf4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <TIM_OC2_SetConfig+0xa0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <TIM_OC2_SetConfig+0xf8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_OC2_SetConfig+0xa0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <TIM_OC2_SetConfig+0xfc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d113      	bne.n	8002ed4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	621a      	str	r2, [r3, #32]
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40014400 	.word	0x40014400
 8002f08:	40014800 	.word	0x40014800

08002f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <TIM_OC3_SetConfig+0xec>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <TIM_OC3_SetConfig+0xec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00b      	beq.n	8002faa <TIM_OC3_SetConfig+0x9e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <TIM_OC3_SetConfig+0xf0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <TIM_OC3_SetConfig+0x9e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	; (8003000 <TIM_OC3_SetConfig+0xf4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_OC3_SetConfig+0x9e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a17      	ldr	r2, [pc, #92]	; (8003004 <TIM_OC3_SetConfig+0xf8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d113      	bne.n	8002fd2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800

08003008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	031b      	lsls	r3, r3, #12
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <TIM_OC4_SetConfig+0xb8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00b      	beq.n	8003084 <TIM_OC4_SetConfig+0x7c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <TIM_OC4_SetConfig+0xbc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d007      	beq.n	8003084 <TIM_OC4_SetConfig+0x7c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <TIM_OC4_SetConfig+0xc0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d003      	beq.n	8003084 <TIM_OC4_SetConfig+0x7c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a13      	ldr	r2, [pc, #76]	; (80030cc <TIM_OC4_SetConfig+0xc4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d109      	bne.n	8003098 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800308a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800

080030d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003114:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a15      	ldr	r2, [pc, #84]	; (800317c <TIM_OC5_SetConfig+0xac>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_OC5_SetConfig+0x72>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <TIM_OC5_SetConfig+0xb0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <TIM_OC5_SetConfig+0x72>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <TIM_OC5_SetConfig+0xb4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_OC5_SetConfig+0x72>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a12      	ldr	r2, [pc, #72]	; (8003188 <TIM_OC5_SetConfig+0xb8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d109      	bne.n	8003156 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800

0800318c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	051b      	lsls	r3, r3, #20
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a16      	ldr	r2, [pc, #88]	; (800323c <TIM_OC6_SetConfig+0xb0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00b      	beq.n	8003200 <TIM_OC6_SetConfig+0x74>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a15      	ldr	r2, [pc, #84]	; (8003240 <TIM_OC6_SetConfig+0xb4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <TIM_OC6_SetConfig+0x74>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <TIM_OC6_SetConfig+0xb8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <TIM_OC6_SetConfig+0x74>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <TIM_OC6_SetConfig+0xbc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d109      	bne.n	8003214 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003206:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	029b      	lsls	r3, r3, #10
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	621a      	str	r2, [r3, #32]
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40014000 	.word	0x40014000
 8003244:	40014400 	.word	0x40014400
 8003248:	40014800 	.word	0x40014800

0800324c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0201 	bic.w	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f023 030a 	bic.w	r3, r3, #10
 8003288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	621a      	str	r2, [r3, #32]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b087      	sub	sp, #28
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0210 	bic.w	r2, r3, #16
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	031b      	lsls	r3, r3, #12
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	f043 0307 	orr.w	r3, r3, #7
 800332c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	609a      	str	r2, [r3, #8]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800335a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	021a      	lsls	r2, r3, #8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	431a      	orrs	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003394:	2302      	movs	r3, #2
 8003396:	e054      	b.n	8003442 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a24      	ldr	r2, [pc, #144]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d108      	bne.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d009      	beq.n	8003416 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a13      	ldr	r2, [pc, #76]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10c      	bne.n	8003430 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4313      	orrs	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40000400 	.word	0x40000400
 8003458:	40014000 	.word	0x40014000

0800345c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003474:	2302      	movs	r3, #2
 8003476:	e060      	b.n	800353a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d115      	bne.n	8003528 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	051b      	lsls	r3, r3, #20
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00

0800354c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e040      	b.n	80035e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd f918 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	; 0x24
 8003578:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f82c 	bl	80035e8 <UART_SetConfig>
 8003590:	4603      	mov	r3, r0
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e022      	b.n	80035e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f956 	bl	8003854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f9dd 	bl	8003998 <UART_CheckIdleState>
 80035de:	4603      	mov	r3, r0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b8a      	ldr	r3, [pc, #552]	; (800383c <UART_SetConfig+0x254>)
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	430b      	orrs	r3, r1
 800361e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a78      	ldr	r2, [pc, #480]	; (8003840 <UART_SetConfig+0x258>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d120      	bne.n	80036a6 <UART_SetConfig+0xbe>
 8003664:	4b77      	ldr	r3, [pc, #476]	; (8003844 <UART_SetConfig+0x25c>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b03      	cmp	r3, #3
 800366e:	d817      	bhi.n	80036a0 <UART_SetConfig+0xb8>
 8003670:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <UART_SetConfig+0x90>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	08003689 	.word	0x08003689
 800367c:	08003695 	.word	0x08003695
 8003680:	0800369b 	.word	0x0800369b
 8003684:	0800368f 	.word	0x0800368f
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e01d      	b.n	80036ca <UART_SetConfig+0xe2>
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e01a      	b.n	80036ca <UART_SetConfig+0xe2>
 8003694:	2304      	movs	r3, #4
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e017      	b.n	80036ca <UART_SetConfig+0xe2>
 800369a:	2308      	movs	r3, #8
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e014      	b.n	80036ca <UART_SetConfig+0xe2>
 80036a0:	2310      	movs	r3, #16
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e011      	b.n	80036ca <UART_SetConfig+0xe2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a67      	ldr	r2, [pc, #412]	; (8003848 <UART_SetConfig+0x260>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <UART_SetConfig+0xce>
 80036b0:	2300      	movs	r3, #0
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e009      	b.n	80036ca <UART_SetConfig+0xe2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a64      	ldr	r2, [pc, #400]	; (800384c <UART_SetConfig+0x264>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d102      	bne.n	80036c6 <UART_SetConfig+0xde>
 80036c0:	2300      	movs	r3, #0
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e001      	b.n	80036ca <UART_SetConfig+0xe2>
 80036c6:	2310      	movs	r3, #16
 80036c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d2:	d15a      	bne.n	800378a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80036d4:	7ffb      	ldrb	r3, [r7, #31]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d827      	bhi.n	800372a <UART_SetConfig+0x142>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0xf8>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	08003705 	.word	0x08003705
 80036e4:	0800370d 	.word	0x0800370d
 80036e8:	08003715 	.word	0x08003715
 80036ec:	0800372b 	.word	0x0800372b
 80036f0:	0800371b 	.word	0x0800371b
 80036f4:	0800372b 	.word	0x0800372b
 80036f8:	0800372b 	.word	0x0800372b
 80036fc:	0800372b 	.word	0x0800372b
 8003700:	08003723 	.word	0x08003723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003704:	f7fe fde0 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8003708:	61b8      	str	r0, [r7, #24]
        break;
 800370a:	e013      	b.n	8003734 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800370c:	f7fe fdfe 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8003710:	61b8      	str	r0, [r7, #24]
        break;
 8003712:	e00f      	b.n	8003734 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003714:	4b4e      	ldr	r3, [pc, #312]	; (8003850 <UART_SetConfig+0x268>)
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e00c      	b.n	8003734 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371a:	f7fe fd5f 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800371e:	61b8      	str	r0, [r7, #24]
        break;
 8003720:	e008      	b.n	8003734 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003726:	61bb      	str	r3, [r7, #24]
        break;
 8003728:	e004      	b.n	8003734 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	77bb      	strb	r3, [r7, #30]
        break;
 8003732:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d074      	beq.n	8003824 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	005a      	lsls	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d916      	bls.n	8003784 <UART_SetConfig+0x19c>
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375c:	d212      	bcs.n	8003784 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f023 030f 	bic.w	r3, r3, #15
 8003766:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	b29b      	uxth	r3, r3
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	b29a      	uxth	r2, r3
 8003774:	89fb      	ldrh	r3, [r7, #14]
 8003776:	4313      	orrs	r3, r2
 8003778:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	89fa      	ldrh	r2, [r7, #14]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	e04f      	b.n	8003824 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	77bb      	strb	r3, [r7, #30]
 8003788:	e04c      	b.n	8003824 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d828      	bhi.n	80037e2 <UART_SetConfig+0x1fa>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0x1b0>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037bd 	.word	0x080037bd
 800379c:	080037c5 	.word	0x080037c5
 80037a0:	080037cd 	.word	0x080037cd
 80037a4:	080037e3 	.word	0x080037e3
 80037a8:	080037d3 	.word	0x080037d3
 80037ac:	080037e3 	.word	0x080037e3
 80037b0:	080037e3 	.word	0x080037e3
 80037b4:	080037e3 	.word	0x080037e3
 80037b8:	080037db 	.word	0x080037db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037bc:	f7fe fd84 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80037c0:	61b8      	str	r0, [r7, #24]
        break;
 80037c2:	e013      	b.n	80037ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c4:	f7fe fda2 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 80037c8:	61b8      	str	r0, [r7, #24]
        break;
 80037ca:	e00f      	b.n	80037ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037cc:	4b20      	ldr	r3, [pc, #128]	; (8003850 <UART_SetConfig+0x268>)
 80037ce:	61bb      	str	r3, [r7, #24]
        break;
 80037d0:	e00c      	b.n	80037ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037d2:	f7fe fd03 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 80037d6:	61b8      	str	r0, [r7, #24]
        break;
 80037d8:	e008      	b.n	80037ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037de:	61bb      	str	r3, [r7, #24]
        break;
 80037e0:	e004      	b.n	80037ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	77bb      	strb	r3, [r7, #30]
        break;
 80037ea:	bf00      	nop
    }

    if (pclk != 0U)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d018      	beq.n	8003824 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085a      	lsrs	r2, r3, #1
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	d909      	bls.n	8003820 <UART_SetConfig+0x238>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003812:	d205      	bcs.n	8003820 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	e001      	b.n	8003824 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003830:	7fbb      	ldrb	r3, [r7, #30]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	efff69f3 	.word	0xefff69f3
 8003840:	40013800 	.word	0x40013800
 8003844:	40021000 	.word	0x40021000
 8003848:	40004400 	.word	0x40004400
 800384c:	40004800 	.word	0x40004800
 8003850:	007a1200 	.word	0x007a1200

08003854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01a      	beq.n	800396a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003952:	d10a      	bne.n	800396a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b098      	sub	sp, #96	; 0x60
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a8:	f7fc fffa 	bl	80009a0 <HAL_GetTick>
 80039ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d12e      	bne.n	8003a1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f88c 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d021      	beq.n	8003a1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ea:	653b      	str	r3, [r7, #80]	; 0x50
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f4:	647b      	str	r3, [r7, #68]	; 0x44
 80039f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e6      	bne.n	80039d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e062      	b.n	8003ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d149      	bne.n	8003abc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f856 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03c      	beq.n	8003abc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
 8003a62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e6      	bne.n	8003a42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a94:	61fa      	str	r2, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e5      	bne.n	8003a74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e011      	b.n	8003ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3758      	adds	r7, #88	; 0x58
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	e049      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b00:	d045      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fc ff4d 	bl	80009a0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e048      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d031      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d110      	bne.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f838 	bl	8003bb6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e029      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b68:	d111      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f81e 	bl	8003bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e00f      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d0a6      	beq.n	8003afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b095      	sub	sp, #84	; 0x54
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e6      	bne.n	8003bbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d118      	bne.n	8003c5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	647b      	str	r3, [r7, #68]	; 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6979      	ldr	r1, [r7, #20]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	613b      	str	r3, [r7, #16]
   return(result);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e6      	bne.n	8003c2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c72:	bf00      	nop
 8003c74:	3754      	adds	r7, #84	; 0x54
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c86:	f3ef 8305 	mrs	r3, IPSR
 8003c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c92:	f3ef 8310 	mrs	r3, PRIMASK
 8003c96:	607b      	str	r3, [r7, #4]
  return(result);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <osKernelInitialize+0x32>
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <osKernelInitialize+0x64>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d109      	bne.n	8003cba <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8003caa:	603b      	str	r3, [r7, #0]
  return(result);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003cb2:	f06f 0305 	mvn.w	r3, #5
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e00c      	b.n	8003cd4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <osKernelInitialize+0x64>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <osKernelInitialize+0x64>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e002      	b.n	8003cd4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	200001d0 	.word	0x200001d0

08003ce8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cee:	f3ef 8305 	mrs	r3, IPSR
 8003cf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfe:	607b      	str	r3, [r7, #4]
  return(result);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <osKernelStart+0x32>
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <osKernelStart+0x64>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d109      	bne.n	8003d22 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d12:	603b      	str	r3, [r7, #0]
  return(result);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d1a:	f06f 0305 	mvn.w	r3, #5
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e00e      	b.n	8003d40 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <osKernelStart+0x64>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <osKernelStart+0x64>)
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003d30:	f001 f898 	bl	8004e64 <vTaskStartScheduler>
      stat = osOK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e002      	b.n	8003d40 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d40:	68fb      	ldr	r3, [r7, #12]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200001d0 	.word	0x200001d0

08003d50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b092      	sub	sp, #72	; 0x48
 8003d54:	af04      	add	r7, sp, #16
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d60:	f3ef 8305 	mrs	r3, IPSR
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 8094 	bne.w	8003e96 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d72:	623b      	str	r3, [r7, #32]
  return(result);
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 808d 	bne.w	8003e96 <osThreadNew+0x146>
 8003d7c:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <osThreadNew+0x150>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d106      	bne.n	8003d92 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d84:	f3ef 8311 	mrs	r3, BASEPRI
 8003d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f040 8082 	bne.w	8003e96 <osThreadNew+0x146>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d07e      	beq.n	8003e96 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003d98:	2340      	movs	r3, #64	; 0x40
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003d9c:	2318      	movs	r3, #24
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003da0:	2300      	movs	r3, #0
 8003da2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003da4:	f107 031b 	add.w	r3, r7, #27
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d045      	beq.n	8003e42 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <osThreadNew+0x74>
        name = attr->name;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <osThreadNew+0x9a>
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	2b38      	cmp	r3, #56	; 0x38
 8003ddc:	d805      	bhi.n	8003dea <osThreadNew+0x9a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <osThreadNew+0x9e>
        return (NULL);
 8003dea:	2300      	movs	r3, #0
 8003dec:	e054      	b.n	8003e98 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <osThreadNew+0xd4>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2bbb      	cmp	r3, #187	; 0xbb
 8003e0c:	d90a      	bls.n	8003e24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d006      	beq.n	8003e24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <osThreadNew+0xd4>
        mem = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e22:	e010      	b.n	8003e46 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10c      	bne.n	8003e46 <osThreadNew+0xf6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d108      	bne.n	8003e46 <osThreadNew+0xf6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <osThreadNew+0xf6>
          mem = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e40:	e001      	b.n	8003e46 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d110      	bne.n	8003e6e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e54:	9202      	str	r2, [sp, #8]
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fe1a 	bl	8004a9c <xTaskCreateStatic>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e013      	b.n	8003e96 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d110      	bne.n	8003e96 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fe64 	bl	8004b54 <xTaskCreate>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <osThreadNew+0x146>
          hTask = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e96:	697b      	ldr	r3, [r7, #20]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3738      	adds	r7, #56	; 0x38
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	200001d0 	.word	0x200001d0

08003ea4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eac:	f3ef 8305 	mrs	r3, IPSR
 8003eb0:	613b      	str	r3, [r7, #16]
  return(result);
 8003eb2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10f      	bne.n	8003ed8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <osDelay+0x34>
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <osDelay+0x58>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d109      	bne.n	8003ee0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ed0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <osDelay+0x3c>
    stat = osErrorISR;
 8003ed8:	f06f 0305 	mvn.w	r3, #5
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e007      	b.n	8003ef0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 ff86 	bl	8004dfc <vTaskDelay>
    }
  }

  return (stat);
 8003ef0:	697b      	ldr	r3, [r7, #20]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200001d0 	.word	0x200001d0

08003f00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a07      	ldr	r2, [pc, #28]	; (8003f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8003f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4a06      	ldr	r2, [pc, #24]	; (8003f30 <vApplicationGetIdleTaskMemory+0x30>)
 8003f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2240      	movs	r2, #64	; 0x40
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	200001d4 	.word	0x200001d4
 8003f30:	20000290 	.word	0x20000290

08003f34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <vApplicationGetTimerTaskMemory+0x30>)
 8003f4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	601a      	str	r2, [r3, #0]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000390 	.word	0x20000390
 8003f64:	2000044c 	.word	0x2000044c

08003f68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f103 0208 	add.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f103 0208 	add.w	r2, r3, #8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f103 0208 	add.w	r2, r3, #8
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004020:	d103      	bne.n	800402a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e00c      	b.n	8004044 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3308      	adds	r3, #8
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e002      	b.n	8004038 <vListInsert+0x2e>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	429a      	cmp	r2, r3
 8004042:	d2f6      	bcs.n	8004032 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6892      	ldr	r2, [r2, #8]
 8004092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6852      	ldr	r2, [r2, #4]
 800409c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d103      	bne.n	80040b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	1e5a      	subs	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040fa:	f002 f83b 	bl	8006174 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	441a      	add	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	3b01      	subs	r3, #1
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	441a      	add	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	22ff      	movs	r2, #255	; 0xff
 8004146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d114      	bne.n	800417a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01a      	beq.n	800418e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3310      	adds	r3, #16
 800415c:	4618      	mov	r0, r3
 800415e:	f001 f91f 	bl	80053a0 <xTaskRemoveFromEventList>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <xQueueGenericReset+0xcc>)
 800416a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	e009      	b.n	800418e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3310      	adds	r3, #16
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fef2 	bl	8003f68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3324      	adds	r3, #36	; 0x24
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff feed 	bl	8003f68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800418e:	f002 f821 	bl	80061d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004192:	2301      	movs	r3, #1
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <xQueueGenericCreateStatic+0x52>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <xQueueGenericCreateStatic+0x56>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <xQueueGenericCreateStatic+0x58>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	623b      	str	r3, [r7, #32]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <xQueueGenericCreateStatic+0x7e>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <xQueueGenericCreateStatic+0x82>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <xQueueGenericCreateStatic+0x84>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	61fb      	str	r3, [r7, #28]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800423e:	2350      	movs	r3, #80	; 0x50
 8004240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b50      	cmp	r3, #80	; 0x50
 8004246:	d00a      	beq.n	800425e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61bb      	str	r3, [r7, #24]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00d      	beq.n	8004284 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004270:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f805 	bl	800428e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004286:	4618      	mov	r0, r3
 8004288:	3730      	adds	r7, #48	; 0x30
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e002      	b.n	80042b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042bc:	2101      	movs	r1, #1
 80042be:	69b8      	ldr	r0, [r7, #24]
 80042c0:	f7ff ff06 	bl	80040d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08e      	sub	sp, #56	; 0x38
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042e2:	2300      	movs	r3, #0
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <xQueueGenericSend+0x32>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <xQueueGenericSend+0x40>
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <xQueueGenericSend+0x44>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <xQueueGenericSend+0x46>
 8004318:	2300      	movs	r3, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <xQueueGenericSend+0x60>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d103      	bne.n	8004342 <xQueueGenericSend+0x6e>
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <xQueueGenericSend+0x72>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <xQueueGenericSend+0x74>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xQueueGenericSend+0x8e>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	623b      	str	r3, [r7, #32]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004362:	f001 f9e5 	bl	8005730 <xTaskGetSchedulerState>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <xQueueGenericSend+0x9e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <xQueueGenericSend+0xa2>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <xQueueGenericSend+0xa4>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <xQueueGenericSend+0xbe>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	61fb      	str	r3, [r7, #28]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004392:	f001 feef 	bl	8006174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <xQueueGenericSend+0xd4>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d129      	bne.n	80043fc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ae:	f000 fa07 	bl	80047c0 <prvCopyDataToQueue>
 80043b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	3324      	adds	r3, #36	; 0x24
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 ffed 	bl	80053a0 <xTaskRemoveFromEventList>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043cc:	4b3f      	ldr	r3, [pc, #252]	; (80044cc <xQueueGenericSend+0x1f8>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	e00a      	b.n	80043f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <xQueueGenericSend+0x1f8>)
 80043e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043f4:	f001 feee 	bl	80061d4 <vPortExitCritical>
				return pdPASS;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e063      	b.n	80044c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d103      	bne.n	800440a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004402:	f001 fee7 	bl	80061d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004406:	2300      	movs	r3, #0
 8004408:	e05c      	b.n	80044c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	4618      	mov	r0, r3
 8004416:	f001 f827 	bl	8005468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800441a:	2301      	movs	r3, #1
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800441e:	f001 fed9 	bl	80061d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004422:	f000 fd8f 	bl	8004f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004426:	f001 fea5 	bl	8006174 <vPortEnterCritical>
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004430:	b25b      	sxtb	r3, r3
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004436:	d103      	bne.n	8004440 <xQueueGenericSend+0x16c>
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004446:	b25b      	sxtb	r3, r3
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800444c:	d103      	bne.n	8004456 <xQueueGenericSend+0x182>
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004456:	f001 febd 	bl	80061d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800445a:	1d3a      	adds	r2, r7, #4
 800445c:	f107 0314 	add.w	r3, r7, #20
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f001 f816 	bl	8005494 <xTaskCheckForTimeOut>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d124      	bne.n	80044b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800446e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004470:	f000 fa9e 	bl	80049b0 <prvIsQueueFull>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d018      	beq.n	80044ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	3310      	adds	r3, #16
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f000 ff3c 	bl	8005300 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800448a:	f000 fa29 	bl	80048e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800448e:	f000 fd67 	bl	8004f60 <xTaskResumeAll>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	f47f af7c 	bne.w	8004392 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <xQueueGenericSend+0x1f8>)
 800449c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	e772      	b.n	8004392 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ae:	f000 fa17 	bl	80048e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044b2:	f000 fd55 	bl	8004f60 <xTaskResumeAll>
 80044b6:	e76c      	b.n	8004392 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ba:	f000 fa11 	bl	80048e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044be:	f000 fd4f 	bl	8004f60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044c2:	2300      	movs	r3, #0
		}
	}
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3738      	adds	r7, #56	; 0x38
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d103      	bne.n	800450c <xQueueGenericSendFromISR+0x3c>
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <xQueueGenericSendFromISR+0x40>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <xQueueGenericSendFromISR+0x42>
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	623b      	str	r3, [r7, #32]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d103      	bne.n	800453a <xQueueGenericSendFromISR+0x6a>
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <xQueueGenericSendFromISR+0x6e>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <xQueueGenericSendFromISR+0x70>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	61fb      	str	r3, [r7, #28]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800455a:	f001 feed 	bl	8006338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800455e:	f3ef 8211 	mrs	r2, BASEPRI
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	61ba      	str	r2, [r7, #24]
 8004574:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004576:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	429a      	cmp	r2, r3
 8004584:	d302      	bcc.n	800458c <xQueueGenericSendFromISR+0xbc>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d12c      	bne.n	80045e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800459c:	f000 f910 	bl	80047c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a8:	d112      	bne.n	80045d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	3324      	adds	r3, #36	; 0x24
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fef2 	bl	80053a0 <xTaskRemoveFromEventList>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00e      	beq.n	80045e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00b      	beq.n	80045e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e007      	b.n	80045e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045d4:	3301      	adds	r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	b25a      	sxtb	r2, r3
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045e0:	2301      	movs	r3, #1
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80045e4:	e001      	b.n	80045ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3738      	adds	r7, #56	; 0x38
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	; 0x30
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <xQueueReceive+0x30>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	623b      	str	r3, [r7, #32]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <xQueueReceive+0x3e>
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <xQueueReceive+0x42>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <xQueueReceive+0x44>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xQueueReceive+0x5e>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	61fb      	str	r3, [r7, #28]
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800465e:	f001 f867 	bl	8005730 <xTaskGetSchedulerState>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <xQueueReceive+0x6e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <xQueueReceive+0x72>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <xQueueReceive+0x74>
 8004672:	2300      	movs	r3, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xQueueReceive+0x8e>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	61bb      	str	r3, [r7, #24]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800468e:	f001 fd71 	bl	8006174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01f      	beq.n	80046de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a2:	f000 f8f7 	bl	8004894 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	1e5a      	subs	r2, r3, #1
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00f      	beq.n	80046d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	3310      	adds	r3, #16
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fe70 	bl	80053a0 <xTaskRemoveFromEventList>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046c6:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <xQueueReceive+0x1bc>)
 80046c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046d6:	f001 fd7d 	bl	80061d4 <vPortExitCritical>
				return pdPASS;
 80046da:	2301      	movs	r3, #1
 80046dc:	e069      	b.n	80047b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046e4:	f001 fd76 	bl	80061d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e062      	b.n	80047b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046f2:	f107 0310 	add.w	r3, r7, #16
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 feb6 	bl	8005468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004700:	f001 fd68 	bl	80061d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004704:	f000 fc1e 	bl	8004f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004708:	f001 fd34 	bl	8006174 <vPortEnterCritical>
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004712:	b25b      	sxtb	r3, r3
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004718:	d103      	bne.n	8004722 <xQueueReceive+0x122>
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004728:	b25b      	sxtb	r3, r3
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472e:	d103      	bne.n	8004738 <xQueueReceive+0x138>
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004738:	f001 fd4c 	bl	80061d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800473c:	1d3a      	adds	r2, r7, #4
 800473e:	f107 0310 	add.w	r3, r7, #16
 8004742:	4611      	mov	r1, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fea5 	bl	8005494 <xTaskCheckForTimeOut>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d123      	bne.n	8004798 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004752:	f000 f917 	bl	8004984 <prvIsQueueEmpty>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d017      	beq.n	800478c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	3324      	adds	r3, #36	; 0x24
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	4611      	mov	r1, r2
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fdcb 	bl	8005300 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800476a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800476c:	f000 f8b8 	bl	80048e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004770:	f000 fbf6 	bl	8004f60 <xTaskResumeAll>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d189      	bne.n	800468e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <xQueueReceive+0x1bc>)
 800477c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	e780      	b.n	800468e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800478c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478e:	f000 f8a7 	bl	80048e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004792:	f000 fbe5 	bl	8004f60 <xTaskResumeAll>
 8004796:	e77a      	b.n	800468e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800479a:	f000 f8a1 	bl	80048e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800479e:	f000 fbdf 	bl	8004f60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a4:	f000 f8ee 	bl	8004984 <prvIsQueueEmpty>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f43f af6f 	beq.w	800468e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3730      	adds	r7, #48	; 0x30
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10d      	bne.n	80047fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d14d      	bne.n	8004882 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 ffbe 	bl	800576c <xTaskPriorityDisinherit>
 80047f0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	e043      	b.n	8004882 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d119      	bne.n	8004834 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6898      	ldr	r0, [r3, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	461a      	mov	r2, r3
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	f001 ffd4 	bl	80067b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	441a      	add	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	429a      	cmp	r2, r3
 8004828:	d32b      	bcc.n	8004882 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	609a      	str	r2, [r3, #8]
 8004832:	e026      	b.n	8004882 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68d8      	ldr	r0, [r3, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	461a      	mov	r2, r3
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	f001 ffba 	bl	80067b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	425b      	negs	r3, r3
 800484e:	441a      	add	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d207      	bcs.n	8004870 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	425b      	negs	r3, r3
 800486a:	441a      	add	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d105      	bne.n	8004882 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	3b01      	subs	r3, #1
 8004880:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800488a:	697b      	ldr	r3, [r7, #20]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d018      	beq.n	80048d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	441a      	add	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d303      	bcc.n	80048c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68d9      	ldr	r1, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	461a      	mov	r2, r3
 80048d2:	6838      	ldr	r0, [r7, #0]
 80048d4:	f001 ff70 	bl	80067b8 <memcpy>
	}
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048e8:	f001 fc44 	bl	8006174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048f4:	e011      	b.n	800491a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d012      	beq.n	8004924 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3324      	adds	r3, #36	; 0x24
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fd4c 	bl	80053a0 <xTaskRemoveFromEventList>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800490e:	f000 fe23 	bl	8005558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	3b01      	subs	r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800491a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	dce9      	bgt.n	80048f6 <prvUnlockQueue+0x16>
 8004922:	e000      	b.n	8004926 <prvUnlockQueue+0x46>
					break;
 8004924:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	22ff      	movs	r2, #255	; 0xff
 800492a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800492e:	f001 fc51 	bl	80061d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004932:	f001 fc1f 	bl	8006174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800493c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800493e:	e011      	b.n	8004964 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d012      	beq.n	800496e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3310      	adds	r3, #16
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fd27 	bl	80053a0 <xTaskRemoveFromEventList>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004958:	f000 fdfe 	bl	8005558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800495c:	7bbb      	ldrb	r3, [r7, #14]
 800495e:	3b01      	subs	r3, #1
 8004960:	b2db      	uxtb	r3, r3
 8004962:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004968:	2b00      	cmp	r3, #0
 800496a:	dce9      	bgt.n	8004940 <prvUnlockQueue+0x60>
 800496c:	e000      	b.n	8004970 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800496e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	22ff      	movs	r2, #255	; 0xff
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004978:	f001 fc2c 	bl	80061d4 <vPortExitCritical>
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800498c:	f001 fbf2 	bl	8006174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e001      	b.n	80049a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049a2:	f001 fc17 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 80049a6:	68fb      	ldr	r3, [r7, #12]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049b8:	f001 fbdc 	bl	8006174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d102      	bne.n	80049ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049c8:	2301      	movs	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e001      	b.n	80049d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049d2:	f001 fbff 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 80049d6:	68fb      	ldr	r3, [r7, #12]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e014      	b.n	8004a1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049f0:	4a0f      	ldr	r2, [pc, #60]	; (8004a30 <vQueueAddToRegistry+0x50>)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049fc:	490c      	ldr	r1, [pc, #48]	; (8004a30 <vQueueAddToRegistry+0x50>)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <vQueueAddToRegistry+0x50>)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a12:	e006      	b.n	8004a22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	d9e7      	bls.n	80049f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	2000064c 	.word	0x2000064c

08004a34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a44:	f001 fb96 	bl	8006174 <vPortEnterCritical>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a4e:	b25b      	sxtb	r3, r3
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a54:	d103      	bne.n	8004a5e <vQueueWaitForMessageRestricted+0x2a>
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a64:	b25b      	sxtb	r3, r3
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a6a:	d103      	bne.n	8004a74 <vQueueWaitForMessageRestricted+0x40>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a74:	f001 fbae 	bl	80061d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3324      	adds	r3, #36	; 0x24
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fc5d 	bl	8005348 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f7ff ff26 	bl	80048e0 <prvUnlockQueue>
	}
 8004a94:	bf00      	nop
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08e      	sub	sp, #56	; 0x38
 8004aa0:	af04      	add	r7, sp, #16
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	623b      	str	r3, [r7, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	61fb      	str	r3, [r7, #28]
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ae2:	23bc      	movs	r3, #188	; 0xbc
 8004ae4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2bbc      	cmp	r3, #188	; 0xbc
 8004aea:	d00a      	beq.n	8004b02 <xTaskCreateStatic+0x66>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	61bb      	str	r3, [r7, #24]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01e      	beq.n	8004b46 <xTaskCreateStatic+0xaa>
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01b      	beq.n	8004b46 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b20:	2300      	movs	r3, #0
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f851 	bl	8004be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b40:	f000 f8ec 	bl	8004d1c <prvAddNewTaskToReadyList>
 8004b44:	e001      	b.n	8004b4a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b4a:	697b      	ldr	r3, [r7, #20]
	}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	; 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08c      	sub	sp, #48	; 0x30
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 fc25 	bl	80063b8 <pvPortMalloc>
 8004b6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b76:	20bc      	movs	r0, #188	; 0xbc
 8004b78:	f001 fc1e 	bl	80063b8 <pvPortMalloc>
 8004b7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
 8004b8a:	e005      	b.n	8004b98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b8c:	6978      	ldr	r0, [r7, #20]
 8004b8e:	f001 fcd7 	bl	8006540 <vPortFree>
 8004b92:	e001      	b.n	8004b98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d017      	beq.n	8004bce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9303      	str	r3, [sp, #12]
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	9302      	str	r3, [sp, #8]
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f80f 	bl	8004be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bc2:	69f8      	ldr	r0, [r7, #28]
 8004bc4:	f000 f8aa 	bl	8004d1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e002      	b.n	8004bd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
	}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	21a5      	movs	r1, #165	; 0xa5
 8004bfa:	f001 fdeb 	bl	80067d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f023 0307 	bic.w	r3, r3, #7
 8004c16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	617b      	str	r3, [r7, #20]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	e012      	b.n	8004c64 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	7819      	ldrb	r1, [r3, #0]
 8004c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3334      	adds	r3, #52	; 0x34
 8004c4e:	460a      	mov	r2, r1
 8004c50:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d006      	beq.n	8004c6c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3301      	adds	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d9e9      	bls.n	8004c3e <prvInitialiseNewTask+0x5e>
 8004c6a:	e000      	b.n	8004c6e <prvInitialiseNewTask+0x8e>
		{
			break;
 8004c6c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	2b37      	cmp	r3, #55	; 0x37
 8004c7a:	d901      	bls.n	8004c80 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c7c:	2337      	movs	r3, #55	; 0x37
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	2200      	movs	r2, #0
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	3304      	adds	r3, #4
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff f986 	bl	8003fa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	3318      	adds	r3, #24
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff f981 	bl	8003fa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004caa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	3354      	adds	r3, #84	; 0x54
 8004cd0:	2260      	movs	r2, #96	; 0x60
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fd7d 	bl	80067d4 <memset>
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <prvInitialiseNewTask+0x130>)
 8004cde:	659a      	str	r2, [r3, #88]	; 0x58
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <prvInitialiseNewTask+0x134>)
 8004ce4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	4a0b      	ldr	r2, [pc, #44]	; (8004d18 <prvInitialiseNewTask+0x138>)
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	69b8      	ldr	r0, [r7, #24]
 8004cf2:	f001 f90f 	bl	8005f14 <pxPortInitialiseStack>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d08:	bf00      	nop
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	08006a20 	.word	0x08006a20
 8004d14:	08006a40 	.word	0x08006a40
 8004d18:	08006a00 	.word	0x08006a00

08004d1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d24:	f001 fa26 	bl	8006174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d28:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <prvAddNewTaskToReadyList+0xc4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <prvAddNewTaskToReadyList+0xc4>)
 8004d30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d32:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <prvAddNewTaskToReadyList+0xc8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d3a:	4a2a      	ldr	r2, [pc, #168]	; (8004de4 <prvAddNewTaskToReadyList+0xc8>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d40:	4b27      	ldr	r3, [pc, #156]	; (8004de0 <prvAddNewTaskToReadyList+0xc4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d110      	bne.n	8004d6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d48:	f000 fc2a 	bl	80055a0 <prvInitialiseTaskLists>
 8004d4c:	e00d      	b.n	8004d6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <prvAddNewTaskToReadyList+0xcc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d56:	4b23      	ldr	r3, [pc, #140]	; (8004de4 <prvAddNewTaskToReadyList+0xc8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d802      	bhi.n	8004d6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <prvAddNewTaskToReadyList+0xc8>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <prvAddNewTaskToReadyList+0xd0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <prvAddNewTaskToReadyList+0xd0>)
 8004d72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <prvAddNewTaskToReadyList+0xd0>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <prvAddNewTaskToReadyList+0xd4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d903      	bls.n	8004d90 <prvAddNewTaskToReadyList+0x74>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <prvAddNewTaskToReadyList+0xd4>)
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4a15      	ldr	r2, [pc, #84]	; (8004df4 <prvAddNewTaskToReadyList+0xd8>)
 8004d9e:	441a      	add	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7ff f90b 	bl	8003fc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dac:	f001 fa12 	bl	80061d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004db0:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <prvAddNewTaskToReadyList+0xcc>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <prvAddNewTaskToReadyList+0xc8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d207      	bcs.n	8004dd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <prvAddNewTaskToReadyList+0xdc>)
 8004dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000b60 	.word	0x20000b60
 8004de4:	2000068c 	.word	0x2000068c
 8004de8:	20000b6c 	.word	0x20000b6c
 8004dec:	20000b7c 	.word	0x20000b7c
 8004df0:	20000b68 	.word	0x20000b68
 8004df4:	20000690 	.word	0x20000690
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d017      	beq.n	8004e3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <vTaskDelay+0x60>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <vTaskDelay+0x30>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	60bb      	str	r3, [r7, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e2c:	f000 f88a 	bl	8004f44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e30:	2100      	movs	r1, #0
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fd08 	bl	8005848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e38:	f000 f892 	bl	8004f60 <xTaskResumeAll>
 8004e3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d107      	bne.n	8004e54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <vTaskDelay+0x64>)
 8004e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000b88 	.word	0x20000b88
 8004e60:	e000ed04 	.word	0xe000ed04

08004e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e72:	463a      	mov	r2, r7
 8004e74:	1d39      	adds	r1, r7, #4
 8004e76:	f107 0308 	add.w	r3, r7, #8
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff f840 	bl	8003f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	9202      	str	r2, [sp, #8]
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	460a      	mov	r2, r1
 8004e92:	4924      	ldr	r1, [pc, #144]	; (8004f24 <vTaskStartScheduler+0xc0>)
 8004e94:	4824      	ldr	r0, [pc, #144]	; (8004f28 <vTaskStartScheduler+0xc4>)
 8004e96:	f7ff fe01 	bl	8004a9c <xTaskCreateStatic>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <vTaskStartScheduler+0xc8>)
 8004e9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ea0:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <vTaskStartScheduler+0xc8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e001      	b.n	8004eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d102      	bne.n	8004ebe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004eb8:	f000 fd1a 	bl	80058f0 <xTimerCreateTimerTask>
 8004ebc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d11b      	bne.n	8004efc <vTaskStartScheduler+0x98>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	613b      	str	r3, [r7, #16]
}
 8004ed6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <vTaskStartScheduler+0xcc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3354      	adds	r3, #84	; 0x54
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <vTaskStartScheduler+0xd0>)
 8004ee0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <vTaskStartScheduler+0xd4>)
 8004ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ee8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004eea:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <vTaskStartScheduler+0xd8>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ef0:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <vTaskStartScheduler+0xdc>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ef6:	f001 f89b 	bl	8006030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004efa:	e00e      	b.n	8004f1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f02:	d10a      	bne.n	8004f1a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60fb      	str	r3, [r7, #12]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <vTaskStartScheduler+0xb4>
}
 8004f1a:	bf00      	nop
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	0800698c 	.word	0x0800698c
 8004f28:	08005571 	.word	0x08005571
 8004f2c:	20000b84 	.word	0x20000b84
 8004f30:	2000068c 	.word	0x2000068c
 8004f34:	20000010 	.word	0x20000010
 8004f38:	20000b80 	.word	0x20000b80
 8004f3c:	20000b6c 	.word	0x20000b6c
 8004f40:	20000b64 	.word	0x20000b64

08004f44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <vTaskSuspendAll+0x18>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	4a03      	ldr	r2, [pc, #12]	; (8004f5c <vTaskSuspendAll+0x18>)
 8004f50:	6013      	str	r3, [r2, #0]
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	20000b88 	.word	0x20000b88

08004f60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f6e:	4b42      	ldr	r3, [pc, #264]	; (8005078 <xTaskResumeAll+0x118>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <xTaskResumeAll+0x2c>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	603b      	str	r3, [r7, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f8c:	f001 f8f2 	bl	8006174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f90:	4b39      	ldr	r3, [pc, #228]	; (8005078 <xTaskResumeAll+0x118>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	4a38      	ldr	r2, [pc, #224]	; (8005078 <xTaskResumeAll+0x118>)
 8004f98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f9a:	4b37      	ldr	r3, [pc, #220]	; (8005078 <xTaskResumeAll+0x118>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d162      	bne.n	8005068 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fa2:	4b36      	ldr	r3, [pc, #216]	; (800507c <xTaskResumeAll+0x11c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d05e      	beq.n	8005068 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004faa:	e02f      	b.n	800500c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004fac:	4b34      	ldr	r3, [pc, #208]	; (8005080 <xTaskResumeAll+0x120>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3318      	adds	r3, #24
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff f85f 	bl	800407c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff f85a 	bl	800407c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	4b2d      	ldr	r3, [pc, #180]	; (8005084 <xTaskResumeAll+0x124>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d903      	bls.n	8004fdc <xTaskResumeAll+0x7c>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	4a2a      	ldr	r2, [pc, #168]	; (8005084 <xTaskResumeAll+0x124>)
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4a27      	ldr	r2, [pc, #156]	; (8005088 <xTaskResumeAll+0x128>)
 8004fea:	441a      	add	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fe ffe5 	bl	8003fc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	4b23      	ldr	r3, [pc, #140]	; (800508c <xTaskResumeAll+0x12c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	429a      	cmp	r2, r3
 8005004:	d302      	bcc.n	800500c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <xTaskResumeAll+0x130>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800500c:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <xTaskResumeAll+0x120>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1cb      	bne.n	8004fac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800501a:	f000 fb63 	bl	80056e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <xTaskResumeAll+0x134>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d010      	beq.n	800504c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800502a:	f000 f847 	bl	80050bc <xTaskIncrementTick>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005034:	4b16      	ldr	r3, [pc, #88]	; (8005090 <xTaskResumeAll+0x130>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3b01      	subs	r3, #1
 800503e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f1      	bne.n	800502a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005046:	4b13      	ldr	r3, [pc, #76]	; (8005094 <xTaskResumeAll+0x134>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <xTaskResumeAll+0x130>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005058:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <xTaskResumeAll+0x138>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005068:	f001 f8b4 	bl	80061d4 <vPortExitCritical>

	return xAlreadyYielded;
 800506c:	68bb      	ldr	r3, [r7, #8]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000b88 	.word	0x20000b88
 800507c:	20000b60 	.word	0x20000b60
 8005080:	20000b20 	.word	0x20000b20
 8005084:	20000b68 	.word	0x20000b68
 8005088:	20000690 	.word	0x20000690
 800508c:	2000068c 	.word	0x2000068c
 8005090:	20000b74 	.word	0x20000b74
 8005094:	20000b70 	.word	0x20000b70
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <xTaskGetTickCount+0x1c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050a8:	687b      	ldr	r3, [r7, #4]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000b64 	.word	0x20000b64

080050bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050c6:	4b51      	ldr	r3, [pc, #324]	; (800520c <xTaskIncrementTick+0x150>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 808e 	bne.w	80051ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050d0:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <xTaskIncrementTick+0x154>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050d8:	4a4d      	ldr	r2, [pc, #308]	; (8005210 <xTaskIncrementTick+0x154>)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d120      	bne.n	8005126 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050e4:	4b4b      	ldr	r3, [pc, #300]	; (8005214 <xTaskIncrementTick+0x158>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <xTaskIncrementTick+0x48>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	603b      	str	r3, [r7, #0]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <xTaskIncrementTick+0x46>
 8005104:	4b43      	ldr	r3, [pc, #268]	; (8005214 <xTaskIncrementTick+0x158>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	4b43      	ldr	r3, [pc, #268]	; (8005218 <xTaskIncrementTick+0x15c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a41      	ldr	r2, [pc, #260]	; (8005214 <xTaskIncrementTick+0x158>)
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	4a41      	ldr	r2, [pc, #260]	; (8005218 <xTaskIncrementTick+0x15c>)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b40      	ldr	r3, [pc, #256]	; (800521c <xTaskIncrementTick+0x160>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3301      	adds	r3, #1
 800511e:	4a3f      	ldr	r2, [pc, #252]	; (800521c <xTaskIncrementTick+0x160>)
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	f000 fadf 	bl	80056e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005126:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <xTaskIncrementTick+0x164>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	429a      	cmp	r2, r3
 800512e:	d34e      	bcc.n	80051ce <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005130:	4b38      	ldr	r3, [pc, #224]	; (8005214 <xTaskIncrementTick+0x158>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <xTaskIncrementTick+0x82>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <xTaskIncrementTick+0x84>
 800513e:	2300      	movs	r3, #0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005144:	4b36      	ldr	r3, [pc, #216]	; (8005220 <xTaskIncrementTick+0x164>)
 8005146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800514a:	601a      	str	r2, [r3, #0]
					break;
 800514c:	e03f      	b.n	80051ce <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <xTaskIncrementTick+0x158>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	429a      	cmp	r2, r3
 8005164:	d203      	bcs.n	800516e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005166:	4a2e      	ldr	r2, [pc, #184]	; (8005220 <xTaskIncrementTick+0x164>)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6013      	str	r3, [r2, #0]
						break;
 800516c:	e02f      	b.n	80051ce <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	3304      	adds	r3, #4
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe ff82 	bl	800407c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	3318      	adds	r3, #24
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe ff79 	bl	800407c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	4b25      	ldr	r3, [pc, #148]	; (8005224 <xTaskIncrementTick+0x168>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d903      	bls.n	800519e <xTaskIncrementTick+0xe2>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	4a22      	ldr	r2, [pc, #136]	; (8005224 <xTaskIncrementTick+0x168>)
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <xTaskIncrementTick+0x16c>)
 80051ac:	441a      	add	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fe ff04 	bl	8003fc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051be:	4b1b      	ldr	r3, [pc, #108]	; (800522c <xTaskIncrementTick+0x170>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3b3      	bcc.n	8005130 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051c8:	2301      	movs	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051cc:	e7b0      	b.n	8005130 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <xTaskIncrementTick+0x170>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	4914      	ldr	r1, [pc, #80]	; (8005228 <xTaskIncrementTick+0x16c>)
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d907      	bls.n	80051f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80051e6:	2301      	movs	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e004      	b.n	80051f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <xTaskIncrementTick+0x174>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a0f      	ldr	r2, [pc, #60]	; (8005230 <xTaskIncrementTick+0x174>)
 80051f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80051f6:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <xTaskIncrementTick+0x178>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80051fe:	2301      	movs	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005202:	697b      	ldr	r3, [r7, #20]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20000b88 	.word	0x20000b88
 8005210:	20000b64 	.word	0x20000b64
 8005214:	20000b18 	.word	0x20000b18
 8005218:	20000b1c 	.word	0x20000b1c
 800521c:	20000b78 	.word	0x20000b78
 8005220:	20000b80 	.word	0x20000b80
 8005224:	20000b68 	.word	0x20000b68
 8005228:	20000690 	.word	0x20000690
 800522c:	2000068c 	.word	0x2000068c
 8005230:	20000b70 	.word	0x20000b70
 8005234:	20000b74 	.word	0x20000b74

08005238 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800523e:	4b2a      	ldr	r3, [pc, #168]	; (80052e8 <vTaskSwitchContext+0xb0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005246:	4b29      	ldr	r3, [pc, #164]	; (80052ec <vTaskSwitchContext+0xb4>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800524c:	e046      	b.n	80052dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800524e:	4b27      	ldr	r3, [pc, #156]	; (80052ec <vTaskSwitchContext+0xb4>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005254:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <vTaskSwitchContext+0xb8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e010      	b.n	800527e <vTaskSwitchContext+0x46>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <vTaskSwitchContext+0x40>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	607b      	str	r3, [r7, #4]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <vTaskSwitchContext+0x3e>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3b01      	subs	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	491d      	ldr	r1, [pc, #116]	; (80052f4 <vTaskSwitchContext+0xbc>)
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0e4      	beq.n	800525c <vTaskSwitchContext+0x24>
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <vTaskSwitchContext+0xbc>)
 800529e:	4413      	add	r3, r2
 80052a0:	60bb      	str	r3, [r7, #8]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	605a      	str	r2, [r3, #4]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	3308      	adds	r3, #8
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d104      	bne.n	80052c2 <vTaskSwitchContext+0x8a>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a0b      	ldr	r2, [pc, #44]	; (80052f8 <vTaskSwitchContext+0xc0>)
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4a08      	ldr	r2, [pc, #32]	; (80052f0 <vTaskSwitchContext+0xb8>)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <vTaskSwitchContext+0xc0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3354      	adds	r3, #84	; 0x54
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <vTaskSwitchContext+0xc4>)
 80052da:	6013      	str	r3, [r2, #0]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	20000b88 	.word	0x20000b88
 80052ec:	20000b74 	.word	0x20000b74
 80052f0:	20000b68 	.word	0x20000b68
 80052f4:	20000690 	.word	0x20000690
 80052f8:	2000068c 	.word	0x2000068c
 80052fc:	20000010 	.word	0x20000010

08005300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	60fb      	str	r3, [r7, #12]
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <vTaskPlaceOnEventList+0x44>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3318      	adds	r3, #24
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fe fe6b 	bl	800400a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005334:	2101      	movs	r1, #1
 8005336:	6838      	ldr	r0, [r7, #0]
 8005338:	f000 fa86 	bl	8005848 <prvAddCurrentTaskToDelayedList>
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	2000068c 	.word	0x2000068c

08005348 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	617b      	str	r3, [r7, #20]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <vTaskPlaceOnEventListRestricted+0x54>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3318      	adds	r3, #24
 8005376:	4619      	mov	r1, r3
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7fe fe22 	bl	8003fc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005388:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	68b8      	ldr	r0, [r7, #8]
 800538e:	f000 fa5b 	bl	8005848 <prvAddCurrentTaskToDelayedList>
	}
 8005392:	bf00      	nop
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	2000068c 	.word	0x2000068c

080053a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60fb      	str	r3, [r7, #12]
}
 80053c8:	bf00      	nop
 80053ca:	e7fe      	b.n	80053ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	3318      	adds	r3, #24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fe53 	bl	800407c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d6:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <xTaskRemoveFromEventList+0xb0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d11d      	bne.n	800541a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	3304      	adds	r3, #4
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fe4a 	bl	800407c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	4b19      	ldr	r3, [pc, #100]	; (8005454 <xTaskRemoveFromEventList+0xb4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d903      	bls.n	80053fc <xTaskRemoveFromEventList+0x5c>
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	4a16      	ldr	r2, [pc, #88]	; (8005454 <xTaskRemoveFromEventList+0xb4>)
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4a13      	ldr	r2, [pc, #76]	; (8005458 <xTaskRemoveFromEventList+0xb8>)
 800540a:	441a      	add	r2, r3
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fe fdd5 	bl	8003fc2 <vListInsertEnd>
 8005418:	e005      	b.n	8005426 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	3318      	adds	r3, #24
 800541e:	4619      	mov	r1, r3
 8005420:	480e      	ldr	r0, [pc, #56]	; (800545c <xTaskRemoveFromEventList+0xbc>)
 8005422:	f7fe fdce 	bl	8003fc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <xTaskRemoveFromEventList+0xc0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	429a      	cmp	r2, r3
 8005432:	d905      	bls.n	8005440 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <xTaskRemoveFromEventList+0xc4>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e001      	b.n	8005444 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005444:	697b      	ldr	r3, [r7, #20]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000b88 	.word	0x20000b88
 8005454:	20000b68 	.word	0x20000b68
 8005458:	20000690 	.word	0x20000690
 800545c:	20000b20 	.word	0x20000b20
 8005460:	2000068c 	.word	0x2000068c
 8005464:	20000b74 	.word	0x20000b74

08005468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <vTaskInternalSetTimeOutState+0x24>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <vTaskInternalSetTimeOutState+0x28>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	605a      	str	r2, [r3, #4]
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000b78 	.word	0x20000b78
 8005490:	20000b64 	.word	0x20000b64

08005494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	613b      	str	r3, [r7, #16]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60fb      	str	r3, [r7, #12]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054d6:	f000 fe4d 	bl	8006174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <xTaskCheckForTimeOut+0xbc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f2:	d102      	bne.n	80054fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	e023      	b.n	8005542 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b15      	ldr	r3, [pc, #84]	; (8005554 <xTaskCheckForTimeOut+0xc0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d007      	beq.n	8005516 <xTaskCheckForTimeOut+0x82>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	429a      	cmp	r2, r3
 800550e:	d302      	bcc.n	8005516 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	e015      	b.n	8005542 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	429a      	cmp	r2, r3
 800551e:	d20b      	bcs.n	8005538 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff9b 	bl	8005468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e004      	b.n	8005542 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800553e:	2301      	movs	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005542:	f000 fe47 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 8005546:	69fb      	ldr	r3, [r7, #28]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000b64 	.word	0x20000b64
 8005554:	20000b78 	.word	0x20000b78

08005558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <vTaskMissedYield+0x14>)
 800555e:	2201      	movs	r2, #1
 8005560:	601a      	str	r2, [r3, #0]
}
 8005562:	bf00      	nop
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	20000b74 	.word	0x20000b74

08005570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005578:	f000 f852 	bl	8005620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <prvIdleTask+0x28>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d9f9      	bls.n	8005578 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <prvIdleTask+0x2c>)
 8005586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005594:	e7f0      	b.n	8005578 <prvIdleTask+0x8>
 8005596:	bf00      	nop
 8005598:	20000690 	.word	0x20000690
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	e00c      	b.n	80055c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4a12      	ldr	r2, [pc, #72]	; (8005600 <prvInitialiseTaskLists+0x60>)
 80055b8:	4413      	add	r3, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fcd4 	bl	8003f68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3301      	adds	r3, #1
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b37      	cmp	r3, #55	; 0x37
 80055ca:	d9ef      	bls.n	80055ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055cc:	480d      	ldr	r0, [pc, #52]	; (8005604 <prvInitialiseTaskLists+0x64>)
 80055ce:	f7fe fccb 	bl	8003f68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055d2:	480d      	ldr	r0, [pc, #52]	; (8005608 <prvInitialiseTaskLists+0x68>)
 80055d4:	f7fe fcc8 	bl	8003f68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055d8:	480c      	ldr	r0, [pc, #48]	; (800560c <prvInitialiseTaskLists+0x6c>)
 80055da:	f7fe fcc5 	bl	8003f68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055de:	480c      	ldr	r0, [pc, #48]	; (8005610 <prvInitialiseTaskLists+0x70>)
 80055e0:	f7fe fcc2 	bl	8003f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055e4:	480b      	ldr	r0, [pc, #44]	; (8005614 <prvInitialiseTaskLists+0x74>)
 80055e6:	f7fe fcbf 	bl	8003f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <prvInitialiseTaskLists+0x78>)
 80055ec:	4a05      	ldr	r2, [pc, #20]	; (8005604 <prvInitialiseTaskLists+0x64>)
 80055ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055f0:	4b0a      	ldr	r3, [pc, #40]	; (800561c <prvInitialiseTaskLists+0x7c>)
 80055f2:	4a05      	ldr	r2, [pc, #20]	; (8005608 <prvInitialiseTaskLists+0x68>)
 80055f4:	601a      	str	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000690 	.word	0x20000690
 8005604:	20000af0 	.word	0x20000af0
 8005608:	20000b04 	.word	0x20000b04
 800560c:	20000b20 	.word	0x20000b20
 8005610:	20000b34 	.word	0x20000b34
 8005614:	20000b4c 	.word	0x20000b4c
 8005618:	20000b18 	.word	0x20000b18
 800561c:	20000b1c 	.word	0x20000b1c

08005620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005626:	e019      	b.n	800565c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005628:	f000 fda4 	bl	8006174 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800562c:	4b10      	ldr	r3, [pc, #64]	; (8005670 <prvCheckTasksWaitingTermination+0x50>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe fd1f 	bl	800407c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800563e:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <prvCheckTasksWaitingTermination+0x54>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3b01      	subs	r3, #1
 8005644:	4a0b      	ldr	r2, [pc, #44]	; (8005674 <prvCheckTasksWaitingTermination+0x54>)
 8005646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <prvCheckTasksWaitingTermination+0x58>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3b01      	subs	r3, #1
 800564e:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <prvCheckTasksWaitingTermination+0x58>)
 8005650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005652:	f000 fdbf 	bl	80061d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f810 	bl	800567c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <prvCheckTasksWaitingTermination+0x58>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e1      	bne.n	8005628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000b34 	.word	0x20000b34
 8005674:	20000b60 	.word	0x20000b60
 8005678:	20000b48 	.word	0x20000b48

0800567c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3354      	adds	r3, #84	; 0x54
 8005688:	4618      	mov	r0, r3
 800568a:	f001 f8b9 	bl	8006800 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005694:	2b00      	cmp	r3, #0
 8005696:	d108      	bne.n	80056aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	4618      	mov	r0, r3
 800569e:	f000 ff4f 	bl	8006540 <vPortFree>
				vPortFree( pxTCB );
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 ff4c 	bl	8006540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056a8:	e018      	b.n	80056dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d103      	bne.n	80056bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 ff43 	bl	8006540 <vPortFree>
	}
 80056ba:	e00f      	b.n	80056dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d00a      	beq.n	80056dc <prvDeleteTCB+0x60>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	60fb      	str	r3, [r7, #12]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <prvDeleteTCB+0x5e>
	}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ea:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <prvResetNextTaskUnblockTime+0x44>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <prvResetNextTaskUnblockTime+0x14>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <prvResetNextTaskUnblockTime+0x16>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <prvResetNextTaskUnblockTime+0x48>)
 8005700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005704:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005706:	e008      	b.n	800571a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <prvResetNextTaskUnblockTime+0x44>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4a05      	ldr	r2, [pc, #20]	; (800572c <prvResetNextTaskUnblockTime+0x48>)
 8005718:	6013      	str	r3, [r2, #0]
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000b18 	.word	0x20000b18
 800572c:	20000b80 	.word	0x20000b80

08005730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <xTaskGetSchedulerState+0x34>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800573e:	2301      	movs	r3, #1
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	e008      	b.n	8005756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <xTaskGetSchedulerState+0x38>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800574c:	2302      	movs	r3, #2
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	e001      	b.n	8005756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005756:	687b      	ldr	r3, [r7, #4]
	}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	20000b6c 	.word	0x20000b6c
 8005768:	20000b88 	.word	0x20000b88

0800576c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d056      	beq.n	8005830 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005782:	4b2e      	ldr	r3, [pc, #184]	; (800583c <xTaskPriorityDisinherit+0xd0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d00a      	beq.n	80057a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	60bb      	str	r3, [r7, #8]
}
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c4:	1e5a      	subs	r2, r3, #1
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d02c      	beq.n	8005830 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d128      	bne.n	8005830 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fc4a 	bl	800407c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4b0f      	ldr	r3, [pc, #60]	; (8005840 <xTaskPriorityDisinherit+0xd4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d903      	bls.n	8005810 <xTaskPriorityDisinherit+0xa4>
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a0c      	ldr	r2, [pc, #48]	; (8005840 <xTaskPriorityDisinherit+0xd4>)
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a09      	ldr	r2, [pc, #36]	; (8005844 <xTaskPriorityDisinherit+0xd8>)
 800581e:	441a      	add	r2, r3
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	3304      	adds	r3, #4
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7fe fbcb 	bl	8003fc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005830:	697b      	ldr	r3, [r7, #20]
	}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	2000068c 	.word	0x2000068c
 8005840:	20000b68 	.word	0x20000b68
 8005844:	20000690 	.word	0x20000690

08005848 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005852:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005858:	4b20      	ldr	r3, [pc, #128]	; (80058dc <prvAddCurrentTaskToDelayedList+0x94>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3304      	adds	r3, #4
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fc0c 	bl	800407c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800586a:	d10a      	bne.n	8005882 <prvAddCurrentTaskToDelayedList+0x3a>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005872:	4b1a      	ldr	r3, [pc, #104]	; (80058dc <prvAddCurrentTaskToDelayedList+0x94>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3304      	adds	r3, #4
 8005878:	4619      	mov	r1, r3
 800587a:	4819      	ldr	r0, [pc, #100]	; (80058e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800587c:	f7fe fba1 	bl	8003fc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005880:	e026      	b.n	80058d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4413      	add	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800588a:	4b14      	ldr	r3, [pc, #80]	; (80058dc <prvAddCurrentTaskToDelayedList+0x94>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	429a      	cmp	r2, r3
 8005898:	d209      	bcs.n	80058ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800589a:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <prvAddCurrentTaskToDelayedList+0x94>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fe fbaf 	bl	800400a <vListInsert>
}
 80058ac:	e010      	b.n	80058d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ae:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <prvAddCurrentTaskToDelayedList+0x94>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7fe fba5 	bl	800400a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d202      	bcs.n	80058d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058ca:	4a08      	ldr	r2, [pc, #32]	; (80058ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6013      	str	r3, [r2, #0]
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000b64 	.word	0x20000b64
 80058dc:	2000068c 	.word	0x2000068c
 80058e0:	20000b4c 	.word	0x20000b4c
 80058e4:	20000b1c 	.word	0x20000b1c
 80058e8:	20000b18 	.word	0x20000b18
 80058ec:	20000b80 	.word	0x20000b80

080058f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058fa:	f000 facb 	bl	8005e94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058fe:	4b1c      	ldr	r3, [pc, #112]	; (8005970 <xTimerCreateTimerTask+0x80>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d021      	beq.n	800594a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800590e:	1d3a      	adds	r2, r7, #4
 8005910:	f107 0108 	add.w	r1, r7, #8
 8005914:	f107 030c 	add.w	r3, r7, #12
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fb0b 	bl	8003f34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	9202      	str	r2, [sp, #8]
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	2302      	movs	r3, #2
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	2300      	movs	r3, #0
 800592e:	460a      	mov	r2, r1
 8005930:	4910      	ldr	r1, [pc, #64]	; (8005974 <xTimerCreateTimerTask+0x84>)
 8005932:	4811      	ldr	r0, [pc, #68]	; (8005978 <xTimerCreateTimerTask+0x88>)
 8005934:	f7ff f8b2 	bl	8004a9c <xTaskCreateStatic>
 8005938:	4603      	mov	r3, r0
 800593a:	4a10      	ldr	r2, [pc, #64]	; (800597c <xTimerCreateTimerTask+0x8c>)
 800593c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <xTimerCreateTimerTask+0x8c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005946:	2301      	movs	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	613b      	str	r3, [r7, #16]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005966:	697b      	ldr	r3, [r7, #20]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000bbc 	.word	0x20000bbc
 8005974:	08006994 	.word	0x08006994
 8005978:	08005a9d 	.word	0x08005a9d
 800597c:	20000bc0 	.word	0x20000bc0

08005980 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	623b      	str	r3, [r7, #32]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059ae:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <xTimerGenericCommand+0x98>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d02a      	beq.n	8005a0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b05      	cmp	r3, #5
 80059c6:	dc18      	bgt.n	80059fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059c8:	f7ff feb2 	bl	8005730 <xTaskGetSchedulerState>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d109      	bne.n	80059e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <xTimerGenericCommand+0x98>)
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	f107 0110 	add.w	r1, r7, #16
 80059da:	2300      	movs	r3, #0
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	f7fe fc79 	bl	80042d4 <xQueueGenericSend>
 80059e2:	6278      	str	r0, [r7, #36]	; 0x24
 80059e4:	e012      	b.n	8005a0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <xTimerGenericCommand+0x98>)
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	f107 0110 	add.w	r1, r7, #16
 80059ee:	2300      	movs	r3, #0
 80059f0:	2200      	movs	r2, #0
 80059f2:	f7fe fc6f 	bl	80042d4 <xQueueGenericSend>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24
 80059f8:	e008      	b.n	8005a0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059fa:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <xTimerGenericCommand+0x98>)
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	f107 0110 	add.w	r1, r7, #16
 8005a02:	2300      	movs	r3, #0
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	f7fe fd63 	bl	80044d0 <xQueueGenericSendFromISR>
 8005a0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3728      	adds	r7, #40	; 0x28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000bbc 	.word	0x20000bbc

08005a1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <prvProcessExpiredTimer+0x7c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fb21 	bl	800407c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d122      	bne.n	8005a88 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	18d1      	adds	r1, r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	6978      	ldr	r0, [r7, #20]
 8005a50:	f000 f8c8 	bl	8005be4 <prvInsertTimerInActiveList>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d016      	beq.n	8005a88 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	2100      	movs	r1, #0
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	f7ff ff8b 	bl	8005980 <xTimerGenericCommand>
 8005a6a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	60fb      	str	r3, [r7, #12]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	6978      	ldr	r0, [r7, #20]
 8005a8e:	4798      	blx	r3
}
 8005a90:	bf00      	nop
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000bb4 	.word	0x20000bb4

08005a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005aa4:	f107 0308 	add.w	r3, r7, #8
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 f857 	bl	8005b5c <prvGetNextExpireTime>
 8005aae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f803 	bl	8005ac0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005aba:	f000 f8d5 	bl	8005c68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005abe:	e7f1      	b.n	8005aa4 <prvTimerTask+0x8>

08005ac0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005aca:	f7ff fa3b 	bl	8004f44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f866 	bl	8005ba4 <prvSampleTimeNow>
 8005ad8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d130      	bne.n	8005b42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <prvProcessTimerOrBlockTask+0x3c>
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d806      	bhi.n	8005afc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005aee:	f7ff fa37 	bl	8004f60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005af2:	68f9      	ldr	r1, [r7, #12]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff ff91 	bl	8005a1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005afa:	e024      	b.n	8005b46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <prvProcessTimerOrBlockTask+0x90>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <prvProcessTimerOrBlockTask+0x94>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	4619      	mov	r1, r3
 8005b22:	f7fe ff87 	bl	8004a34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b26:	f7ff fa1b 	bl	8004f60 <xTaskResumeAll>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b30:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <prvProcessTimerOrBlockTask+0x98>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
}
 8005b40:	e001      	b.n	8005b46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b42:	f7ff fa0d 	bl	8004f60 <xTaskResumeAll>
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000bb8 	.word	0x20000bb8
 8005b54:	20000bbc 	.word	0x20000bbc
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <prvGetNextExpireTime+0x44>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d105      	bne.n	8005b8e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <prvGetNextExpireTime+0x44>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e001      	b.n	8005b92 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b92:	68fb      	ldr	r3, [r7, #12]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	20000bb4 	.word	0x20000bb4

08005ba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bac:	f7ff fa76 	bl	800509c <xTaskGetTickCount>
 8005bb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <prvSampleTimeNow+0x3c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d205      	bcs.n	8005bc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bbc:	f000 f908 	bl	8005dd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bce:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <prvSampleTimeNow+0x3c>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000bc4 	.word	0x20000bc4

08005be4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d812      	bhi.n	8005c30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d302      	bcc.n	8005c1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e01b      	b.n	8005c56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c1e:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <prvInsertTimerInActiveList+0x7c>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7fe f9ee 	bl	800400a <vListInsert>
 8005c2e:	e012      	b.n	8005c56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d206      	bcs.n	8005c46 <prvInsertTimerInActiveList+0x62>
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d302      	bcc.n	8005c46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e007      	b.n	8005c56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <prvInsertTimerInActiveList+0x80>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7fe f9da 	bl	800400a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c56:	697b      	ldr	r3, [r7, #20]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000bb8 	.word	0x20000bb8
 8005c64:	20000bb4 	.word	0x20000bb4

08005c68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c6e:	e09d      	b.n	8005dac <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da18      	bge.n	8005ca8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c76:	1d3b      	adds	r3, r7, #4
 8005c78:	3304      	adds	r3, #4
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	61fb      	str	r3, [r7, #28]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9e:	6850      	ldr	r0, [r2, #4]
 8005ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca2:	6892      	ldr	r2, [r2, #8]
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	db7d      	blt.n	8005daa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d004      	beq.n	8005cc4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe f9dc 	bl	800407c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff ff6c 	bl	8005ba4 <prvSampleTimeNow>
 8005ccc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b09      	cmp	r3, #9
 8005cd2:	d86b      	bhi.n	8005dac <prvProcessReceivedCommands+0x144>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <prvProcessReceivedCommands+0x74>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d05 	.word	0x08005d05
 8005ce8:	08005dad 	.word	0x08005dad
 8005cec:	08005d61 	.word	0x08005d61
 8005cf0:	08005d99 	.word	0x08005d99
 8005cf4:	08005d05 	.word	0x08005d05
 8005cf8:	08005d05 	.word	0x08005d05
 8005cfc:	08005dad 	.word	0x08005dad
 8005d00:	08005d61 	.word	0x08005d61
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	18d1      	adds	r1, r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d12:	f7ff ff67 	bl	8005be4 <prvInsertTimerInActiveList>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d047      	beq.n	8005dac <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d22:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d13f      	bne.n	8005dac <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	441a      	add	r2, r3
 8005d34:	2300      	movs	r3, #0
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d3e:	f7ff fe1f 	bl	8005980 <xTimerGenericCommand>
 8005d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d130      	bne.n	8005dac <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	61bb      	str	r3, [r7, #24]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	617b      	str	r3, [r7, #20]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	18d1      	adds	r1, r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d92:	f7ff ff27 	bl	8005be4 <prvInsertTimerInActiveList>
					break;
 8005d96:	e009      	b.n	8005dac <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da4:	f000 fbcc 	bl	8006540 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005da8:	e000      	b.n	8005dac <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005daa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dac:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <prvProcessReceivedCommands+0x164>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	1d39      	adds	r1, r7, #4
 8005db2:	2200      	movs	r2, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fc23 	bl	8004600 <xQueueReceive>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f47f af57 	bne.w	8005c70 <prvProcessReceivedCommands+0x8>
	}
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	3730      	adds	r7, #48	; 0x30
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000bbc 	.word	0x20000bbc

08005dd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dd6:	e045      	b.n	8005e64 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <prvSwitchTimerLists+0xbc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005de2:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <prvSwitchTimerLists+0xbc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe f943 	bl	800407c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d12e      	bne.n	8005e64 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d90e      	bls.n	8005e36 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <prvSwitchTimerLists+0xbc>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f7fe f8eb 	bl	800400a <vListInsert>
 8005e34:	e016      	b.n	8005e64 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e36:	2300      	movs	r3, #0
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	2100      	movs	r1, #0
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff fd9d 	bl	8005980 <xTimerGenericCommand>
 8005e46:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	603b      	str	r3, [r7, #0]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e64:	4b09      	ldr	r3, [pc, #36]	; (8005e8c <prvSwitchTimerLists+0xbc>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1b4      	bne.n	8005dd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e6e:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <prvSwitchTimerLists+0xbc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <prvSwitchTimerLists+0xc0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <prvSwitchTimerLists+0xbc>)
 8005e7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e7c:	4a04      	ldr	r2, [pc, #16]	; (8005e90 <prvSwitchTimerLists+0xc0>)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6013      	str	r3, [r2, #0]
}
 8005e82:	bf00      	nop
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000bb4 	.word	0x20000bb4
 8005e90:	20000bb8 	.word	0x20000bb8

08005e94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e9a:	f000 f96b 	bl	8006174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e9e:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <prvCheckForValidListAndQueue+0x60>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d120      	bne.n	8005ee8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ea6:	4814      	ldr	r0, [pc, #80]	; (8005ef8 <prvCheckForValidListAndQueue+0x64>)
 8005ea8:	f7fe f85e 	bl	8003f68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005eac:	4813      	ldr	r0, [pc, #76]	; (8005efc <prvCheckForValidListAndQueue+0x68>)
 8005eae:	f7fe f85b 	bl	8003f68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005eb2:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <prvCheckForValidListAndQueue+0x6c>)
 8005eb4:	4a10      	ldr	r2, [pc, #64]	; (8005ef8 <prvCheckForValidListAndQueue+0x64>)
 8005eb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005eb8:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <prvCheckForValidListAndQueue+0x70>)
 8005eba:	4a10      	ldr	r2, [pc, #64]	; (8005efc <prvCheckForValidListAndQueue+0x68>)
 8005ebc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <prvCheckForValidListAndQueue+0x74>)
 8005ec4:	4a11      	ldr	r2, [pc, #68]	; (8005f0c <prvCheckForValidListAndQueue+0x78>)
 8005ec6:	2110      	movs	r1, #16
 8005ec8:	200a      	movs	r0, #10
 8005eca:	f7fe f969 	bl	80041a0 <xQueueGenericCreateStatic>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4a08      	ldr	r2, [pc, #32]	; (8005ef4 <prvCheckForValidListAndQueue+0x60>)
 8005ed2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <prvCheckForValidListAndQueue+0x60>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <prvCheckForValidListAndQueue+0x60>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	490b      	ldr	r1, [pc, #44]	; (8005f10 <prvCheckForValidListAndQueue+0x7c>)
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe fd7c 	bl	80049e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ee8:	f000 f974 	bl	80061d4 <vPortExitCritical>
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000bbc 	.word	0x20000bbc
 8005ef8:	20000b8c 	.word	0x20000b8c
 8005efc:	20000ba0 	.word	0x20000ba0
 8005f00:	20000bb4 	.word	0x20000bb4
 8005f04:	20000bb8 	.word	0x20000bb8
 8005f08:	20000c68 	.word	0x20000c68
 8005f0c:	20000bc8 	.word	0x20000bc8
 8005f10:	0800699c 	.word	0x0800699c

08005f14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3b04      	subs	r3, #4
 8005f24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3b04      	subs	r3, #4
 8005f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f023 0201 	bic.w	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3b04      	subs	r3, #4
 8005f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f44:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <pxPortInitialiseStack+0x64>)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b14      	subs	r3, #20
 8005f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f06f 0202 	mvn.w	r2, #2
 8005f62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3b20      	subs	r3, #32
 8005f68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	08005f7d 	.word	0x08005f7d

08005f7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f86:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <prvTaskExitError+0x54>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8e:	d00a      	beq.n	8005fa6 <prvTaskExitError+0x2a>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <prvTaskExitError+0x28>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60bb      	str	r3, [r7, #8]
}
 8005fb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fba:	bf00      	nop
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0fc      	beq.n	8005fbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	2000000c 	.word	0x2000000c
	...

08005fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <pxCurrentTCBConst2>)
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	6808      	ldr	r0, [r1, #0]
 8005fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fea:	f380 8809 	msr	PSP, r0
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f04f 0000 	mov.w	r0, #0
 8005ff6:	f380 8811 	msr	BASEPRI, r0
 8005ffa:	4770      	bx	lr
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst2>:
 8006000:	2000068c 	.word	0x2000068c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006008:	4808      	ldr	r0, [pc, #32]	; (800602c <prvPortStartFirstTask+0x24>)
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	6800      	ldr	r0, [r0, #0]
 800600e:	f380 8808 	msr	MSP, r0
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8814 	msr	CONTROL, r0
 800601a:	b662      	cpsie	i
 800601c:	b661      	cpsie	f
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	df00      	svc	0
 8006028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800602a:	bf00      	nop
 800602c:	e000ed08 	.word	0xe000ed08

08006030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006036:	4b46      	ldr	r3, [pc, #280]	; (8006150 <xPortStartScheduler+0x120>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a46      	ldr	r2, [pc, #280]	; (8006154 <xPortStartScheduler+0x124>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10a      	bne.n	8006056 <xPortStartScheduler+0x26>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	613b      	str	r3, [r7, #16]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006056:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <xPortStartScheduler+0x120>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3f      	ldr	r2, [pc, #252]	; (8006158 <xPortStartScheduler+0x128>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10a      	bne.n	8006076 <xPortStartScheduler+0x46>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006076:	4b39      	ldr	r3, [pc, #228]	; (800615c <xPortStartScheduler+0x12c>)
 8006078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006098:	b2da      	uxtb	r2, r3
 800609a:	4b31      	ldr	r3, [pc, #196]	; (8006160 <xPortStartScheduler+0x130>)
 800609c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <xPortStartScheduler+0x134>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060a4:	e009      	b.n	80060ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <xPortStartScheduler+0x134>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	4a2d      	ldr	r2, [pc, #180]	; (8006164 <xPortStartScheduler+0x134>)
 80060ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d0ef      	beq.n	80060a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060c6:	4b27      	ldr	r3, [pc, #156]	; (8006164 <xPortStartScheduler+0x134>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1c3 0307 	rsb	r3, r3, #7
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d00a      	beq.n	80060e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60bb      	str	r3, [r7, #8]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <xPortStartScheduler+0x134>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <xPortStartScheduler+0x134>)
 80060f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <xPortStartScheduler+0x134>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <xPortStartScheduler+0x134>)
 80060fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006106:	4b18      	ldr	r3, [pc, #96]	; (8006168 <xPortStartScheduler+0x138>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a17      	ldr	r2, [pc, #92]	; (8006168 <xPortStartScheduler+0x138>)
 800610c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <xPortStartScheduler+0x138>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a14      	ldr	r2, [pc, #80]	; (8006168 <xPortStartScheduler+0x138>)
 8006118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800611c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800611e:	f000 f8dd 	bl	80062dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <xPortStartScheduler+0x13c>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006128:	f000 f8fc 	bl	8006324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800612c:	4b10      	ldr	r3, [pc, #64]	; (8006170 <xPortStartScheduler+0x140>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <xPortStartScheduler+0x140>)
 8006132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006138:	f7ff ff66 	bl	8006008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800613c:	f7ff f87c 	bl	8005238 <vTaskSwitchContext>
	prvTaskExitError();
 8006140:	f7ff ff1c 	bl	8005f7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	e000ed00 	.word	0xe000ed00
 8006154:	410fc271 	.word	0x410fc271
 8006158:	410fc270 	.word	0x410fc270
 800615c:	e000e400 	.word	0xe000e400
 8006160:	20000cb8 	.word	0x20000cb8
 8006164:	20000cbc 	.word	0x20000cbc
 8006168:	e000ed20 	.word	0xe000ed20
 800616c:	2000000c 	.word	0x2000000c
 8006170:	e000ef34 	.word	0xe000ef34

08006174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	607b      	str	r3, [r7, #4]
}
 800618c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <vPortEnterCritical+0x58>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	4a0d      	ldr	r2, [pc, #52]	; (80061cc <vPortEnterCritical+0x58>)
 8006196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <vPortEnterCritical+0x58>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10f      	bne.n	80061c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <vPortEnterCritical+0x5c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	603b      	str	r3, [r7, #0]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <vPortEnterCritical+0x4a>
	}
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	2000000c 	.word	0x2000000c
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <vPortExitCritical+0x50>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <vPortExitCritical+0x24>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	607b      	str	r3, [r7, #4]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <vPortExitCritical+0x50>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	4a09      	ldr	r2, [pc, #36]	; (8006224 <vPortExitCritical+0x50>)
 8006200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <vPortExitCritical+0x50>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <vPortExitCritical+0x42>
 800620a:	2300      	movs	r3, #0
 800620c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f383 8811 	msr	BASEPRI, r3
}
 8006214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	2000000c 	.word	0x2000000c
	...

08006230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006230:	f3ef 8009 	mrs	r0, PSP
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <pxCurrentTCBConst>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	f01e 0f10 	tst.w	lr, #16
 8006240:	bf08      	it	eq
 8006242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	6010      	str	r0, [r2, #0]
 800624c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006254:	f380 8811 	msr	BASEPRI, r0
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f7fe ffea 	bl	8005238 <vTaskSwitchContext>
 8006264:	f04f 0000 	mov.w	r0, #0
 8006268:	f380 8811 	msr	BASEPRI, r0
 800626c:	bc09      	pop	{r0, r3}
 800626e:	6819      	ldr	r1, [r3, #0]
 8006270:	6808      	ldr	r0, [r1, #0]
 8006272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006276:	f01e 0f10 	tst.w	lr, #16
 800627a:	bf08      	it	eq
 800627c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006280:	f380 8809 	msr	PSP, r0
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst>:
 8006290:	2000068c 	.word	0x2000068c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062b2:	f7fe ff03 	bl	80050bc <xTaskIncrementTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <xPortSysTickHandler+0x40>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <vPortSetupTimerInterrupt+0x38>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <vPortSetupTimerInterrupt+0x3c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0a      	ldr	r2, [pc, #40]	; (800631c <vPortSetupTimerInterrupt+0x40>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	4a09      	ldr	r2, [pc, #36]	; (8006320 <vPortSetupTimerInterrupt+0x44>)
 80062fa:	3b01      	subs	r3, #1
 80062fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	e000e010 	.word	0xe000e010
 8006314:	e000e018 	.word	0xe000e018
 8006318:	20000000 	.word	0x20000000
 800631c:	10624dd3 	.word	0x10624dd3
 8006320:	e000e014 	.word	0xe000e014

08006324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006334 <vPortEnableVFP+0x10>
 8006328:	6801      	ldr	r1, [r0, #0]
 800632a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800632e:	6001      	str	r1, [r0, #0]
 8006330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006332:	bf00      	nop
 8006334:	e000ed88 	.word	0xe000ed88

08006338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800633e:	f3ef 8305 	mrs	r3, IPSR
 8006342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b0f      	cmp	r3, #15
 8006348:	d914      	bls.n	8006374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <vPortValidateInterruptPriority+0x70>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006354:	4b15      	ldr	r3, [pc, #84]	; (80063ac <vPortValidateInterruptPriority+0x74>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	7afa      	ldrb	r2, [r7, #11]
 800635a:	429a      	cmp	r2, r3
 800635c:	d20a      	bcs.n	8006374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006374:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <vPortValidateInterruptPriority+0x78>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <vPortValidateInterruptPriority+0x7c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d90a      	bls.n	800639a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	603b      	str	r3, [r7, #0]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <vPortValidateInterruptPriority+0x60>
	}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	e000e3f0 	.word	0xe000e3f0
 80063ac:	20000cb8 	.word	0x20000cb8
 80063b0:	e000ed0c 	.word	0xe000ed0c
 80063b4:	20000cbc 	.word	0x20000cbc

080063b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063c4:	f7fe fdbe 	bl	8004f44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063c8:	4b58      	ldr	r3, [pc, #352]	; (800652c <pvPortMalloc+0x174>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063d0:	f000 f910 	bl	80065f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063d4:	4b56      	ldr	r3, [pc, #344]	; (8006530 <pvPortMalloc+0x178>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 808e 	bne.w	80064fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01d      	beq.n	8006424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063e8:	2208      	movs	r2, #8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d014      	beq.n	8006424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f023 0307 	bic.w	r3, r3, #7
 8006400:	3308      	adds	r3, #8
 8006402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <pvPortMalloc+0x6c>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	617b      	str	r3, [r7, #20]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d069      	beq.n	80064fe <pvPortMalloc+0x146>
 800642a:	4b42      	ldr	r3, [pc, #264]	; (8006534 <pvPortMalloc+0x17c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d864      	bhi.n	80064fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006434:	4b40      	ldr	r3, [pc, #256]	; (8006538 <pvPortMalloc+0x180>)
 8006436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006438:	4b3f      	ldr	r3, [pc, #252]	; (8006538 <pvPortMalloc+0x180>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800643e:	e004      	b.n	800644a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <pvPortMalloc+0xa4>
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f1      	bne.n	8006440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800645c:	4b33      	ldr	r3, [pc, #204]	; (800652c <pvPortMalloc+0x174>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	429a      	cmp	r2, r3
 8006464:	d04b      	beq.n	80064fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2208      	movs	r2, #8
 800646c:	4413      	add	r3, r2
 800646e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	2308      	movs	r3, #8
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	429a      	cmp	r2, r3
 8006486:	d91f      	bls.n	80064c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <pvPortMalloc+0xf8>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	613b      	str	r3, [r7, #16]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064c2:	69b8      	ldr	r0, [r7, #24]
 80064c4:	f000 f8f8 	bl	80066b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <pvPortMalloc+0x17c>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	4a18      	ldr	r2, [pc, #96]	; (8006534 <pvPortMalloc+0x17c>)
 80064d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064d6:	4b17      	ldr	r3, [pc, #92]	; (8006534 <pvPortMalloc+0x17c>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b18      	ldr	r3, [pc, #96]	; (800653c <pvPortMalloc+0x184>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d203      	bcs.n	80064ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064e2:	4b14      	ldr	r3, [pc, #80]	; (8006534 <pvPortMalloc+0x17c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a15      	ldr	r2, [pc, #84]	; (800653c <pvPortMalloc+0x184>)
 80064e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <pvPortMalloc+0x178>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064fe:	f7fe fd2f 	bl	8004f60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <pvPortMalloc+0x16a>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	60fb      	str	r3, [r7, #12]
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <pvPortMalloc+0x168>
	return pvReturn;
 8006522:	69fb      	ldr	r3, [r7, #28]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3728      	adds	r7, #40	; 0x28
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	200010c8 	.word	0x200010c8
 8006530:	200010d4 	.word	0x200010d4
 8006534:	200010cc 	.word	0x200010cc
 8006538:	200010c0 	.word	0x200010c0
 800653c:	200010d0 	.word	0x200010d0

08006540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d048      	beq.n	80065e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006552:	2308      	movs	r3, #8
 8006554:	425b      	negs	r3, r3
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4413      	add	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	4b21      	ldr	r3, [pc, #132]	; (80065ec <vPortFree+0xac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <vPortFree+0x44>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60fb      	str	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <vPortFree+0x62>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60bb      	str	r3, [r7, #8]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4b11      	ldr	r3, [pc, #68]	; (80065ec <vPortFree+0xac>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d019      	beq.n	80065e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d115      	bne.n	80065e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <vPortFree+0xac>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	401a      	ands	r2, r3
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065c8:	f7fe fcbc 	bl	8004f44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <vPortFree+0xb0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4413      	add	r3, r2
 80065d6:	4a06      	ldr	r2, [pc, #24]	; (80065f0 <vPortFree+0xb0>)
 80065d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065da:	6938      	ldr	r0, [r7, #16]
 80065dc:	f000 f86c 	bl	80066b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80065e0:	f7fe fcbe 	bl	8004f60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065e4:	bf00      	nop
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	200010d4 	.word	0x200010d4
 80065f0:	200010cc 	.word	0x200010cc

080065f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006600:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <prvHeapInit+0xac>)
 8006602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00c      	beq.n	8006628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3307      	adds	r3, #7
 8006612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0307 	bic.w	r3, r3, #7
 800661a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <prvHeapInit+0xac>)
 8006624:	4413      	add	r3, r2
 8006626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800662c:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <prvHeapInit+0xb0>)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <prvHeapInit+0xb0>)
 8006634:	2200      	movs	r2, #0
 8006636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4413      	add	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006640:	2208      	movs	r2, #8
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <prvHeapInit+0xb4>)
 8006654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <prvHeapInit+0xb4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800665e:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <prvHeapInit+0xb4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <prvHeapInit+0xb4>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <prvHeapInit+0xb8>)
 8006682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <prvHeapInit+0xbc>)
 800668a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800668c:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <prvHeapInit+0xc0>)
 800668e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	20000cc0 	.word	0x20000cc0
 80066a4:	200010c0 	.word	0x200010c0
 80066a8:	200010c8 	.word	0x200010c8
 80066ac:	200010d0 	.word	0x200010d0
 80066b0:	200010cc 	.word	0x200010cc
 80066b4:	200010d4 	.word	0x200010d4

080066b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066c0:	4b28      	ldr	r3, [pc, #160]	; (8006764 <prvInsertBlockIntoFreeList+0xac>)
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e002      	b.n	80066cc <prvInsertBlockIntoFreeList+0x14>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d8f7      	bhi.n	80066c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4413      	add	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d108      	bne.n	80066fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	441a      	add	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d118      	bne.n	8006740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b15      	ldr	r3, [pc, #84]	; (8006768 <prvInsertBlockIntoFreeList+0xb0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d00d      	beq.n	8006736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e008      	b.n	8006748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <prvInsertBlockIntoFreeList+0xb0>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e003      	b.n	8006748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d002      	beq.n	8006756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	200010c0 	.word	0x200010c0
 8006768:	200010c8 	.word	0x200010c8

0800676c <__libc_init_array>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4d0d      	ldr	r5, [pc, #52]	; (80067a4 <__libc_init_array+0x38>)
 8006770:	4c0d      	ldr	r4, [pc, #52]	; (80067a8 <__libc_init_array+0x3c>)
 8006772:	1b64      	subs	r4, r4, r5
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	2600      	movs	r6, #0
 8006778:	42a6      	cmp	r6, r4
 800677a:	d109      	bne.n	8006790 <__libc_init_array+0x24>
 800677c:	4d0b      	ldr	r5, [pc, #44]	; (80067ac <__libc_init_array+0x40>)
 800677e:	4c0c      	ldr	r4, [pc, #48]	; (80067b0 <__libc_init_array+0x44>)
 8006780:	f000 f8f2 	bl	8006968 <_init>
 8006784:	1b64      	subs	r4, r4, r5
 8006786:	10a4      	asrs	r4, r4, #2
 8006788:	2600      	movs	r6, #0
 800678a:	42a6      	cmp	r6, r4
 800678c:	d105      	bne.n	800679a <__libc_init_array+0x2e>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f855 3b04 	ldr.w	r3, [r5], #4
 8006794:	4798      	blx	r3
 8006796:	3601      	adds	r6, #1
 8006798:	e7ee      	b.n	8006778 <__libc_init_array+0xc>
 800679a:	f855 3b04 	ldr.w	r3, [r5], #4
 800679e:	4798      	blx	r3
 80067a0:	3601      	adds	r6, #1
 80067a2:	e7f2      	b.n	800678a <__libc_init_array+0x1e>
 80067a4:	08006a60 	.word	0x08006a60
 80067a8:	08006a60 	.word	0x08006a60
 80067ac:	08006a60 	.word	0x08006a60
 80067b0:	08006a64 	.word	0x08006a64

080067b4 <__retarget_lock_acquire_recursive>:
 80067b4:	4770      	bx	lr

080067b6 <__retarget_lock_release_recursive>:
 80067b6:	4770      	bx	lr

080067b8 <memcpy>:
 80067b8:	440a      	add	r2, r1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067c0:	d100      	bne.n	80067c4 <memcpy+0xc>
 80067c2:	4770      	bx	lr
 80067c4:	b510      	push	{r4, lr}
 80067c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ce:	4291      	cmp	r1, r2
 80067d0:	d1f9      	bne.n	80067c6 <memcpy+0xe>
 80067d2:	bd10      	pop	{r4, pc}

080067d4 <memset>:
 80067d4:	4402      	add	r2, r0
 80067d6:	4603      	mov	r3, r0
 80067d8:	4293      	cmp	r3, r2
 80067da:	d100      	bne.n	80067de <memset+0xa>
 80067dc:	4770      	bx	lr
 80067de:	f803 1b01 	strb.w	r1, [r3], #1
 80067e2:	e7f9      	b.n	80067d8 <memset+0x4>

080067e4 <cleanup_glue>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	460c      	mov	r4, r1
 80067e8:	6809      	ldr	r1, [r1, #0]
 80067ea:	4605      	mov	r5, r0
 80067ec:	b109      	cbz	r1, 80067f2 <cleanup_glue+0xe>
 80067ee:	f7ff fff9 	bl	80067e4 <cleanup_glue>
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067fa:	f000 b869 	b.w	80068d0 <_free_r>
	...

08006800 <_reclaim_reent>:
 8006800:	4b2c      	ldr	r3, [pc, #176]	; (80068b4 <_reclaim_reent+0xb4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4283      	cmp	r3, r0
 8006806:	b570      	push	{r4, r5, r6, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	d051      	beq.n	80068b0 <_reclaim_reent+0xb0>
 800680c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800680e:	b143      	cbz	r3, 8006822 <_reclaim_reent+0x22>
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d14a      	bne.n	80068ac <_reclaim_reent+0xac>
 8006816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006818:	6819      	ldr	r1, [r3, #0]
 800681a:	b111      	cbz	r1, 8006822 <_reclaim_reent+0x22>
 800681c:	4620      	mov	r0, r4
 800681e:	f000 f857 	bl	80068d0 <_free_r>
 8006822:	6961      	ldr	r1, [r4, #20]
 8006824:	b111      	cbz	r1, 800682c <_reclaim_reent+0x2c>
 8006826:	4620      	mov	r0, r4
 8006828:	f000 f852 	bl	80068d0 <_free_r>
 800682c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800682e:	b111      	cbz	r1, 8006836 <_reclaim_reent+0x36>
 8006830:	4620      	mov	r0, r4
 8006832:	f000 f84d 	bl	80068d0 <_free_r>
 8006836:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006838:	b111      	cbz	r1, 8006840 <_reclaim_reent+0x40>
 800683a:	4620      	mov	r0, r4
 800683c:	f000 f848 	bl	80068d0 <_free_r>
 8006840:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006842:	b111      	cbz	r1, 800684a <_reclaim_reent+0x4a>
 8006844:	4620      	mov	r0, r4
 8006846:	f000 f843 	bl	80068d0 <_free_r>
 800684a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800684c:	b111      	cbz	r1, 8006854 <_reclaim_reent+0x54>
 800684e:	4620      	mov	r0, r4
 8006850:	f000 f83e 	bl	80068d0 <_free_r>
 8006854:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006856:	b111      	cbz	r1, 800685e <_reclaim_reent+0x5e>
 8006858:	4620      	mov	r0, r4
 800685a:	f000 f839 	bl	80068d0 <_free_r>
 800685e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006860:	b111      	cbz	r1, 8006868 <_reclaim_reent+0x68>
 8006862:	4620      	mov	r0, r4
 8006864:	f000 f834 	bl	80068d0 <_free_r>
 8006868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800686a:	b111      	cbz	r1, 8006872 <_reclaim_reent+0x72>
 800686c:	4620      	mov	r0, r4
 800686e:	f000 f82f 	bl	80068d0 <_free_r>
 8006872:	69a3      	ldr	r3, [r4, #24]
 8006874:	b1e3      	cbz	r3, 80068b0 <_reclaim_reent+0xb0>
 8006876:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006878:	4620      	mov	r0, r4
 800687a:	4798      	blx	r3
 800687c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800687e:	b1b9      	cbz	r1, 80068b0 <_reclaim_reent+0xb0>
 8006880:	4620      	mov	r0, r4
 8006882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006886:	f7ff bfad 	b.w	80067e4 <cleanup_glue>
 800688a:	5949      	ldr	r1, [r1, r5]
 800688c:	b941      	cbnz	r1, 80068a0 <_reclaim_reent+0xa0>
 800688e:	3504      	adds	r5, #4
 8006890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006892:	2d80      	cmp	r5, #128	; 0x80
 8006894:	68d9      	ldr	r1, [r3, #12]
 8006896:	d1f8      	bne.n	800688a <_reclaim_reent+0x8a>
 8006898:	4620      	mov	r0, r4
 800689a:	f000 f819 	bl	80068d0 <_free_r>
 800689e:	e7ba      	b.n	8006816 <_reclaim_reent+0x16>
 80068a0:	680e      	ldr	r6, [r1, #0]
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 f814 	bl	80068d0 <_free_r>
 80068a8:	4631      	mov	r1, r6
 80068aa:	e7ef      	b.n	800688c <_reclaim_reent+0x8c>
 80068ac:	2500      	movs	r5, #0
 80068ae:	e7ef      	b.n	8006890 <_reclaim_reent+0x90>
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
 80068b2:	bf00      	nop
 80068b4:	20000010 	.word	0x20000010

080068b8 <__malloc_lock>:
 80068b8:	4801      	ldr	r0, [pc, #4]	; (80068c0 <__malloc_lock+0x8>)
 80068ba:	f7ff bf7b 	b.w	80067b4 <__retarget_lock_acquire_recursive>
 80068be:	bf00      	nop
 80068c0:	200010d8 	.word	0x200010d8

080068c4 <__malloc_unlock>:
 80068c4:	4801      	ldr	r0, [pc, #4]	; (80068cc <__malloc_unlock+0x8>)
 80068c6:	f7ff bf76 	b.w	80067b6 <__retarget_lock_release_recursive>
 80068ca:	bf00      	nop
 80068cc:	200010d8 	.word	0x200010d8

080068d0 <_free_r>:
 80068d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068d2:	2900      	cmp	r1, #0
 80068d4:	d044      	beq.n	8006960 <_free_r+0x90>
 80068d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068da:	9001      	str	r0, [sp, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f1a1 0404 	sub.w	r4, r1, #4
 80068e2:	bfb8      	it	lt
 80068e4:	18e4      	addlt	r4, r4, r3
 80068e6:	f7ff ffe7 	bl	80068b8 <__malloc_lock>
 80068ea:	4a1e      	ldr	r2, [pc, #120]	; (8006964 <_free_r+0x94>)
 80068ec:	9801      	ldr	r0, [sp, #4]
 80068ee:	6813      	ldr	r3, [r2, #0]
 80068f0:	b933      	cbnz	r3, 8006900 <_free_r+0x30>
 80068f2:	6063      	str	r3, [r4, #4]
 80068f4:	6014      	str	r4, [r2, #0]
 80068f6:	b003      	add	sp, #12
 80068f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068fc:	f7ff bfe2 	b.w	80068c4 <__malloc_unlock>
 8006900:	42a3      	cmp	r3, r4
 8006902:	d908      	bls.n	8006916 <_free_r+0x46>
 8006904:	6825      	ldr	r5, [r4, #0]
 8006906:	1961      	adds	r1, r4, r5
 8006908:	428b      	cmp	r3, r1
 800690a:	bf01      	itttt	eq
 800690c:	6819      	ldreq	r1, [r3, #0]
 800690e:	685b      	ldreq	r3, [r3, #4]
 8006910:	1949      	addeq	r1, r1, r5
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	e7ed      	b.n	80068f2 <_free_r+0x22>
 8006916:	461a      	mov	r2, r3
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	b10b      	cbz	r3, 8006920 <_free_r+0x50>
 800691c:	42a3      	cmp	r3, r4
 800691e:	d9fa      	bls.n	8006916 <_free_r+0x46>
 8006920:	6811      	ldr	r1, [r2, #0]
 8006922:	1855      	adds	r5, r2, r1
 8006924:	42a5      	cmp	r5, r4
 8006926:	d10b      	bne.n	8006940 <_free_r+0x70>
 8006928:	6824      	ldr	r4, [r4, #0]
 800692a:	4421      	add	r1, r4
 800692c:	1854      	adds	r4, r2, r1
 800692e:	42a3      	cmp	r3, r4
 8006930:	6011      	str	r1, [r2, #0]
 8006932:	d1e0      	bne.n	80068f6 <_free_r+0x26>
 8006934:	681c      	ldr	r4, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	6053      	str	r3, [r2, #4]
 800693a:	4421      	add	r1, r4
 800693c:	6011      	str	r1, [r2, #0]
 800693e:	e7da      	b.n	80068f6 <_free_r+0x26>
 8006940:	d902      	bls.n	8006948 <_free_r+0x78>
 8006942:	230c      	movs	r3, #12
 8006944:	6003      	str	r3, [r0, #0]
 8006946:	e7d6      	b.n	80068f6 <_free_r+0x26>
 8006948:	6825      	ldr	r5, [r4, #0]
 800694a:	1961      	adds	r1, r4, r5
 800694c:	428b      	cmp	r3, r1
 800694e:	bf04      	itt	eq
 8006950:	6819      	ldreq	r1, [r3, #0]
 8006952:	685b      	ldreq	r3, [r3, #4]
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	bf04      	itt	eq
 8006958:	1949      	addeq	r1, r1, r5
 800695a:	6021      	streq	r1, [r4, #0]
 800695c:	6054      	str	r4, [r2, #4]
 800695e:	e7ca      	b.n	80068f6 <_free_r+0x26>
 8006960:	b003      	add	sp, #12
 8006962:	bd30      	pop	{r4, r5, pc}
 8006964:	200010dc 	.word	0x200010dc

08006968 <_init>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	bf00      	nop
 800696c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696e:	bc08      	pop	{r3}
 8006970:	469e      	mov	lr, r3
 8006972:	4770      	bx	lr

08006974 <_fini>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	bf00      	nop
 8006978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697a:	bc08      	pop	{r3}
 800697c:	469e      	mov	lr, r3
 800697e:	4770      	bx	lr
