
bldc_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08008110  08008110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800821c  0800821c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800821c  0800821c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800821c  0800821c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001450  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200014c4  200014c4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df08  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003521  00000000  00000000  0003dfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  000414d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001578  00000000  00000000  00042b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003804  00000000  00000000  000440e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae7a  00000000  00000000  000478ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b78ad  00000000  00000000  00062766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a013  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006380  00000000  00000000  0011a064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080f8 	.word	0x080080f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080080f8 	.word	0x080080f8

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fd16 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82e 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 fa48 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 fa16 	bl	8000610 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001e4:	f000 f910 	bl	8000408 <MX_SPI1_Init>
  MX_TIM1_Init();
 80001e8:	f000 f94c 	bl	8000484 <MX_TIM1_Init>
  MX_ADC1_Init();
 80001ec:	f000 f88e 	bl	800030c <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80001f0:	f000 f87f 	bl	80002f2 <MX_NVIC_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f004 ffe0 	bl	80051b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f8:	4a09      	ldr	r2, [pc, #36]	; (8000220 <main+0x50>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0x54>)
 80001fe:	f005 f843 	bl	8005288 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <main+0x58>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <main+0x5c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x60>)
 800020e:	f005 f83b 	bl	8005288 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a07      	ldr	r2, [pc, #28]	; (8000234 <main+0x64>)
 8000216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f005 f802 	bl	8005220 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x4c>
 800021e:	bf00      	nop
 8000220:	0800813c 	.word	0x0800813c
 8000224:	08000705 	.word	0x08000705
 8000228:	20000218 	.word	0x20000218
 800022c:	08008160 	.word	0x08008160
 8000230:	0800075d 	.word	0x0800075d
 8000234:	200003d8 	.word	0x200003d8

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b096      	sub	sp, #88	; 0x58
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f007 fe8c 	bl	8007f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 031c 	add.w	r3, r7, #28
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]
 800026a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	2310      	movs	r3, #16
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027c:	2300      	movs	r3, #0
 800027e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000280:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000284:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fd3a 	bl	8001d04 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000296:	f000 faab 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b0:	f107 031c 	add.w	r3, r7, #28
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fd62 	bl	8002d80 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002c2:	f000 fa95 	bl	80007f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 80002c6:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80002ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80002d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 ff86 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002e6:	f000 fa83 	bl	80007f0 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3758      	adds	r7, #88	; 0x58
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2105      	movs	r1, #5
 80002fa:	201b      	movs	r0, #27
 80002fc:	f001 fb41 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000300:	201b      	movs	r0, #27
 8000302:	f001 fb5a 	bl	80019ba <HAL_NVIC_EnableIRQ>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08a      	sub	sp, #40	; 0x28
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
 800032c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800032e:	4b35      	ldr	r3, [pc, #212]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000330:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000334:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000336:	4b33      	ldr	r3, [pc, #204]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <MX_ADC1_Init+0xf8>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000342:	4b30      	ldr	r3, [pc, #192]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000344:	2201      	movs	r2, #1
 8000346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <MX_ADC1_Init+0xf8>)
 800034a:	2200      	movs	r2, #0
 800034c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800034e:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000350:	2201      	movs	r2, #1
 8000352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000356:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000358:	2201      	movs	r2, #1
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b29      	ldr	r3, [pc, #164]	; (8000404 <MX_ADC1_Init+0xf8>)
 800035e:	2200      	movs	r2, #0
 8000360:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000362:	4b28      	ldr	r3, [pc, #160]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000364:	2201      	movs	r2, #1
 8000366:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000368:	4b26      	ldr	r3, [pc, #152]	; (8000404 <MX_ADC1_Init+0xf8>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000370:	2202      	movs	r2, #2
 8000372:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000376:	2200      	movs	r2, #0
 8000378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_ADC1_Init+0xf8>)
 800037e:	2204      	movs	r2, #4
 8000380:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000382:	4b20      	ldr	r3, [pc, #128]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000384:	2200      	movs	r2, #0
 8000386:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_ADC1_Init+0xf8>)
 800038a:	2200      	movs	r2, #0
 800038c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038e:	481d      	ldr	r0, [pc, #116]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000390:	f000 fc9e 	bl	8000cd0 <HAL_ADC_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800039a:	f000 fa29 	bl	80007f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800039e:	2300      	movs	r3, #0
 80003a0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003a2:	f107 031c 	add.w	r3, r7, #28
 80003a6:	4619      	mov	r1, r3
 80003a8:	4816      	ldr	r0, [pc, #88]	; (8000404 <MX_ADC1_Init+0xf8>)
 80003aa:	f001 f8e3 	bl	8001574 <HAL_ADCEx_MultiModeConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003b4:	f000 fa1c 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b8:	2301      	movs	r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003bc:	2301      	movs	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <MX_ADC1_Init+0xf8>)
 80003d6:	f000 fe0d 	bl	8000ff4 <HAL_ADC_ConfigChannel>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80003e0:	f000 fa06 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003e4:	2302      	movs	r3, #2
 80003e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_ADC1_Init+0xf8>)
 80003ee:	f000 fe01 	bl	8000ff4 <HAL_ADC_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80003f8:	f000 f9fa 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3728      	adds	r7, #40	; 0x28
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000090 	.word	0x20000090

08000408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_SPI1_Init+0x74>)
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_SPI1_Init+0x78>)
 8000410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_SPI1_Init+0x74>)
 8000414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_SPI1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000420:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_SPI1_Init+0x74>)
 8000422:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000426:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_SPI1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042e:	4b13      	ldr	r3, [pc, #76]	; (800047c <MX_SPI1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_SPI1_Init+0x74>)
 8000436:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800043a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_SPI1_Init+0x74>)
 800043e:	2220      	movs	r2, #32
 8000440:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_SPI1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_SPI1_Init+0x74>)
 8000456:	2207      	movs	r2, #7
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_SPI1_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_SPI1_Init+0x74>)
 8000462:	2208      	movs	r2, #8
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_SPI1_Init+0x74>)
 8000468:	f002 ffe6 	bl	8003438 <HAL_SPI_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000472:	f000 f9bd 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000e0 	.word	0x200000e0
 8000480:	40013000 	.word	0x40013000

08000484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09a      	sub	sp, #104	; 0x68
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
 80004b4:	615a      	str	r2, [r3, #20]
 80004b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	222c      	movs	r2, #44	; 0x2c
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f007 fd50 	bl	8007f64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004c4:	4b50      	ldr	r3, [pc, #320]	; (8000608 <MX_TIM1_Init+0x184>)
 80004c6:	4a51      	ldr	r2, [pc, #324]	; (800060c <MX_TIM1_Init+0x188>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ca:	4b4f      	ldr	r3, [pc, #316]	; (8000608 <MX_TIM1_Init+0x184>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80004d0:	4b4d      	ldr	r3, [pc, #308]	; (8000608 <MX_TIM1_Init+0x184>)
 80004d2:	2260      	movs	r2, #96	; 0x60
 80004d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2560;
 80004d6:	4b4c      	ldr	r3, [pc, #304]	; (8000608 <MX_TIM1_Init+0x184>)
 80004d8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80004dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	4b4a      	ldr	r3, [pc, #296]	; (8000608 <MX_TIM1_Init+0x184>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004e4:	4b48      	ldr	r3, [pc, #288]	; (8000608 <MX_TIM1_Init+0x184>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ea:	4b47      	ldr	r3, [pc, #284]	; (8000608 <MX_TIM1_Init+0x184>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004f0:	4845      	ldr	r0, [pc, #276]	; (8000608 <MX_TIM1_Init+0x184>)
 80004f2:	f003 f844 	bl	800357e <HAL_TIM_Base_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004fc:	f000 f978 	bl	80007f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000504:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800050a:	4619      	mov	r1, r3
 800050c:	483e      	ldr	r0, [pc, #248]	; (8000608 <MX_TIM1_Init+0x184>)
 800050e:	f003 fc0f 	bl	8003d30 <HAL_TIM_ConfigClockSource>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000518:	f000 f96a 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800051c:	483a      	ldr	r0, [pc, #232]	; (8000608 <MX_TIM1_Init+0x184>)
 800051e:	f003 f885 	bl	800362c <HAL_TIM_PWM_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000528:	f000 f962 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000530:	2300      	movs	r3, #0
 8000532:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000538:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800053c:	4619      	mov	r1, r3
 800053e:	4832      	ldr	r0, [pc, #200]	; (8000608 <MX_TIM1_Init+0x184>)
 8000540:	f004 f976 	bl	8004830 <HAL_TIMEx_MasterConfigSynchronization>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800054a:	f000 f951 	bl	80007f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054e:	2360      	movs	r3, #96	; 0x60
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000558:	2300      	movs	r3, #0
 800055a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800055c:	2300      	movs	r3, #0
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	4824      	ldr	r0, [pc, #144]	; (8000608 <MX_TIM1_Init+0x184>)
 8000576:	f003 fac7 	bl	8003b08 <HAL_TIM_PWM_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000580:	f000 f936 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000588:	2204      	movs	r2, #4
 800058a:	4619      	mov	r1, r3
 800058c:	481e      	ldr	r0, [pc, #120]	; (8000608 <MX_TIM1_Init+0x184>)
 800058e:	f003 fabb 	bl	8003b08 <HAL_TIM_PWM_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000598:	f000 f92a 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800059c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a0:	2208      	movs	r2, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	4818      	ldr	r0, [pc, #96]	; (8000608 <MX_TIM1_Init+0x184>)
 80005a6:	f003 faaf 	bl	8003b08 <HAL_TIM_PWM_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80005b0:	f000 f91e 	bl	80007f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <MX_TIM1_Init+0x184>)
 80005ea:	f004 f98f 	bl	800490c <HAL_TIMEx_ConfigBreakDeadTime>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80005f4:	f000 f8fc 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <MX_TIM1_Init+0x184>)
 80005fa:	f000 f9e3 	bl	80009c4 <HAL_TIM_MspPostInit>

}
 80005fe:	bf00      	nop
 8000600:	3768      	adds	r7, #104	; 0x68
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000144 	.word	0x20000144
 800060c:	40012c00 	.word	0x40012c00

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_USART2_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800061c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000654:	f004 fa15 	bl	8004a82 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f8c7 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000190 	.word	0x20000190
 800066c:	40004400 	.word	0x40004400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <MX_GPIO_Init+0x8c>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_GPIO_Init+0x8c>)
 800068c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_GPIO_Init+0x8c>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2108      	movs	r1, #8
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x90>)
 80006d4:	f001 fafe 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006d8:	2308      	movs	r3, #8
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x90>)
 80006f0:	f001 f97e 	bl	80019f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400

08000704 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Start the system here */
	/* Initial all variables */
	Vdc_adc = 0;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <StartDefaultTask+0x44>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	I1_adc = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <StartDefaultTask+0x48>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
	I2_adc = 0;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <StartDefaultTask+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]

	/* Starting interrupt (just for demo) */
	  TIM1->CCR1 = 5;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <StartDefaultTask+0x50>)
 8000720:	2205      	movs	r2, #5
 8000722:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->DIER |= TIM_DIER_CC1IE_Msk;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <StartDefaultTask+0x50>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <StartDefaultTask+0x50>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	60d3      	str	r3, [r2, #12]
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000730:	2100      	movs	r1, #0
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <StartDefaultTask+0x54>)
 8000734:	f002 ffdc 	bl	80036f0 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000738:	2100      	movs	r1, #0
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <StartDefaultTask+0x54>)
 800073c:	f003 ffd2 	bl	80046e4 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f004 fe4b 	bl	80053dc <osDelay>
 8000746:	e7fb      	b.n	8000740 <StartDefaultTask+0x3c>
 8000748:	20000598 	.word	0x20000598
 800074c:	2000059c 	.word	0x2000059c
 8000750:	200005a0 	.word	0x200005a0
 8000754:	40012c00 	.word	0x40012c00
 8000758:	20000144 	.word	0x20000144

0800075c <StartADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
        // Bits in this RTOS task's notification value are set by the notifying
        // tasks and interrupts to indicate which events have occurred. */
        xTaskNotifyWait( 0x00,      /* Don't clear any notification bits on entry. */
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <StartADCTask+0x84>)
 800076a:	f04f 31ff 	mov.w	r1, #4294967295
 800076e:	2000      	movs	r0, #0
 8000770:	f006 fb06 	bl	8006d80 <xTaskNotifyWait>
                         ULONG_MAX, /* Reset the notification value to 0 on exit. */
                         &ulNotifiedValue, /* Notified value pass out in
                                           ulNotifiedValue. */
                         portMAX_DELAY );  /* Block indefinitely. */
		current_cnt = TIM1->CNT;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <StartADCTask+0x88>)
 8000776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000778:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <StartADCTask+0x8c>)
 800077a:	6013      	str	r3, [r2, #0]
		while(current_cnt == TIM1->CNT);	// Wait until CNT change
 800077c:	bf00      	nop
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <StartADCTask+0x88>)
 8000780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <StartADCTask+0x8c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d0f9      	beq.n	800077e <StartADCTask+0x22>
		if(current_cnt < TIM1->CNT)
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <StartADCTask+0x88>)
 800078c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <StartADCTask+0x8c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d911      	bls.n	80007ba <StartADCTask+0x5e>
		{
			current_cnt -= 2;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <StartADCTask+0x8c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3b02      	subs	r3, #2
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <StartADCTask+0x8c>)
 800079e:	6013      	str	r3, [r2, #0]
			while(current_cnt > TIM1->CNT);	// Wait for 2 timer counting
 80007a0:	bf00      	nop
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <StartADCTask+0x88>)
 80007a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <StartADCTask+0x8c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d3f9      	bcc.n	80007a2 <StartADCTask+0x46>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <StartADCTask+0x90>)
 80007b4:	f001 fa8e 	bl	8001cd4 <HAL_GPIO_WritePin>
 80007b8:	e7d4      	b.n	8000764 <StartADCTask+0x8>
		}
		else
		{
			current_cnt += 2;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <StartADCTask+0x8c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3302      	adds	r3, #2
 80007c0:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <StartADCTask+0x8c>)
 80007c2:	6013      	str	r3, [r2, #0]
			while(current_cnt < TIM1->CNT);	// Wait for 2 timer counting
 80007c4:	bf00      	nop
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <StartADCTask+0x88>)
 80007c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <StartADCTask+0x8c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d8f9      	bhi.n	80007c6 <StartADCTask+0x6a>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2108      	movs	r1, #8
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <StartADCTask+0x90>)
 80007d8:	f001 fa7c 	bl	8001cd4 <HAL_GPIO_WritePin>
        xTaskNotifyWait( 0x00,      /* Don't clear any notification bits on entry. */
 80007dc:	e7c2      	b.n	8000764 <StartADCTask+0x8>
 80007de:	bf00      	nop
 80007e0:	200005a4 	.word	0x200005a4
 80007e4:	40012c00 	.word	0x40012c00
 80007e8:	200005a8 	.word	0x200005a8
 80007ec:	48000400 	.word	0x48000400

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_MspInit+0x4c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <HAL_MspInit+0x4c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_MspInit+0x4c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x4c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x4c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	210f      	movs	r1, #15
 8000836:	f06f 0001 	mvn.w	r0, #1
 800083a:	f001 f8a2 	bl	8001982 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800086c:	d124      	bne.n	80008b8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_ADC_MspInit+0x74>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <HAL_ADC_MspInit+0x74>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_ADC_MspInit+0x74>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_ADC_MspInit+0x74>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_ADC_MspInit+0x74>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_ADC_MspInit+0x74>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800089e:	2303      	movs	r3, #3
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a2:	2303      	movs	r3, #3
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f001 f89c 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a25      	ldr	r2, [pc, #148]	; (8000978 <HAL_SPI_MspInit+0xb4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d144      	bne.n	8000970 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <HAL_SPI_MspInit+0xb8>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <HAL_SPI_MspInit+0xb8>)
 80008ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <HAL_SPI_MspInit+0xb8>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <HAL_SPI_MspInit+0xb8>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <HAL_SPI_MspInit+0xb8>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_SPI_MspInit+0xb8>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_SPI_MspInit+0xb8>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <HAL_SPI_MspInit+0xb8>)
 800091c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_SPI_MspInit+0xb8>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800092e:	2370      	movs	r3, #112	; 0x70
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800093e:	2305      	movs	r3, #5
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f001 f850 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000950:	2320      	movs	r3, #32
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000960:	2305      	movs	r3, #5
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <HAL_SPI_MspInit+0xbc>)
 800096c:	f001 f840 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40013000 	.word	0x40013000
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400

08000984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_TIM_Base_MspInit+0x38>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10b      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 800099c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a0:	6193      	str	r3, [r2, #24]
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40012c00 	.word	0x40012c00
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <HAL_TIM_MspPostInit+0xa0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d139      	bne.n	8000a5a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <HAL_TIM_MspPostInit+0xa4>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_TIM_MspPostInit+0xa4>)
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_TIM_MspPostInit+0xa4>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_TIM_MspPostInit+0xa4>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_TIM_MspPostInit+0xa4>)
 8000a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a08:	6153      	str	r3, [r2, #20]
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_TIM_MspPostInit+0xa4>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000a16:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a28:	2306      	movs	r3, #6
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 ffdb 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_TIM_MspPostInit+0xa8>)
 8000a56:	f000 ffcb 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40012c00 	.word	0x40012c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x80>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d129      	bne.n	8000ae6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ac2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 ff85 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40004400 	.word	0x40004400
 8000af4:	40021000 	.word	0x40021000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f8b2 	bl	8000c90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b2c:	f006 f89c 	bl	8006c68 <xTaskGetSchedulerState>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d001      	beq.n	8000b3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b36:	f006 ff77 	bl	8007a28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	static BaseType_t xHigherPriorityTaskWoken;
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b46:	480d      	ldr	r0, [pc, #52]	; (8000b7c <TIM1_CC_IRQHandler+0x3c>)
 8000b48:	f002 febe 	bl	80038c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
  xTaskNotifyFromISR( ADCTaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken );
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <TIM1_CC_IRQHandler+0x40>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <TIM1_CC_IRQHandler+0x44>)
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2300      	movs	r3, #0
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f006 f971 	bl	8006e40 <xTaskGenericNotifyFromISR>

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
  The macro used to do this is dependent on the port and may be called
  portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <TIM1_CC_IRQHandler+0x44>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d007      	beq.n	8000b76 <TIM1_CC_IRQHandler+0x36>
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <TIM1_CC_IRQHandler+0x48>)
 8000b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	f3bf 8f6f 	isb	sy
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000144 	.word	0x20000144
 8000b80:	200003d8 	.word	0x200003d8
 8000b84:	200005ac 	.word	0x200005ac
 8000b88:	e000ed04 	.word	0xe000ed04

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f007 f98d 	bl	8007efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff faf5 	bl	80001d0 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bf4:	08008224 	.word	0x08008224
  ldr r2, =_sbss
 8000bf8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bfc:	200014c4 	.word	0x200014c4

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 fea9 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fdec 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fec1 	bl	80019d6 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 fe89 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	200005b0 	.word	0x200005b0

08000cb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200005b0 	.word	0x200005b0

08000cd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09a      	sub	sp, #104	; 0x68
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e172      	b.n	8000fd6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 0310 	and.w	r3, r3, #16
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d176      	bne.n	8000df0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d152      	bne.n	8000db0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fd91 	bl	800084c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d13b      	bne.n	8000db0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 fce1 	bl	8001700 <ADC_Disable>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d12f      	bne.n	8000db0 <HAL_ADC_Init+0xe0>
 8000d50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d12b      	bne.n	8000db0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d60:	f023 0302 	bic.w	r3, r3, #2
 8000d64:	f043 0202 	orr.w	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d7a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d8c:	4b94      	ldr	r3, [pc, #592]	; (8000fe0 <HAL_ADC_Init+0x310>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a94      	ldr	r2, [pc, #592]	; (8000fe4 <HAL_ADC_Init+0x314>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	0c9a      	lsrs	r2, r3, #18
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000da2:	e002      	b.n	8000daa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f9      	bne.n	8000da4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dcc:	d110      	bne.n	8000df0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f023 0312 	bic.w	r3, r3, #18
 8000dd6:	f043 0210 	orr.w	r2, r3, #16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f043 0201 	orr.w	r2, r3, #1
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f040 80df 	bne.w	8000fbc <HAL_ADC_Init+0x2ec>
 8000dfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80da 	bne.w	8000fbc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 80d2 	bne.w	8000fbc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e20:	f043 0202 	orr.w	r2, r3, #2
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e28:	4b6f      	ldr	r3, [pc, #444]	; (8000fe8 <HAL_ADC_Init+0x318>)
 8000e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e34:	d102      	bne.n	8000e3c <HAL_ADC_Init+0x16c>
 8000e36:	4b6d      	ldr	r3, [pc, #436]	; (8000fec <HAL_ADC_Init+0x31c>)
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e002      	b.n	8000e42 <HAL_ADC_Init+0x172>
 8000e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e40:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d108      	bne.n	8000e62 <HAL_ADC_Init+0x192>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d101      	bne.n	8000e62 <HAL_ADC_Init+0x192>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_ADC_Init+0x194>
 8000e62:	2300      	movs	r3, #0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d11c      	bne.n	8000ea2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e68:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d010      	beq.n	8000e90 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d107      	bne.n	8000e8a <HAL_ADC_Init+0x1ba>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_Init+0x1ba>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_ADC_Init+0x1bc>
 8000e8a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d108      	bne.n	8000ea2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ea0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7e5b      	ldrb	r3, [r3, #25]
 8000ea6:	035b      	lsls	r3, r3, #13
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000eac:	2a01      	cmp	r2, #1
 8000eae:	d002      	beq.n	8000eb6 <HAL_ADC_Init+0x1e6>
 8000eb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb4:	e000      	b.n	8000eb8 <HAL_ADC_Init+0x1e8>
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d11b      	bne.n	8000f0e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7e5b      	ldrb	r3, [r3, #25]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d109      	bne.n	8000ef2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	045a      	lsls	r2, r3, #17
 8000ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eee:	663b      	str	r3, [r7, #96]	; 0x60
 8000ef0:	e00d      	b.n	8000f0e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000efa:	f043 0220 	orr.w	r2, r3, #32
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d007      	beq.n	8000f26 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f22:	4313      	orrs	r3, r2
 8000f24:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 030c 	and.w	r3, r3, #12
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d114      	bne.n	8000f5e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f42:	f023 0302 	bic.w	r3, r3, #2
 8000f46:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7e1b      	ldrb	r3, [r3, #24]
 8000f4c:	039a      	lsls	r2, r3, #14
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <HAL_ADC_Init+0x320>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10c      	bne.n	8000f94 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f023 010f 	bic.w	r1, r3, #15
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	1e5a      	subs	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	631a      	str	r2, [r3, #48]	; 0x30
 8000f92:	e007      	b.n	8000fa4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 020f 	bic.w	r2, r2, #15
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	f043 0201 	orr.w	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fba:	e00a      	b.n	8000fd2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f023 0312 	bic.w	r3, r3, #18
 8000fc4:	f043 0210 	orr.w	r2, r3, #16
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000fd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3768      	adds	r7, #104	; 0x68
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	431bde83 	.word	0x431bde83
 8000fe8:	50000300 	.word	0x50000300
 8000fec:	50000100 	.word	0x50000100
 8000ff0:	fff0c007 	.word	0xfff0c007

08000ff4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b09b      	sub	sp, #108	; 0x6c
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_ADC_ConfigChannel+0x22>
 8001012:	2302      	movs	r3, #2
 8001014:	e2a4      	b.n	8001560 <HAL_ADC_ConfigChannel+0x56c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 8288 	bne.w	800153e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d81c      	bhi.n	8001070 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	461a      	mov	r2, r3
 800104a:	231f      	movs	r3, #31
 800104c:	4093      	lsls	r3, r2
 800104e:	43db      	mvns	r3, r3
 8001050:	4019      	ands	r1, r3
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa00 f203 	lsl.w	r2, r0, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
 800106e:	e063      	b.n	8001138 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b09      	cmp	r3, #9
 8001076:	d81e      	bhi.n	80010b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	3b1e      	subs	r3, #30
 800108c:	221f      	movs	r2, #31
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	4019      	ands	r1, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	3b1e      	subs	r3, #30
 80010a8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
 80010b4:	e040      	b.n	8001138 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b0e      	cmp	r3, #14
 80010bc:	d81e      	bhi.n	80010fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	3b3c      	subs	r3, #60	; 0x3c
 80010d2:	221f      	movs	r2, #31
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	4019      	ands	r1, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	3b3c      	subs	r3, #60	; 0x3c
 80010ee:	fa00 f203 	lsl.w	r2, r0, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
 80010fa:	e01d      	b.n	8001138 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	3b5a      	subs	r3, #90	; 0x5a
 8001110:	221f      	movs	r2, #31
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	4019      	ands	r1, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	3b5a      	subs	r3, #90	; 0x5a
 800112c:	fa00 f203 	lsl.w	r2, r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
 8001142:	2b00      	cmp	r3, #0
 8001144:	f040 80e5 	bne.w	8001312 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b09      	cmp	r3, #9
 800114e:	d91c      	bls.n	800118a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6999      	ldr	r1, [r3, #24]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	3b1e      	subs	r3, #30
 8001162:	2207      	movs	r2, #7
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	4019      	ands	r1, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	6898      	ldr	r0, [r3, #8]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	3b1e      	subs	r3, #30
 800117c:	fa00 f203 	lsl.w	r2, r0, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	e019      	b.n	80011be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6959      	ldr	r1, [r3, #20]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	2207      	movs	r2, #7
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4019      	ands	r1, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6898      	ldr	r0, [r3, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	fa00 f203 	lsl.w	r2, r0, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	3b01      	subs	r3, #1
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d84f      	bhi.n	8001280 <HAL_ADC_ConfigChannel+0x28c>
 80011e0:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	080011f9 	.word	0x080011f9
 80011ec:	0800121b 	.word	0x0800121b
 80011f0:	0800123d 	.word	0x0800123d
 80011f4:	0800125f 	.word	0x0800125f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011fe:	4b94      	ldr	r3, [pc, #592]	; (8001450 <HAL_ADC_ConfigChannel+0x45c>)
 8001200:	4013      	ands	r3, r2
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	0691      	lsls	r1, r2, #26
 8001208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800120a:	430a      	orrs	r2, r1
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001216:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001218:	e07e      	b.n	8001318 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001220:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <HAL_ADC_ConfigChannel+0x45c>)
 8001222:	4013      	ands	r3, r2
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	0691      	lsls	r1, r2, #26
 800122a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800122c:	430a      	orrs	r2, r1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001238:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800123a:	e06d      	b.n	8001318 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001242:	4b83      	ldr	r3, [pc, #524]	; (8001450 <HAL_ADC_ConfigChannel+0x45c>)
 8001244:	4013      	ands	r3, r2
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	0691      	lsls	r1, r2, #26
 800124c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800124e:	430a      	orrs	r2, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800125a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800125c:	e05c      	b.n	8001318 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001264:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <HAL_ADC_ConfigChannel+0x45c>)
 8001266:	4013      	ands	r3, r2
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	0691      	lsls	r1, r2, #26
 800126e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001270:	430a      	orrs	r2, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800127c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800127e:	e04b      	b.n	8001318 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	069b      	lsls	r3, r3, #26
 8001290:	429a      	cmp	r2, r3
 8001292:	d107      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012a2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80012aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	069b      	lsls	r3, r3, #26
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d107      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012c6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	069b      	lsls	r3, r3, #26
 80012d8:	429a      	cmp	r2, r3
 80012da:	d107      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012ea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	069b      	lsls	r3, r3, #26
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d10a      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800130e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001310:	e001      	b.n	8001316 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001312:	bf00      	nop
 8001314:	e000      	b.n	8001318 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001316:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d108      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x344>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x344>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_ADC_ConfigChannel+0x346>
 8001338:	2300      	movs	r3, #0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 810a 	bne.w	8001554 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d00f      	beq.n	8001368 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	400a      	ands	r2, r1
 8001362:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001366:	e049      	b.n	80013fc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	409a      	lsls	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b09      	cmp	r3, #9
 8001388:	d91c      	bls.n	80013c4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6999      	ldr	r1, [r3, #24]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	3b1b      	subs	r3, #27
 800139c:	2207      	movs	r2, #7
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	4019      	ands	r1, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	6898      	ldr	r0, [r3, #8]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	3b1b      	subs	r3, #27
 80013b6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	619a      	str	r2, [r3, #24]
 80013c2:	e01b      	b.n	80013fc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6959      	ldr	r1, [r3, #20]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	2207      	movs	r2, #7
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	4019      	ands	r1, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	6898      	ldr	r0, [r3, #8]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	fa00 f203 	lsl.w	r2, r0, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_ADC_ConfigChannel+0x460>)
 80013fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d105      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001410:	2b00      	cmp	r3, #0
 8001412:	d015      	beq.n	8001440 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001418:	2b11      	cmp	r3, #17
 800141a:	d105      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800141c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800142c:	2b12      	cmp	r3, #18
 800142e:	f040 8091 	bne.w	8001554 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 808a 	bne.w	8001554 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001448:	d108      	bne.n	800145c <HAL_ADC_ConfigChannel+0x468>
 800144a:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_ADC_ConfigChannel+0x464>)
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e008      	b.n	8001462 <HAL_ADC_ConfigChannel+0x46e>
 8001450:	83fff000 	.word	0x83fff000
 8001454:	50000300 	.word	0x50000300
 8001458:	50000100 	.word	0x50000100
 800145c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001460:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d108      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x48e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x48e>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_ADC_ConfigChannel+0x490>
 8001482:	2300      	movs	r3, #0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d150      	bne.n	800152a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001488:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d010      	beq.n	80014b0 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x4b6>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x4b6>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_ADC_ConfigChannel+0x4b8>
 80014aa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d13c      	bne.n	800152a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d11d      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x500>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c0:	d118      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014cc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_ADC_ConfigChannel+0x578>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a27      	ldr	r2, [pc, #156]	; (8001570 <HAL_ADC_ConfigChannel+0x57c>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	0c9a      	lsrs	r2, r3, #18
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e4:	e002      	b.n	80014ec <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f9      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014f2:	e02e      	b.n	8001552 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d10b      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x520>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001504:	d106      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800150e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001510:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001512:	e01e      	b.n	8001552 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b12      	cmp	r3, #18
 800151a:	d11a      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001526:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001528:	e013      	b.n	8001552 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f043 0220 	orr.w	r2, r3, #32
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800153c:	e00a      	b.n	8001554 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f043 0220 	orr.w	r2, r3, #32
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001550:	e000      	b.n	8001554 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001552:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800155c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001560:	4618      	mov	r0, r3
 8001562:	376c      	adds	r7, #108	; 0x6c
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83

08001574 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001574:	b480      	push	{r7}
 8001576:	b099      	sub	sp, #100	; 0x64
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800158c:	d102      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800158e:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	e002      	b.n	800159a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001594:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001598:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0a2      	b.n	80016ea <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e09b      	b.n	80016ea <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d17f      	bne.n	80016c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d179      	bne.n	80016c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d4:	4b49      	ldr	r3, [pc, #292]	; (80016fc <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80015d6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d040      	beq.n	8001662 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f2:	035b      	lsls	r3, r3, #13
 80015f4:	430b      	orrs	r3, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015fa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d15c      	bne.n	80016dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800163e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001640:	2b00      	cmp	r3, #0
 8001642:	d14b      	bne.n	80016dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800164c:	f023 030f 	bic.w	r3, r3, #15
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	6811      	ldr	r1, [r2, #0]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	6892      	ldr	r2, [r2, #8]
 8001658:	430a      	orrs	r2, r1
 800165a:	431a      	orrs	r2, r3
 800165c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800165e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001660:	e03c      	b.n	80016dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800166a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800168e:	2300      	movs	r3, #0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d123      	bne.n	80016dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80016b0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d112      	bne.n	80016dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80016b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80016be:	f023 030f 	bic.w	r3, r3, #15
 80016c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016c4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016c6:	e009      	b.n	80016dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f043 0220 	orr.w	r2, r3, #32
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80016da:	e000      	b.n	80016de <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016dc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80016ea:	4618      	mov	r0, r3
 80016ec:	3764      	adds	r7, #100	; 0x64
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	50000100 	.word	0x50000100
 80016fc:	50000300 	.word	0x50000300

08001700 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b01      	cmp	r3, #1
 8001718:	d108      	bne.n	800172c <ADC_Disable+0x2c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <ADC_Disable+0x2c>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <ADC_Disable+0x2e>
 800172c:	2300      	movs	r3, #0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d047      	beq.n	80017c2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030d 	and.w	r3, r3, #13
 800173c:	2b01      	cmp	r3, #1
 800173e:	d10f      	bne.n	8001760 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0202 	orr.w	r2, r2, #2
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2203      	movs	r2, #3
 8001756:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001758:	f7ff faae 	bl	8000cb8 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800175e:	e029      	b.n	80017b4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f043 0210 	orr.w	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e023      	b.n	80017c4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800177c:	f7ff fa9c 	bl	8000cb8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d914      	bls.n	80017b4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d10d      	bne.n	80017b4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f043 0210 	orr.w	r2, r3, #16
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e007      	b.n	80017c4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d0dc      	beq.n	800177c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff29 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff3e 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff8e 	bl	80018c0 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5d 	bl	800186c <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff31 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fe:	e14e      	b.n	8001c9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8140 	beq.w	8001c98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d005      	beq.n	8001a30 <HAL_GPIO_Init+0x40>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 0201 	and.w	r2, r3, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d017      	beq.n	8001ace <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d123      	bne.n	8001b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0203 	and.w	r2, r3, #3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 809a 	beq.w	8001c98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b64:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b52      	ldr	r3, [pc, #328]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b7c:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ba6:	d013      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <HAL_GPIO_Init+0x2d4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00d      	beq.n	8001bcc <HAL_GPIO_Init+0x1dc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a45      	ldr	r2, [pc, #276]	; (8001cc8 <HAL_GPIO_Init+0x2d8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d007      	beq.n	8001bc8 <HAL_GPIO_Init+0x1d8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a44      	ldr	r2, [pc, #272]	; (8001ccc <HAL_GPIO_Init+0x2dc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_GPIO_Init+0x1d4>
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	e004      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	f002 0203 	and.w	r2, r2, #3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001be2:	4937      	ldr	r1, [pc, #220]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf0:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c14:	4a2e      	ldr	r2, [pc, #184]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c3e:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f aea9 	bne.w	8001a00 <HAL_GPIO_Init+0x10>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	48000c00 	.word	0x48000c00
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f001 b823 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 817d 	beq.w	800203a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d40:	4bbc      	ldr	r3, [pc, #752]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d00c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d4c:	4bb9      	ldr	r3, [pc, #740]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d15c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x10e>
 8001d58:	4bb6      	ldr	r3, [pc, #728]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d155      	bne.n	8001e12 <HAL_RCC_OscConfig+0x10e>
 8001d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_RCC_OscConfig+0x94>
 8001d92:	4ba8      	ldr	r3, [pc, #672]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	e015      	b.n	8001dc4 <HAL_RCC_OscConfig+0xc0>
 8001d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001db4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001dc0:	4b9c      	ldr	r3, [pc, #624]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dc8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001dcc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001dd0:	fa92 f2a2 	rbit	r2, r2
 8001dd4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001dd8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ddc:	fab2 f282 	clz	r2, r2
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f042 0220 	orr.w	r2, r2, #32
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f002 021f 	and.w	r2, r2, #31
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f202 	lsl.w	r2, r1, r2
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 811f 	beq.w	8002038 <HAL_RCC_OscConfig+0x334>
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 8116 	bne.w	8002038 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f000 bfaf 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12e>
 8001e24:	4b83      	ldr	r3, [pc, #524]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a82      	ldr	r2, [pc, #520]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e036      	b.n	8001ea0 <HAL_RCC_OscConfig+0x19c>
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x158>
 8001e42:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7b      	ldr	r2, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b79      	ldr	r3, [pc, #484]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a78      	ldr	r2, [pc, #480]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e021      	b.n	8001ea0 <HAL_RCC_OscConfig+0x19c>
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x184>
 8001e6e:	4b71      	ldr	r3, [pc, #452]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a70      	ldr	r2, [pc, #448]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b6e      	ldr	r3, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6d      	ldr	r2, [pc, #436]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x19c>
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a66      	ldr	r2, [pc, #408]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	f023 020f 	bic.w	r2, r3, #15
 8001ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	495f      	ldr	r1, [pc, #380]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d059      	beq.n	8001f7e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe fef5 	bl	8000cb8 <HAL_GetTick>
 8001ece:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7fe fef0 	bl	8000cb8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	; 0x64
 8001ee2:	d902      	bls.n	8001eea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f000 bf43 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>
 8001eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001efe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x218>
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e015      	b.n	8001f48 <HAL_RCC_OscConfig+0x244>
 8001f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f20:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f34:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f44:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f4c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f54:	fa92 f2a2 	rbit	r2, r2
 8001f58:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f5c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f60:	fab2 f282 	clz	r2, r2
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f002 021f 	and.w	r2, r2, #31
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ab      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x1d0>
 8001f7c:	e05d      	b.n	800203a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fe9b 	bl	8000cb8 <HAL_GetTick>
 8001f82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7fe fe96 	bl	8000cb8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b64      	cmp	r3, #100	; 0x64
 8001f96:	d902      	bls.n	8001f9e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	f000 bee9 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>
 8001f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2cc>
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e015      	b.n	8001ffc <HAL_RCC_OscConfig+0x2f8>
 8001fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCC_OscConfig+0x330>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002000:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002004:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002008:	fa92 f2a2 	rbit	r2, r2
 800200c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002010:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ab      	bne.n	8001f88 <HAL_RCC_OscConfig+0x284>
 8002030:	e003      	b.n	800203a <HAL_RCC_OscConfig+0x336>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 817d 	beq.w	800234a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002050:	4ba6      	ldr	r3, [pc, #664]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800205c:	4ba3      	ldr	r3, [pc, #652]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d172      	bne.n	800214e <HAL_RCC_OscConfig+0x44a>
 8002068:	4ba0      	ldr	r3, [pc, #640]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d16c      	bne.n	800214e <HAL_RCC_OscConfig+0x44a>
 8002074:	2302      	movs	r3, #2
 8002076:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002086:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3a0>
 800209e:	4b93      	ldr	r3, [pc, #588]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e013      	b.n	80020cc <HAL_RCC_OscConfig+0x3c8>
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020c8:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2202      	movs	r2, #2
 80020ce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020d6:	fa92 f2a2 	rbit	r2, r2
 80020da:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020de:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCC_OscConfig+0x410>
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d002      	beq.n	8002114 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	f000 be2e 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b75      	ldr	r3, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	21f8      	movs	r1, #248	; 0xf8
 800212a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002132:	fa91 f1a1 	rbit	r1, r1
 8002136:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800213a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800213e:	fab1 f181 	clz	r1, r1
 8002142:	b2c9      	uxtb	r1, r1
 8002144:	408b      	lsls	r3, r1
 8002146:	4969      	ldr	r1, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214c:	e0fd      	b.n	800234a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8088 	beq.w	8002270 <HAL_RCC_OscConfig+0x56c>
 8002160:	2301      	movs	r3, #1
 8002162:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002172:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	461a      	mov	r2, r3
 8002188:	2301      	movs	r3, #1
 800218a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fd94 	bl	8000cb8 <HAL_GetTick>
 8002190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002196:	f7fe fd8f 	bl	8000cb8 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d902      	bls.n	80021ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	f000 bde2 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>
 80021ac:	2302      	movs	r3, #2
 80021ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <HAL_RCC_OscConfig+0x4d8>
 80021d6:	4b45      	ldr	r3, [pc, #276]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	e013      	b.n	8002204 <HAL_RCC_OscConfig+0x500>
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2202      	movs	r2, #2
 8002206:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800220a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800220e:	fa92 f2a2 	rbit	r2, r2
 8002212:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002216:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f042 0220 	orr.w	r2, r2, #32
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f002 021f 	and.w	r2, r2, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f202 	lsl.w	r2, r1, r2
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0af      	beq.n	8002196 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	21f8      	movs	r1, #248	; 0xf8
 800224c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002254:	fa91 f1a1 	rbit	r1, r1
 8002258:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800225c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002260:	fab1 f181 	clz	r1, r1
 8002264:	b2c9      	uxtb	r1, r1
 8002266:	408b      	lsls	r3, r1
 8002268:	4920      	ldr	r1, [pc, #128]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
 800226e:	e06c      	b.n	800234a <HAL_RCC_OscConfig+0x646>
 8002270:	2301      	movs	r3, #1
 8002272:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002282:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	461a      	mov	r2, r3
 8002298:	2300      	movs	r3, #0
 800229a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe fd0c 	bl	8000cb8 <HAL_GetTick>
 80022a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a6:	f7fe fd07 	bl	8000cb8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d902      	bls.n	80022bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	f000 bd5a 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d104      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5ec>
 80022e6:	4b01      	ldr	r3, [pc, #4]	; (80022ec <HAL_RCC_OscConfig+0x5e8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e015      	b.n	8002318 <HAL_RCC_OscConfig+0x614>
 80022ec:	40021000 	.word	0x40021000
 80022f0:	2302      	movs	r3, #2
 80022f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002302:	2302      	movs	r3, #2
 8002304:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002308:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2202      	movs	r2, #2
 800231a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800231e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002322:	fa92 f2a2 	rbit	r2, r2
 8002326:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800232a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800232e:	fab2 f282 	clz	r2, r2
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f042 0220 	orr.w	r2, r2, #32
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f002 021f 	and.w	r2, r2, #31
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ad      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8110 	beq.w	8002580 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d079      	beq.n	8002464 <HAL_RCC_OscConfig+0x760>
 8002370:	2301      	movs	r3, #1
 8002372:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4bab      	ldr	r3, [pc, #684]	; (800263c <HAL_RCC_OscConfig+0x938>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7fe fc8d 	bl	8000cb8 <HAL_GetTick>
 800239e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a4:	f7fe fc88 	bl	8000cb8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d902      	bls.n	80023ba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	f000 bcdb 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>
 80023ba:	2302      	movs	r3, #2
 80023bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023d4:	2202      	movs	r2, #2
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023f8:	2202      	movs	r2, #2
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002412:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002414:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 8002416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002420:	2102      	movs	r1, #2
 8002422:	6019      	str	r1, [r3, #0]
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	fa93 f1a3 	rbit	r1, r3
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800243a:	6019      	str	r1, [r3, #0]
  return result;
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0a0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x6a0>
 8002462:	e08d      	b.n	8002580 <HAL_RCC_OscConfig+0x87c>
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002486:	601a      	str	r2, [r3, #0]
  return result;
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002490:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x938>)
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	2300      	movs	r3, #0
 80024a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fc07 	bl	8000cb8 <HAL_GetTick>
 80024aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe fc02 	bl	8000cb8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d902      	bls.n	80024c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	f000 bc55 	b.w	8002d70 <HAL_RCC_OscConfig+0x106c>
 80024c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024f2:	2202      	movs	r2, #2
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f2a3 	rbit	r2, r3
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002516:	2202      	movs	r2, #2
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002530:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 8002534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800253e:	2102      	movs	r1, #2
 8002540:	6019      	str	r1, [r3, #0]
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f1a3 	rbit	r1, r3
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002558:	6019      	str	r1, [r3, #0]
  return result;
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d197      	bne.n	80024b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 81a1 	beq.w	80028d8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259c:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b2:	61d3      	str	r3, [r2, #28]
 80025b4:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_RCC_OscConfig+0x93c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11a      	bne.n	8002618 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_RCC_OscConfig+0x93c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a16      	ldr	r2, [pc, #88]	; (8002640 <HAL_RCC_OscConfig+0x93c>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fb63 	bl	8000cb8 <HAL_GetTick>
 80025f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	e009      	b.n	800260c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f8:	f7fe fb5e 	bl	8000cb8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	; 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e3b1      	b.n	8002d70 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCC_OscConfig+0x93c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10d      	bne.n	8002644 <HAL_RCC_OscConfig+0x940>
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4a02      	ldr	r2, [pc, #8]	; (8002638 <HAL_RCC_OscConfig+0x934>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6213      	str	r3, [r2, #32]
 8002634:	e03c      	b.n	80026b0 <HAL_RCC_OscConfig+0x9ac>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	10908120 	.word	0x10908120
 8002640:	40007000 	.word	0x40007000
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x96a>
 8002654:	4bc1      	ldr	r3, [pc, #772]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4ac0      	ldr	r2, [pc, #768]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	4bbe      	ldr	r3, [pc, #760]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4abd      	ldr	r2, [pc, #756]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 8002666:	f023 0304 	bic.w	r3, r3, #4
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e020      	b.n	80026b0 <HAL_RCC_OscConfig+0x9ac>
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x994>
 800267e:	4bb7      	ldr	r3, [pc, #732]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4ab6      	ldr	r2, [pc, #728]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	4bb4      	ldr	r3, [pc, #720]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4ab3      	ldr	r2, [pc, #716]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6213      	str	r3, [r2, #32]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x9ac>
 8002698:	4bb0      	ldr	r3, [pc, #704]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4aaf      	ldr	r2, [pc, #700]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	4bad      	ldr	r3, [pc, #692]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4aac      	ldr	r2, [pc, #688]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8081 	beq.w	80027c4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7fe faf9 	bl	8000cb8 <HAL_GetTick>
 80026c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe faf4 	bl	8000cb8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e345      	b.n	8002d70 <HAL_RCC_OscConfig+0x106c>
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026ec:	2202      	movs	r2, #2
 80026ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002710:	2202      	movs	r2, #2
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800272a:	601a      	str	r2, [r3, #0]
  return result;
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002734:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d102      	bne.n	8002750 <HAL_RCC_OscConfig+0xa4c>
 800274a:	4b84      	ldr	r3, [pc, #528]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	e013      	b.n	8002778 <HAL_RCC_OscConfig+0xa74>
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002758:	2202      	movs	r2, #2
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	4b79      	ldr	r3, [pc, #484]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800277c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002780:	2102      	movs	r1, #2
 8002782:	6011      	str	r1, [r2, #0]
 8002784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002788:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	fa92 f1a2 	rbit	r1, r2
 8002792:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002796:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800279a:	6011      	str	r1, [r2, #0]
  return result;
 800279c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027a0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	fab2 f282 	clz	r2, r2
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	f002 021f 	and.w	r2, r2, #31
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f202 	lsl.w	r2, r1, r2
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d084      	beq.n	80026cc <HAL_RCC_OscConfig+0x9c8>
 80027c2:	e07f      	b.n	80028c4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fa78 	bl	8000cb8 <HAL_GetTick>
 80027c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	e00b      	b.n	80027e6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fa73 	bl	8000cb8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e2c4      	b.n	8002d70 <HAL_RCC_OscConfig+0x106c>
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027ee:	2202      	movs	r2, #2
 80027f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	fa93 f2a3 	rbit	r2, r3
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002812:	2202      	movs	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fa93 f2a3 	rbit	r2, r3
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800282c:	601a      	str	r2, [r3, #0]
  return result;
 800282e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002832:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002836:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d102      	bne.n	8002852 <HAL_RCC_OscConfig+0xb4e>
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	e013      	b.n	800287a <HAL_RCC_OscConfig+0xb76>
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800285a:	2202      	movs	r2, #2
 800285c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002882:	2102      	movs	r1, #2
 8002884:	6011      	str	r1, [r2, #0]
 8002886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800288a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	fa92 f1a2 	rbit	r1, r2
 8002894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002898:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800289c:	6011      	str	r1, [r2, #0]
  return result;
 800289e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	fab2 f282 	clz	r2, r2
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f002 021f 	and.w	r2, r2, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d184      	bne.n	80027ce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028cc:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 80028d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8242 	beq.w	8002d6e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_RCC_OscConfig+0xc58>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	f000 8213 	beq.w	8002d1e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b02      	cmp	r3, #2
 8002906:	f040 8162 	bne.w	8002bce <HAL_RCC_OscConfig+0xeca>
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002912:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800292e:	601a      	str	r2, [r3, #0]
  return result;
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002938:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	2300      	movs	r3, #0
 800294e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe f9b2 	bl	8000cb8 <HAL_GetTick>
 8002954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002958:	e00c      	b.n	8002974 <HAL_RCC_OscConfig+0xc70>
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe f9aa 	bl	8000cb8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1fd      	b.n	8002d70 <HAL_RCC_OscConfig+0x106c>
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800297c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002998:	601a      	str	r2, [r3, #0]
  return result;
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_RCC_OscConfig+0xcba>
 80029b8:	4bb0      	ldr	r3, [pc, #704]	; (8002c7c <HAL_RCC_OscConfig+0xf78>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e027      	b.n	8002a0e <HAL_RCC_OscConfig+0xd0a>
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	4b9c      	ldr	r3, [pc, #624]	; (8002c7c <HAL_RCC_OscConfig+0xf78>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a12:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a1a:	6011      	str	r1, [r2, #0]
 8002a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a20:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	fa92 f1a2 	rbit	r1, r2
 8002a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a32:	6011      	str	r1, [r2, #0]
  return result;
 8002a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a38:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	fab2 f282 	clz	r2, r2
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	f042 0220 	orr.w	r2, r2, #32
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	f002 021f 	and.w	r2, r2, #31
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f202 	lsl.w	r2, r1, r2
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d182      	bne.n	8002960 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5a:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0xf78>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	497f      	ldr	r1, [pc, #508]	; (8002c7c <HAL_RCC_OscConfig+0xf78>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002aa6:	601a      	str	r2, [r3, #0]
  return result;
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ab0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe f8f6 	bl	8000cb8 <HAL_GetTick>
 8002acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad0:	e009      	b.n	8002ae6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe f8f1 	bl	8000cb8 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e144      	b.n	8002d70 <HAL_RCC_OscConfig+0x106c>
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b0a:	601a      	str	r2, [r3, #0]
  return result;
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_OscConfig+0xe2c>
 8002b2a:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <HAL_RCC_OscConfig+0xf78>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	e027      	b.n	8002b80 <HAL_RCC_OscConfig+0xe7c>
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fa93 f2a3 	rbit	r2, r3
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_OscConfig+0xf78>)
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b84:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b8c:	6011      	str	r1, [r2, #0]
 8002b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b92:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	fa92 f1a2 	rbit	r1, r2
 8002b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ba4:	6011      	str	r1, [r2, #0]
  return result;
 8002ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002baa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	fab2 f282 	clz	r2, r2
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f042 0220 	orr.w	r2, r2, #32
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f002 021f 	and.w	r2, r2, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d082      	beq.n	8002ad2 <HAL_RCC_OscConfig+0xdce>
 8002bcc:	e0cf      	b.n	8002d6e <HAL_RCC_OscConfig+0x106a>
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	fa93 f2a3 	rbit	r2, r3
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bf2:	601a      	str	r2, [r3, #0]
  return result;
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bfc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe f850 	bl	8000cb8 <HAL_GetTick>
 8002c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1c:	e009      	b.n	8002c32 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fe f84b 	bl	8000cb8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e09e      	b.n	8002d70 <HAL_RCC_OscConfig+0x106c>
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c56:	601a      	str	r2, [r3, #0]
  return result;
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d104      	bne.n	8002c80 <HAL_RCC_OscConfig+0xf7c>
 8002c76:	4b01      	ldr	r3, [pc, #4]	; (8002c7c <HAL_RCC_OscConfig+0xf78>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e029      	b.n	8002cd0 <HAL_RCC_OscConfig+0xfcc>
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	fa93 f2a3 	rbit	r2, r3
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_OscConfig+0x1078>)
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cdc:	6011      	str	r1, [r2, #0]
 8002cde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	fa92 f1a2 	rbit	r1, r2
 8002cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cf4:	6011      	str	r1, [r2, #0]
  return result;
 8002cf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f042 0220 	orr.w	r2, r2, #32
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f002 021f 	and.w	r2, r2, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d180      	bne.n	8002c1e <HAL_RCC_OscConfig+0xf1a>
 8002d1c:	e027      	b.n	8002d6e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e01e      	b.n	8002d70 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_RCC_OscConfig+0x1078>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d10b      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000

08002d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b09e      	sub	sp, #120	; 0x78
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e162      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b90      	ldr	r3, [pc, #576]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b8d      	ldr	r3, [pc, #564]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	498b      	ldr	r1, [pc, #556]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b89      	ldr	r3, [pc, #548]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e14a      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	497f      	ldr	r1, [pc, #508]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80dc 	beq.w	8002fac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d13c      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xf6>
 8002dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xa6>
 8002e20:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	e00f      	b.n	8002e46 <HAL_RCC_ClockConfig+0xc6>
 8002e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	667b      	str	r3, [r7, #100]	; 0x64
 8002e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e38:	663b      	str	r3, [r7, #96]	; 0x60
 8002e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e42:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e4e:	fa92 f2a2 	rbit	r2, r2
 8002e52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d17b      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0f3      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d13c      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x178>
 8002e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x128>
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	e00f      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
 8002ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eba:	643b      	str	r3, [r7, #64]	; 0x40
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec4:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ecc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ed0:	fa92 f2a2 	rbit	r2, r2
 8002ed4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed8:	fab2 f282 	clz	r2, r2
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f002 021f 	and.w	r2, r2, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d13a      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b2      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x1a0>
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e00d      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1bc>
 8002f20:	2302      	movs	r3, #2
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	61ba      	str	r2, [r7, #24]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	fa92 f2a2 	rbit	r2, r2
 8002f46:	617a      	str	r2, [r7, #20]
  return result;
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0220 	orr.w	r2, r2, #32
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e079      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	491a      	ldr	r1, [pc, #104]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f7c:	f7fd fe9c 	bl	8000cb8 <HAL_GetTick>
 8002f80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f84:	f7fd fe98 	bl	8000cb8 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e061      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 020c 	and.w	r2, r3, #12
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d1eb      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d214      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 0207 	bic.w	r2, r3, #7
 8002fc2:	4906      	ldr	r1, [pc, #24]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e040      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	491a      	ldr	r1, [pc, #104]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4912      	ldr	r1, [pc, #72]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003022:	f000 f829 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003026:	4601      	mov	r1, r0
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003030:	22f0      	movs	r2, #240	; 0xf0
 8003032:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	fa92 f2a2 	rbit	r2, r2
 800303a:	60fa      	str	r2, [r7, #12]
  return result;
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	fab2 f282 	clz	r2, r2
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	40d3      	lsrs	r3, r2
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x2ec>)
 8003048:	5cd3      	ldrb	r3, [r2, r3]
 800304a:	fa21 f303 	lsr.w	r3, r1, r3
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <HAL_RCC_ClockConfig+0x2f0>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_RCC_ClockConfig+0x2f4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fdea 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3778      	adds	r7, #120	; 0x78
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	08008184 	.word	0x08008184
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b08b      	sub	sp, #44	; 0x2c
 800307c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003092:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x30>
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x36>
 80030a6:	e03c      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a8:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030aa:	623b      	str	r3, [r7, #32]
      break;
 80030ac:	e03c      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	fa92 f2a2 	rbit	r2, r2
 80030c0:	607a      	str	r2, [r7, #4]
  return result;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	40d3      	lsrs	r3, r2
 80030cc:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	220f      	movs	r2, #15
 80030dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	fa92 f2a2 	rbit	r2, r2
 80030e4:	60fa      	str	r2, [r7, #12]
  return result;
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fab2 f282 	clz	r2, r2
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	40d3      	lsrs	r3, r2
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	fbb2 f2f3 	udiv	r2, r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	e004      	b.n	800311c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	623b      	str	r3, [r7, #32]
      break;
 8003120:	e002      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003124:	623b      	str	r3, [r7, #32]
      break;
 8003126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003128:	6a3b      	ldr	r3, [r7, #32]
}
 800312a:	4618      	mov	r0, r3
 800312c:	372c      	adds	r7, #44	; 0x2c
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	007a1200 	.word	0x007a1200
 8003140:	0800819c 	.word	0x0800819c
 8003144:	080081ac 	.word	0x080081ac
 8003148:	003d0900 	.word	0x003d0900

0800314c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_RCC_GetHCLKFreq+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000

08003164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800316a:	f7ff ffef 	bl	800314c <HAL_RCC_GetHCLKFreq>
 800316e:	4601      	mov	r1, r0
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003178:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800317c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	fa92 f2a2 	rbit	r2, r2
 8003184:	603a      	str	r2, [r7, #0]
  return result;
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	40d3      	lsrs	r3, r2
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08008194 	.word	0x08008194

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031ae:	f7ff ffcd 	bl	800314c <HAL_RCC_GetHCLKFreq>
 80031b2:	4601      	mov	r1, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	fa92 f2a2 	rbit	r2, r2
 80031c8:	603a      	str	r2, [r7, #0]
  return result;
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	fab2 f282 	clz	r2, r2
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	40d3      	lsrs	r3, r2
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08008194 	.word	0x08008194

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b092      	sub	sp, #72	; 0x48
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80cd 	beq.w	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003210:	4b86      	ldr	r3, [pc, #536]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10e      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321c:	4b83      	ldr	r3, [pc, #524]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	4a82      	ldr	r2, [pc, #520]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003226:	61d3      	str	r3, [r2, #28]
 8003228:	4b80      	ldr	r3, [pc, #512]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	4b7d      	ldr	r3, [pc, #500]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d118      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003246:	4b7a      	ldr	r3, [pc, #488]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a79      	ldr	r2, [pc, #484]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003252:	f7fd fd31 	bl	8000cb8 <HAL_GetTick>
 8003256:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	e008      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325a:	f7fd fd2d 	bl	8000cb8 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b64      	cmp	r3, #100	; 0x64
 8003266:	d901      	bls.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0db      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326c:	4b70      	ldr	r3, [pc, #448]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003278:	4b6c      	ldr	r3, [pc, #432]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d07d      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003292:	429a      	cmp	r2, r3
 8003294:	d076      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003296:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	461a      	mov	r2, r3
 80032c0:	2301      	movs	r3, #1
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	4b55      	ldr	r3, [pc, #340]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	461a      	mov	r2, r3
 80032e4:	2300      	movs	r3, #0
 80032e6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032e8:	4a50      	ldr	r2, [pc, #320]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ec:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d045      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fd fcde 	bl	8000cb8 <HAL_GetTick>
 80032fc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	e00a      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fd fcda 	bl	8000cb8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e086      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003316:	2302      	movs	r3, #2
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	2302      	movs	r3, #2
 8003324:	623b      	str	r3, [r7, #32]
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	61fb      	str	r3, [r7, #28]
  return result;
 800332e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d102      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003344:	4b39      	ldr	r3, [pc, #228]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	e007      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800334a:	2302      	movs	r3, #2
 800334c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	4b35      	ldr	r3, [pc, #212]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2202      	movs	r2, #2
 800335c:	613a      	str	r2, [r7, #16]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	fa92 f2a2 	rbit	r2, r2
 8003364:	60fa      	str	r2, [r7, #12]
  return result;
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	fab2 f282 	clz	r2, r2
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	f002 021f 	and.w	r2, r2, #31
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0bd      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003384:	4b29      	ldr	r3, [pc, #164]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4926      	ldr	r1, [pc, #152]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003392:	4313      	orrs	r3, r2
 8003394:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003396:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	491a      	ldr	r1, [pc, #104]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d4:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f023 0210 	bic.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4912      	ldr	r1, [pc, #72]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	490b      	ldr	r1, [pc, #44]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003400:	4313      	orrs	r3, r2
 8003402:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800341e:	4313      	orrs	r3, r2
 8003420:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3748      	adds	r7, #72	; 0x48
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
 8003434:	10908100 	.word	0x10908100

08003438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e095      	b.n	8003576 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345a:	d009      	beq.n	8003470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
 8003462:	e005      	b.n	8003470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fa1a 	bl	80008c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034b0:	d902      	bls.n	80034b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e002      	b.n	80034be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034c6:	d007      	beq.n	80034d8 <HAL_SPI_Init+0xa0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	ea42 0103 	orr.w	r1, r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	f003 0204 	and.w	r2, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003554:	ea42 0103 	orr.w	r1, r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e049      	b.n	8003624 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd f9ed 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f000 fcb3 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e049      	b.n	80036d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f841 	bl	80036da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f000 fc5c 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start+0x24>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e03c      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d109      	bne.n	800372e <HAL_TIM_PWM_Start+0x3e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e02f      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start+0x58>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e022      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d109      	bne.n	8003762 <HAL_TIM_PWM_Start+0x72>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e015      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d109      	bne.n	800377c <HAL_TIM_PWM_Start+0x8c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e008      	b.n	800378e <HAL_TIM_PWM_Start+0x9e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e088      	b.n	80038a8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <HAL_TIM_PWM_Start+0xb6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a4:	e023      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Start+0xc6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b4:	e01b      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Start+0xd6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c4:	e013      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xe6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037d4:	e00b      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0xf6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e4:	e003      	b.n	80037ee <HAL_TIM_PWM_Start+0xfe>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2201      	movs	r2, #1
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 ff4e 	bl	8004698 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2b      	ldr	r2, [pc, #172]	; (80038b0 <HAL_TIM_PWM_Start+0x1c0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00e      	beq.n	8003824 <HAL_TIM_PWM_Start+0x134>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <HAL_TIM_PWM_Start+0x1c4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_TIM_PWM_Start+0x134>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <HAL_TIM_PWM_Start+0x1c8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_TIM_PWM_Start+0x134>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a27      	ldr	r2, [pc, #156]	; (80038bc <HAL_TIM_PWM_Start+0x1cc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <HAL_TIM_PWM_Start+0x138>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_TIM_PWM_Start+0x13a>
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_TIM_PWM_Start+0x1c0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_TIM_PWM_Start+0x176>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d009      	beq.n	8003866 <HAL_TIM_PWM_Start+0x176>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1a      	ldr	r2, [pc, #104]	; (80038c0 <HAL_TIM_PWM_Start+0x1d0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_TIM_PWM_Start+0x176>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <HAL_TIM_PWM_Start+0x1c4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d115      	bne.n	8003892 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_TIM_PWM_Start+0x1d4>)
 800386e:	4013      	ands	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b06      	cmp	r3, #6
 8003876:	d015      	beq.n	80038a4 <HAL_TIM_PWM_Start+0x1b4>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387e:	d011      	beq.n	80038a4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	e008      	b.n	80038a4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e000      	b.n	80038a6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40014400 	.word	0x40014400
 80038bc:	40014800 	.word	0x40014800
 80038c0:	40000400 	.word	0x40000400
 80038c4:	00010007 	.word	0x00010007

080038c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0202 	mvn.w	r2, #2
 80038f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 faed 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fadf 	bl	8003ed6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 faf0 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0204 	mvn.w	r2, #4
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fac3 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fab5 	bl	8003ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fac6 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d122      	bne.n	80039cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b08      	cmp	r3, #8
 8003992:	d11b      	bne.n	80039cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0208 	mvn.w	r2, #8
 800399c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa99 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa8b 	bl	8003ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fa9c 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d122      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d11b      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0210 	mvn.w	r2, #16
 80039f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2208      	movs	r2, #8
 80039f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa6f 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa61 	bl	8003ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fa72 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10e      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0201 	mvn.w	r2, #1
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa3b 	bl	8003ec2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d10e      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b80      	cmp	r3, #128	; 0x80
 8003a66:	d107      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 ffcc 	bl	8004a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a86:	d10e      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d107      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 ffbf 	bl	8004a24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d10e      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d107      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa20 	bl	8003f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d10e      	bne.n	8003afe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d107      	bne.n	8003afe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f06f 0220 	mvn.w	r2, #32
 8003af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 ff7f 	bl	80049fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e0ff      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b14      	cmp	r3, #20
 8003b32:	f200 80f0 	bhi.w	8003d16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003d17 	.word	0x08003d17
 8003b44:	08003d17 	.word	0x08003d17
 8003b48:	08003d17 	.word	0x08003d17
 8003b4c:	08003bd1 	.word	0x08003bd1
 8003b50:	08003d17 	.word	0x08003d17
 8003b54:	08003d17 	.word	0x08003d17
 8003b58:	08003d17 	.word	0x08003d17
 8003b5c:	08003c13 	.word	0x08003c13
 8003b60:	08003d17 	.word	0x08003d17
 8003b64:	08003d17 	.word	0x08003d17
 8003b68:	08003d17 	.word	0x08003d17
 8003b6c:	08003c53 	.word	0x08003c53
 8003b70:	08003d17 	.word	0x08003d17
 8003b74:	08003d17 	.word	0x08003d17
 8003b78:	08003d17 	.word	0x08003d17
 8003b7c:	08003c95 	.word	0x08003c95
 8003b80:	08003d17 	.word	0x08003d17
 8003b84:	08003d17 	.word	0x08003d17
 8003b88:	08003d17 	.word	0x08003d17
 8003b8c:	08003cd5 	.word	0x08003cd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fa3e 	bl	8004018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0204 	bic.w	r2, r2, #4
 8003bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6999      	ldr	r1, [r3, #24]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	619a      	str	r2, [r3, #24]
      break;
 8003bce:	e0a5      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 faa4 	bl	8004124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	021a      	lsls	r2, r3, #8
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	619a      	str	r2, [r3, #24]
      break;
 8003c10:	e084      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fb03 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0208 	orr.w	r2, r2, #8
 8003c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0204 	bic.w	r2, r2, #4
 8003c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69d9      	ldr	r1, [r3, #28]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	61da      	str	r2, [r3, #28]
      break;
 8003c50:	e064      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fb61 	bl	8004320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	021a      	lsls	r2, r3, #8
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	61da      	str	r2, [r3, #28]
      break;
 8003c92:	e043      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fba4 	bl	80043e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0208 	orr.w	r2, r2, #8
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cd2:	e023      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fbe2 	bl	80044a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	021a      	lsls	r2, r3, #8
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d14:	e002      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop

08003d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_ConfigClockSource+0x1c>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0b6      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x18a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d88:	d03e      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0xd8>
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8e:	f200 8087 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d96:	f000 8086 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x176>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	d87f      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
 8003da0:	2b70      	cmp	r3, #112	; 0x70
 8003da2:	d01a      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0xaa>
 8003da4:	2b70      	cmp	r3, #112	; 0x70
 8003da6:	d87b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
 8003da8:	2b60      	cmp	r3, #96	; 0x60
 8003daa:	d050      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x11e>
 8003dac:	2b60      	cmp	r3, #96	; 0x60
 8003dae:	d877      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
 8003db0:	2b50      	cmp	r3, #80	; 0x50
 8003db2:	d03c      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xfe>
 8003db4:	2b50      	cmp	r3, #80	; 0x50
 8003db6:	d873      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d058      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x13e>
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d86f      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d064      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x15e>
 8003dc4:	2b30      	cmp	r3, #48	; 0x30
 8003dc6:	d86b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d060      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x15e>
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d867      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d05c      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x15e>
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d05a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x15e>
 8003dd8:	e062      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f000 fc35 	bl	8004658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	609a      	str	r2, [r3, #8]
      break;
 8003e06:	e04f      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6899      	ldr	r1, [r3, #8]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f000 fc1e 	bl	8004658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e03c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 fb92 	bl	8004564 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2150      	movs	r1, #80	; 0x50
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fbeb 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e02c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f000 fbb1 	bl	80045c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2160      	movs	r1, #96	; 0x60
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fbdb 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e01c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 fb72 	bl	8004564 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2140      	movs	r1, #64	; 0x40
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fbcb 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e00c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f000 fbc2 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 8003e9e:	e003      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea4:	e000      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <TIM_Base_SetConfig+0xdc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0x28>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0x28>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <TIM_Base_SetConfig+0xe0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d108      	bne.n	8003f62 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a27      	ldr	r2, [pc, #156]	; (8004004 <TIM_Base_SetConfig+0xdc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <TIM_Base_SetConfig+0x6a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d00f      	beq.n	8003f92 <TIM_Base_SetConfig+0x6a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a24      	ldr	r2, [pc, #144]	; (8004008 <TIM_Base_SetConfig+0xe0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_Base_SetConfig+0x6a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	; (800400c <TIM_Base_SetConfig+0xe4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d007      	beq.n	8003f92 <TIM_Base_SetConfig+0x6a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a22      	ldr	r2, [pc, #136]	; (8004010 <TIM_Base_SetConfig+0xe8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_Base_SetConfig+0x6a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a21      	ldr	r2, [pc, #132]	; (8004014 <TIM_Base_SetConfig+0xec>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d108      	bne.n	8003fa4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <TIM_Base_SetConfig+0xdc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <TIM_Base_SetConfig+0xc0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0e      	ldr	r2, [pc, #56]	; (800400c <TIM_Base_SetConfig+0xe4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <TIM_Base_SetConfig+0xc0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <TIM_Base_SetConfig+0xe8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0xc0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <TIM_Base_SetConfig+0xec>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40000400 	.word	0x40000400
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800

08004018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f023 0201 	bic.w	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 0302 	bic.w	r3, r3, #2
 8004064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a28      	ldr	r2, [pc, #160]	; (8004114 <TIM_OC1_SetConfig+0xfc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_OC1_SetConfig+0x78>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a27      	ldr	r2, [pc, #156]	; (8004118 <TIM_OC1_SetConfig+0x100>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_OC1_SetConfig+0x78>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a26      	ldr	r2, [pc, #152]	; (800411c <TIM_OC1_SetConfig+0x104>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_OC1_SetConfig+0x78>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a25      	ldr	r2, [pc, #148]	; (8004120 <TIM_OC1_SetConfig+0x108>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10c      	bne.n	80040aa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0308 	bic.w	r3, r3, #8
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <TIM_OC1_SetConfig+0xfc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_OC1_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a18      	ldr	r2, [pc, #96]	; (8004118 <TIM_OC1_SetConfig+0x100>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC1_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <TIM_OC1_SetConfig+0x104>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC1_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <TIM_OC1_SetConfig+0x108>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d111      	bne.n	80040ee <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800

08004124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0210 	bic.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0320 	bic.w	r3, r3, #32
 8004172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a24      	ldr	r2, [pc, #144]	; (8004214 <TIM_OC2_SetConfig+0xf0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d10d      	bne.n	80041a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <TIM_OC2_SetConfig+0xf0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <TIM_OC2_SetConfig+0xa0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <TIM_OC2_SetConfig+0xf4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <TIM_OC2_SetConfig+0xa0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a19      	ldr	r2, [pc, #100]	; (800421c <TIM_OC2_SetConfig+0xf8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_OC2_SetConfig+0xa0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a18      	ldr	r2, [pc, #96]	; (8004220 <TIM_OC2_SetConfig+0xfc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d113      	bne.n	80041ec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	621a      	str	r2, [r3, #32]
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a23      	ldr	r2, [pc, #140]	; (8004310 <TIM_OC3_SetConfig+0xec>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10d      	bne.n	80042a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1a      	ldr	r2, [pc, #104]	; (8004310 <TIM_OC3_SetConfig+0xec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_OC3_SetConfig+0x9e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <TIM_OC3_SetConfig+0xf0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <TIM_OC3_SetConfig+0x9e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <TIM_OC3_SetConfig+0xf4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_OC3_SetConfig+0x9e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <TIM_OC3_SetConfig+0xf8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d113      	bne.n	80042ea <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	621a      	str	r2, [r3, #32]
}
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800

08004320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800434e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800436e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	031b      	lsls	r3, r3, #12
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <TIM_OC4_SetConfig+0xb8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00b      	beq.n	800439c <TIM_OC4_SetConfig+0x7c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a15      	ldr	r2, [pc, #84]	; (80043dc <TIM_OC4_SetConfig+0xbc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_OC4_SetConfig+0x7c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <TIM_OC4_SetConfig+0xc0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_OC4_SetConfig+0x7c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <TIM_OC4_SetConfig+0xc4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d109      	bne.n	80043b0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40012c00 	.word	0x40012c00
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800

080043e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800442c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a15      	ldr	r2, [pc, #84]	; (8004494 <TIM_OC5_SetConfig+0xac>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_OC5_SetConfig+0x72>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a14      	ldr	r2, [pc, #80]	; (8004498 <TIM_OC5_SetConfig+0xb0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_OC5_SetConfig+0x72>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <TIM_OC5_SetConfig+0xb4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC5_SetConfig+0x72>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <TIM_OC5_SetConfig+0xb8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d109      	bne.n	800446e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004460:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	621a      	str	r2, [r3, #32]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40012c00 	.word	0x40012c00
 8004498:	40014000 	.word	0x40014000
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800

080044a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	051b      	lsls	r3, r3, #20
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a16      	ldr	r2, [pc, #88]	; (8004554 <TIM_OC6_SetConfig+0xb0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <TIM_OC6_SetConfig+0x74>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <TIM_OC6_SetConfig+0xb4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <TIM_OC6_SetConfig+0x74>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a14      	ldr	r2, [pc, #80]	; (800455c <TIM_OC6_SetConfig+0xb8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_OC6_SetConfig+0x74>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a13      	ldr	r2, [pc, #76]	; (8004560 <TIM_OC6_SetConfig+0xbc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d109      	bne.n	800452c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	029b      	lsls	r3, r3, #10
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 030a 	bic.w	r3, r3, #10
 80045a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b087      	sub	sp, #28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0210 	bic.w	r2, r3, #16
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	f043 0307 	orr.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	609a      	str	r2, [r3, #8]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	021a      	lsls	r2, r3, #8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	431a      	orrs	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	609a      	str	r2, [r3, #8]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2201      	movs	r2, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	401a      	ands	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1a      	ldr	r2, [r3, #32]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_TIMEx_PWMN_Start+0x24>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e022      	b.n	800474e <HAL_TIMEx_PWMN_Start+0x6a>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d109      	bne.n	8004722 <HAL_TIMEx_PWMN_Start+0x3e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	e015      	b.n	800474e <HAL_TIMEx_PWMN_Start+0x6a>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d109      	bne.n	800473c <HAL_TIMEx_PWMN_Start+0x58>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e008      	b.n	800474e <HAL_TIMEx_PWMN_Start+0x6a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e05f      	b.n	8004816 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_TIMEx_PWMN_Start+0x82>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	e013      	b.n	800478e <HAL_TIMEx_PWMN_Start+0xaa>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d104      	bne.n	8004776 <HAL_TIMEx_PWMN_Start+0x92>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004774:	e00b      	b.n	800478e <HAL_TIMEx_PWMN_Start+0xaa>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d104      	bne.n	8004786 <HAL_TIMEx_PWMN_Start+0xa2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004784:	e003      	b.n	800478e <HAL_TIMEx_PWMN_Start+0xaa>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2204      	movs	r2, #4
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f94e 	bl	8004a38 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <HAL_TIMEx_PWMN_Start+0x13c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIMEx_PWMN_Start+0xf0>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047be:	d009      	beq.n	80047d4 <HAL_TIMEx_PWMN_Start+0xf0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_TIMEx_PWMN_Start+0x140>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIMEx_PWMN_Start+0xf0>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a16      	ldr	r2, [pc, #88]	; (8004828 <HAL_TIMEx_PWMN_Start+0x144>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d115      	bne.n	8004800 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	4b14      	ldr	r3, [pc, #80]	; (800482c <HAL_TIMEx_PWMN_Start+0x148>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b06      	cmp	r3, #6
 80047e4:	d015      	beq.n	8004812 <HAL_TIMEx_PWMN_Start+0x12e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d011      	beq.n	8004812 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	e008      	b.n	8004812 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e000      	b.n	8004814 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40012c00 	.word	0x40012c00
 8004824:	40000400 	.word	0x40000400
 8004828:	40014000 	.word	0x40014000
 800482c:	00010007 	.word	0x00010007

08004830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004844:	2302      	movs	r3, #2
 8004846:	e054      	b.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a24      	ldr	r2, [pc, #144]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d108      	bne.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004878:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d009      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a13      	ldr	r2, [pc, #76]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a11      	ldr	r2, [pc, #68]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d10c      	bne.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40000400 	.word	0x40000400
 8004908:	40014000 	.word	0x40014000

0800490c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004924:	2302      	movs	r3, #2
 8004926:	e060      	b.n	80049ea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d115      	bne.n	80049d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	051b      	lsls	r3, r3, #20
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00

080049fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1a      	ldr	r2, [r3, #32]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1a      	ldr	r2, [r3, #32]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	431a      	orrs	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
}
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e040      	b.n	8004b16 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fb ffe3 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2224      	movs	r2, #36	; 0x24
 8004aae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f82d 	bl	8004b20 <UART_SetConfig>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e022      	b.n	8004b16 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f957 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f9de 	bl	8004ed0 <UART_CheckIdleState>
 8004b14:	4603      	mov	r3, r0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b8a      	ldr	r3, [pc, #552]	; (8004d74 <UART_SetConfig+0x254>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a78      	ldr	r2, [pc, #480]	; (8004d78 <UART_SetConfig+0x258>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d120      	bne.n	8004bde <UART_SetConfig+0xbe>
 8004b9c:	4b77      	ldr	r3, [pc, #476]	; (8004d7c <UART_SetConfig+0x25c>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d817      	bhi.n	8004bd8 <UART_SetConfig+0xb8>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x90>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bcd 	.word	0x08004bcd
 8004bb8:	08004bd3 	.word	0x08004bd3
 8004bbc:	08004bc7 	.word	0x08004bc7
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e01d      	b.n	8004c02 <UART_SetConfig+0xe2>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e01a      	b.n	8004c02 <UART_SetConfig+0xe2>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e017      	b.n	8004c02 <UART_SetConfig+0xe2>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e014      	b.n	8004c02 <UART_SetConfig+0xe2>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e011      	b.n	8004c02 <UART_SetConfig+0xe2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a67      	ldr	r2, [pc, #412]	; (8004d80 <UART_SetConfig+0x260>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d102      	bne.n	8004bee <UART_SetConfig+0xce>
 8004be8:	2300      	movs	r3, #0
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e009      	b.n	8004c02 <UART_SetConfig+0xe2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a64      	ldr	r2, [pc, #400]	; (8004d84 <UART_SetConfig+0x264>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d102      	bne.n	8004bfe <UART_SetConfig+0xde>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e001      	b.n	8004c02 <UART_SetConfig+0xe2>
 8004bfe:	2310      	movs	r3, #16
 8004c00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0a:	d15a      	bne.n	8004cc2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d827      	bhi.n	8004c62 <UART_SetConfig+0x142>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0xf8>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c45 	.word	0x08004c45
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c63 	.word	0x08004c63
 8004c28:	08004c53 	.word	0x08004c53
 8004c2c:	08004c63 	.word	0x08004c63
 8004c30:	08004c63 	.word	0x08004c63
 8004c34:	08004c63 	.word	0x08004c63
 8004c38:	08004c5b 	.word	0x08004c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fe fa92 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8004c40:	61b8      	str	r0, [r7, #24]
        break;
 8004c42:	e013      	b.n	8004c6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c44:	f7fe fab0 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8004c48:	61b8      	str	r0, [r7, #24]
        break;
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b4e      	ldr	r3, [pc, #312]	; (8004d88 <UART_SetConfig+0x268>)
 8004c4e:	61bb      	str	r3, [r7, #24]
        break;
 8004c50:	e00c      	b.n	8004c6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fe fa11 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8004c56:	61b8      	str	r0, [r7, #24]
        break;
 8004c58:	e008      	b.n	8004c6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	61bb      	str	r3, [r7, #24]
        break;
 8004c60:	e004      	b.n	8004c6c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	77bb      	strb	r3, [r7, #30]
        break;
 8004c6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d074      	beq.n	8004d5c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	005a      	lsls	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b0f      	cmp	r3, #15
 8004c8c:	d916      	bls.n	8004cbc <UART_SetConfig+0x19c>
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d212      	bcs.n	8004cbc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f023 030f 	bic.w	r3, r3, #15
 8004c9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	085b      	lsrs	r3, r3, #1
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	89fb      	ldrh	r3, [r7, #14]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	89fa      	ldrh	r2, [r7, #14]
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	e04f      	b.n	8004d5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	77bb      	strb	r3, [r7, #30]
 8004cc0:	e04c      	b.n	8004d5c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d828      	bhi.n	8004d1a <UART_SetConfig+0x1fa>
 8004cc8:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0x1b0>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004cf5 	.word	0x08004cf5
 8004cd4:	08004cfd 	.word	0x08004cfd
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	08004d1b 	.word	0x08004d1b
 8004ce0:	08004d0b 	.word	0x08004d0b
 8004ce4:	08004d1b 	.word	0x08004d1b
 8004ce8:	08004d1b 	.word	0x08004d1b
 8004cec:	08004d1b 	.word	0x08004d1b
 8004cf0:	08004d13 	.word	0x08004d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf4:	f7fe fa36 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8004cf8:	61b8      	str	r0, [r7, #24]
        break;
 8004cfa:	e013      	b.n	8004d24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cfc:	f7fe fa54 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8004d00:	61b8      	str	r0, [r7, #24]
        break;
 8004d02:	e00f      	b.n	8004d24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d04:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <UART_SetConfig+0x268>)
 8004d06:	61bb      	str	r3, [r7, #24]
        break;
 8004d08:	e00c      	b.n	8004d24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0a:	f7fe f9b5 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8004d0e:	61b8      	str	r0, [r7, #24]
        break;
 8004d10:	e008      	b.n	8004d24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d16:	61bb      	str	r3, [r7, #24]
        break;
 8004d18:	e004      	b.n	8004d24 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	77bb      	strb	r3, [r7, #30]
        break;
 8004d22:	bf00      	nop
    }

    if (pclk != 0U)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d018      	beq.n	8004d5c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	085a      	lsrs	r2, r3, #1
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	441a      	add	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b0f      	cmp	r3, #15
 8004d42:	d909      	bls.n	8004d58 <UART_SetConfig+0x238>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d205      	bcs.n	8004d58 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	e001      	b.n	8004d5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d68:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	efff69f3 	.word	0xefff69f3
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40004400 	.word	0x40004400
 8004d84:	40004800 	.word	0x40004800
 8004d88:	007a1200 	.word	0x007a1200

08004d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8a:	d10a      	bne.n	8004ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b098      	sub	sp, #96	; 0x60
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee0:	f7fb feea 	bl	8000cb8 <HAL_GetTick>
 8004ee4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d12e      	bne.n	8004f52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f88c 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d021      	beq.n	8004f52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	653b      	str	r3, [r7, #80]	; 0x50
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e062      	b.n	8005018 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d149      	bne.n	8004ff4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f856 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d03c      	beq.n	8004ff4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	623b      	str	r3, [r7, #32]
   return(result);
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f98:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e6      	bne.n	8004f7a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fcc:	61fa      	str	r2, [r7, #28]
 8004fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e5      	bne.n	8004fac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e011      	b.n	8005018 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3758      	adds	r7, #88	; 0x58
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005030:	e049      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d045      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fb fe3d 	bl	8000cb8 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <UART_WaitOnFlagUntilTimeout+0x30>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e048      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d031      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d110      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2208      	movs	r2, #8
 8005076:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f838 	bl	80050ee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2208      	movs	r2, #8
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e029      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a0:	d111      	bne.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f81e 	bl	80050ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e00f      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4013      	ands	r3, r2
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d0a6      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b095      	sub	sp, #84	; 0x54
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800510a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005114:	643b      	str	r3, [r7, #64]	; 0x40
 8005116:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800511a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3308      	adds	r3, #8
 800512e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	61fb      	str	r3, [r7, #28]
   return(result);
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005148:	62fa      	str	r2, [r7, #44]	; 0x2c
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800514e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e5      	bne.n	8005128 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005160:	2b01      	cmp	r3, #1
 8005162:	d118      	bne.n	8005196 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	60bb      	str	r3, [r7, #8]
   return(result);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f023 0310 	bic.w	r3, r3, #16
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6979      	ldr	r1, [r7, #20]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	613b      	str	r3, [r7, #16]
   return(result);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e6      	bne.n	8005164 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051aa:	bf00      	nop
 80051ac:	3754      	adds	r7, #84	; 0x54
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051be:	f3ef 8305 	mrs	r3, IPSR
 80051c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80051c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10f      	bne.n	80051ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ca:	f3ef 8310 	mrs	r3, PRIMASK
 80051ce:	607b      	str	r3, [r7, #4]
  return(result);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <osKernelInitialize+0x32>
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <osKernelInitialize+0x64>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d109      	bne.n	80051f2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051de:	f3ef 8311 	mrs	r3, BASEPRI
 80051e2:	603b      	str	r3, [r7, #0]
  return(result);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80051ea:	f06f 0305 	mvn.w	r3, #5
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e00c      	b.n	800520c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <osKernelInitialize+0x64>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d105      	bne.n	8005206 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <osKernelInitialize+0x64>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e002      	b.n	800520c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200005b4 	.word	0x200005b4

08005220 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005226:	f3ef 8305 	mrs	r3, IPSR
 800522a:	60bb      	str	r3, [r7, #8]
  return(result);
 800522c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005232:	f3ef 8310 	mrs	r3, PRIMASK
 8005236:	607b      	str	r3, [r7, #4]
  return(result);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <osKernelStart+0x32>
 800523e:	4b11      	ldr	r3, [pc, #68]	; (8005284 <osKernelStart+0x64>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d109      	bne.n	800525a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005246:	f3ef 8311 	mrs	r3, BASEPRI
 800524a:	603b      	str	r3, [r7, #0]
  return(result);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005252:	f06f 0305 	mvn.w	r3, #5
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e00e      	b.n	8005278 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <osKernelStart+0x64>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <osKernelStart+0x64>)
 8005264:	2202      	movs	r2, #2
 8005266:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005268:	f001 f898 	bl	800639c <vTaskStartScheduler>
      stat = osOK;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e002      	b.n	8005278 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
 8005276:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005278:	68fb      	ldr	r3, [r7, #12]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200005b4 	.word	0x200005b4

08005288 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b092      	sub	sp, #72	; 0x48
 800528c:	af04      	add	r7, sp, #16
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005298:	f3ef 8305 	mrs	r3, IPSR
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8094 	bne.w	80053ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a6:	f3ef 8310 	mrs	r3, PRIMASK
 80052aa:	623b      	str	r3, [r7, #32]
  return(result);
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 808d 	bne.w	80053ce <osThreadNew+0x146>
 80052b4:	4b48      	ldr	r3, [pc, #288]	; (80053d8 <osThreadNew+0x150>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d106      	bne.n	80052ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052bc:	f3ef 8311 	mrs	r3, BASEPRI
 80052c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f040 8082 	bne.w	80053ce <osThreadNew+0x146>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d07e      	beq.n	80053ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80052d0:	2340      	movs	r3, #64	; 0x40
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80052d4:	2318      	movs	r3, #24
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80052d8:	2300      	movs	r3, #0
 80052da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80052dc:	f107 031b 	add.w	r3, r7, #27
 80052e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d045      	beq.n	800537a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <osThreadNew+0x74>
        name = attr->name;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <osThreadNew+0x9a>
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	2b38      	cmp	r3, #56	; 0x38
 8005314:	d805      	bhi.n	8005322 <osThreadNew+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <osThreadNew+0x9e>
        return (NULL);
 8005322:	2300      	movs	r3, #0
 8005324:	e054      	b.n	80053d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <osThreadNew+0xd4>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2bbb      	cmp	r3, #187	; 0xbb
 8005344:	d90a      	bls.n	800535c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800534a:	2b00      	cmp	r3, #0
 800534c:	d006      	beq.n	800535c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <osThreadNew+0xd4>
        mem = 1;
 8005356:	2301      	movs	r3, #1
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
 800535a:	e010      	b.n	800537e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10c      	bne.n	800537e <osThreadNew+0xf6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <osThreadNew+0xf6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <osThreadNew+0xf6>
          mem = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
 8005378:	e001      	b.n	800537e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	2b01      	cmp	r3, #1
 8005382:	d110      	bne.n	80053a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800538c:	9202      	str	r2, [sp, #8]
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005398:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fe1a 	bl	8005fd4 <xTaskCreateStatic>
 80053a0:	4603      	mov	r3, r0
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e013      	b.n	80053ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d110      	bne.n	80053ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fe64 	bl	800608c <xTaskCreate>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d001      	beq.n	80053ce <osThreadNew+0x146>
          hTask = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053ce:	697b      	ldr	r3, [r7, #20]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3738      	adds	r7, #56	; 0x38
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	200005b4 	.word	0x200005b4

080053dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e4:	f3ef 8305 	mrs	r3, IPSR
 80053e8:	613b      	str	r3, [r7, #16]
  return(result);
 80053ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f0:	f3ef 8310 	mrs	r3, PRIMASK
 80053f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <osDelay+0x34>
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <osDelay+0x58>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d109      	bne.n	8005418 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005404:	f3ef 8311 	mrs	r3, BASEPRI
 8005408:	60bb      	str	r3, [r7, #8]
  return(result);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <osDelay+0x3c>
    stat = osErrorISR;
 8005410:	f06f 0305 	mvn.w	r3, #5
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e007      	b.n	8005428 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 ff86 	bl	8006334 <vTaskDelay>
    }
  }

  return (stat);
 8005428:	697b      	ldr	r3, [r7, #20]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200005b4 	.word	0x200005b4

08005438 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <vApplicationGetIdleTaskMemory+0x2c>)
 8005448:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4a06      	ldr	r2, [pc, #24]	; (8005468 <vApplicationGetIdleTaskMemory+0x30>)
 800544e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2240      	movs	r2, #64	; 0x40
 8005454:	601a      	str	r2, [r3, #0]
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	200005b8 	.word	0x200005b8
 8005468:	20000674 	.word	0x20000674

0800546c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a07      	ldr	r2, [pc, #28]	; (8005498 <vApplicationGetTimerTaskMemory+0x2c>)
 800547c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4a06      	ldr	r2, [pc, #24]	; (800549c <vApplicationGetTimerTaskMemory+0x30>)
 8005482:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2280      	movs	r2, #128	; 0x80
 8005488:	601a      	str	r2, [r3, #0]
}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000774 	.word	0x20000774
 800549c:	20000830 	.word	0x20000830

080054a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f103 0208 	add.w	r2, r3, #8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f04f 32ff 	mov.w	r2, #4294967295
 80054b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f103 0208 	add.w	r2, r3, #8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f103 0208 	add.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d103      	bne.n	8005562 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e00c      	b.n	800557c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3308      	adds	r3, #8
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e002      	b.n	8005570 <vListInsert+0x2e>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	429a      	cmp	r2, r3
 800557a:	d2f6      	bcs.n	800556a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	601a      	str	r2, [r3, #0]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6892      	ldr	r2, [r2, #8]
 80055ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6852      	ldr	r2, [r2, #4]
 80055d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d103      	bne.n	80055e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	1e5a      	subs	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005632:	f002 f967 	bl	8007904 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	441a      	add	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	3b01      	subs	r3, #1
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	22ff      	movs	r2, #255	; 0xff
 800567e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d114      	bne.n	80056b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01a      	beq.n	80056c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3310      	adds	r3, #16
 8005694:	4618      	mov	r0, r3
 8005696:	f001 f91f 	bl	80068d8 <xTaskRemoveFromEventList>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d012      	beq.n	80056c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <xQueueGenericReset+0xcc>)
 80056a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	e009      	b.n	80056c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3310      	adds	r3, #16
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fef2 	bl	80054a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3324      	adds	r3, #36	; 0x24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff feed 	bl	80054a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056c6:	f002 f94d 	bl	8007964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056ca:	2301      	movs	r3, #1
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <xQueueGenericCreateStatic+0x52>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <xQueueGenericCreateStatic+0x56>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xQueueGenericCreateStatic+0x58>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	623b      	str	r3, [r7, #32]
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <xQueueGenericCreateStatic+0x7e>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <xQueueGenericCreateStatic+0x82>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <xQueueGenericCreateStatic+0x84>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61fb      	str	r3, [r7, #28]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005776:	2350      	movs	r3, #80	; 0x50
 8005778:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b50      	cmp	r3, #80	; 0x50
 800577e:	d00a      	beq.n	8005796 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	61bb      	str	r3, [r7, #24]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f805 	bl	80057c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3730      	adds	r7, #48	; 0x30
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e002      	b.n	80057e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057f4:	2101      	movs	r1, #1
 80057f6:	69b8      	ldr	r0, [r7, #24]
 80057f8:	f7ff ff06 	bl	8005608 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08e      	sub	sp, #56	; 0x38
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800581a:	2300      	movs	r3, #0
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xQueueGenericSend+0x32>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <xQueueGenericSend+0x40>
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <xQueueGenericSend+0x44>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <xQueueGenericSend+0x46>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <xQueueGenericSend+0x60>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d103      	bne.n	800587a <xQueueGenericSend+0x6e>
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <xQueueGenericSend+0x72>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <xQueueGenericSend+0x74>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericSend+0x8e>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	623b      	str	r3, [r7, #32]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800589a:	f001 f9e5 	bl	8006c68 <xTaskGetSchedulerState>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <xQueueGenericSend+0x9e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <xQueueGenericSend+0xa2>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <xQueueGenericSend+0xa4>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <xQueueGenericSend+0xbe>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61fb      	str	r3, [r7, #28]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058ca:	f002 f81b 	bl	8007904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d302      	bcc.n	80058e0 <xQueueGenericSend+0xd4>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d129      	bne.n	8005934 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058e6:	f000 fa07 	bl	8005cf8 <prvCopyDataToQueue>
 80058ea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d010      	beq.n	8005916 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	3324      	adds	r3, #36	; 0x24
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 ffed 	bl	80068d8 <xTaskRemoveFromEventList>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d013      	beq.n	800592c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005904:	4b3f      	ldr	r3, [pc, #252]	; (8005a04 <xQueueGenericSend+0x1f8>)
 8005906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	e00a      	b.n	800592c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800591c:	4b39      	ldr	r3, [pc, #228]	; (8005a04 <xQueueGenericSend+0x1f8>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800592c:	f002 f81a 	bl	8007964 <vPortExitCritical>
				return pdPASS;
 8005930:	2301      	movs	r3, #1
 8005932:	e063      	b.n	80059fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800593a:	f002 f813 	bl	8007964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800593e:	2300      	movs	r3, #0
 8005940:	e05c      	b.n	80059fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005948:	f107 0314 	add.w	r3, r7, #20
 800594c:	4618      	mov	r0, r3
 800594e:	f001 f827 	bl	80069a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005952:	2301      	movs	r3, #1
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005956:	f002 f805 	bl	8007964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800595a:	f000 fd8f 	bl	800647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800595e:	f001 ffd1 	bl	8007904 <vPortEnterCritical>
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005968:	b25b      	sxtb	r3, r3
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d103      	bne.n	8005978 <xQueueGenericSend+0x16c>
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800597e:	b25b      	sxtb	r3, r3
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d103      	bne.n	800598e <xQueueGenericSend+0x182>
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800598e:	f001 ffe9 	bl	8007964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005992:	1d3a      	adds	r2, r7, #4
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	4611      	mov	r1, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f001 f816 	bl	80069cc <xTaskCheckForTimeOut>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d124      	bne.n	80059f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059a8:	f000 fa9e 	bl	8005ee8 <prvIsQueueFull>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d018      	beq.n	80059e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	3310      	adds	r3, #16
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 ff3c 	bl	8006838 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f000 fa29 	bl	8005e18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059c6:	f000 fd67 	bl	8006498 <xTaskResumeAll>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f47f af7c 	bne.w	80058ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <xQueueGenericSend+0x1f8>)
 80059d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	e772      	b.n	80058ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e6:	f000 fa17 	bl	8005e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059ea:	f000 fd55 	bl	8006498 <xTaskResumeAll>
 80059ee:	e76c      	b.n	80058ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f2:	f000 fa11 	bl	8005e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059f6:	f000 fd4f 	bl	8006498 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059fa:	2300      	movs	r3, #0
		}
	}
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3738      	adds	r7, #56	; 0x38
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08e      	sub	sp, #56	; 0x38
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <xQueueGenericSendFromISR+0x3c>
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <xQueueGenericSendFromISR+0x40>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <xQueueGenericSendFromISR+0x42>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	623b      	str	r3, [r7, #32]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d103      	bne.n	8005a72 <xQueueGenericSendFromISR+0x6a>
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <xQueueGenericSendFromISR+0x6e>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <xQueueGenericSendFromISR+0x70>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	61fb      	str	r3, [r7, #28]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a92:	f002 f819 	bl	8007ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a96:	f3ef 8211 	mrs	r2, BASEPRI
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	61ba      	str	r2, [r7, #24]
 8005aac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005aae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <xQueueGenericSendFromISR+0xbc>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d12c      	bne.n	8005b1e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ad4:	f000 f910 	bl	8005cf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ad8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d112      	bne.n	8005b08 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d016      	beq.n	8005b18 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fef2 	bl	80068d8 <xTaskRemoveFromEventList>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00e      	beq.n	8005b18 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e007      	b.n	8005b18 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	b25a      	sxtb	r2, r3
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b1c:	e001      	b.n	8005b22 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3738      	adds	r7, #56	; 0x38
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08c      	sub	sp, #48	; 0x30
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <xQueueReceive+0x30>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	623b      	str	r3, [r7, #32]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <xQueueReceive+0x3e>
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <xQueueReceive+0x42>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <xQueueReceive+0x44>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <xQueueReceive+0x5e>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	61fb      	str	r3, [r7, #28]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b96:	f001 f867 	bl	8006c68 <xTaskGetSchedulerState>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <xQueueReceive+0x6e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <xQueueReceive+0x72>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <xQueueReceive+0x74>
 8005baa:	2300      	movs	r3, #0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <xQueueReceive+0x8e>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	61bb      	str	r3, [r7, #24]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bc6:	f001 fe9d 	bl	8007904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01f      	beq.n	8005c16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bda:	f000 f8f7 	bl	8005dcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	1e5a      	subs	r2, r3, #1
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00f      	beq.n	8005c0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	3310      	adds	r3, #16
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fe70 	bl	80068d8 <xTaskRemoveFromEventList>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bfe:	4b3d      	ldr	r3, [pc, #244]	; (8005cf4 <xQueueReceive+0x1bc>)
 8005c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c0e:	f001 fea9 	bl	8007964 <vPortExitCritical>
				return pdPASS;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e069      	b.n	8005cea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c1c:	f001 fea2 	bl	8007964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e062      	b.n	8005cea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c2a:	f107 0310 	add.w	r3, r7, #16
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 feb6 	bl	80069a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c38:	f001 fe94 	bl	8007964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c3c:	f000 fc1e 	bl	800647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c40:	f001 fe60 	bl	8007904 <vPortEnterCritical>
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d103      	bne.n	8005c5a <xQueueReceive+0x122>
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	d103      	bne.n	8005c70 <xQueueReceive+0x138>
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c70:	f001 fe78 	bl	8007964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c74:	1d3a      	adds	r2, r7, #4
 8005c76:	f107 0310 	add.w	r3, r7, #16
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fea5 	bl	80069cc <xTaskCheckForTimeOut>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d123      	bne.n	8005cd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c8a:	f000 f917 	bl	8005ebc <prvIsQueueEmpty>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d017      	beq.n	8005cc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	3324      	adds	r3, #36	; 0x24
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fdcb 	bl	8006838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca4:	f000 f8b8 	bl	8005e18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ca8:	f000 fbf6 	bl	8006498 <xTaskResumeAll>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d189      	bne.n	8005bc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <xQueueReceive+0x1bc>)
 8005cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	e780      	b.n	8005bc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cc6:	f000 f8a7 	bl	8005e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cca:	f000 fbe5 	bl	8006498 <xTaskResumeAll>
 8005cce:	e77a      	b.n	8005bc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd2:	f000 f8a1 	bl	8005e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cd6:	f000 fbdf 	bl	8006498 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cdc:	f000 f8ee 	bl	8005ebc <prvIsQueueEmpty>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f43f af6f 	beq.w	8005bc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3730      	adds	r7, #48	; 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10d      	bne.n	8005d32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d14d      	bne.n	8005dba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 ffbe 	bl	8006ca4 <xTaskPriorityDisinherit>
 8005d28:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	e043      	b.n	8005dba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d119      	bne.n	8005d6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6898      	ldr	r0, [r3, #8]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	461a      	mov	r2, r3
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	f002 f900 	bl	8007f48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	441a      	add	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d32b      	bcc.n	8005dba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	e026      	b.n	8005dba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68d8      	ldr	r0, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	461a      	mov	r2, r3
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	f002 f8e6 	bl	8007f48 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	425b      	negs	r3, r3
 8005d86:	441a      	add	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d207      	bcs.n	8005da8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	425b      	negs	r3, r3
 8005da2:	441a      	add	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d105      	bne.n	8005dba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005dc2:	697b      	ldr	r3, [r7, #20]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d018      	beq.n	8005e10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	441a      	add	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d303      	bcc.n	8005e00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68d9      	ldr	r1, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6838      	ldr	r0, [r7, #0]
 8005e0c:	f002 f89c 	bl	8007f48 <memcpy>
	}
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e20:	f001 fd70 	bl	8007904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e2c:	e011      	b.n	8005e52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d012      	beq.n	8005e5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3324      	adds	r3, #36	; 0x24
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fd4c 	bl	80068d8 <xTaskRemoveFromEventList>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e46:	f000 fe23 	bl	8006a90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dce9      	bgt.n	8005e2e <prvUnlockQueue+0x16>
 8005e5a:	e000      	b.n	8005e5e <prvUnlockQueue+0x46>
					break;
 8005e5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	22ff      	movs	r2, #255	; 0xff
 8005e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e66:	f001 fd7d 	bl	8007964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e6a:	f001 fd4b 	bl	8007904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e76:	e011      	b.n	8005e9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d012      	beq.n	8005ea6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3310      	adds	r3, #16
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fd27 	bl	80068d8 <xTaskRemoveFromEventList>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e90:	f000 fdfe 	bl	8006a90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dce9      	bgt.n	8005e78 <prvUnlockQueue+0x60>
 8005ea4:	e000      	b.n	8005ea8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ea6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	22ff      	movs	r2, #255	; 0xff
 8005eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005eb0:	f001 fd58 	bl	8007964 <vPortExitCritical>
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ec4:	f001 fd1e 	bl	8007904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e001      	b.n	8005eda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005eda:	f001 fd43 	bl	8007964 <vPortExitCritical>

	return xReturn;
 8005ede:	68fb      	ldr	r3, [r7, #12]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ef0:	f001 fd08 	bl	8007904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d102      	bne.n	8005f06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e001      	b.n	8005f0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f0a:	f001 fd2b 	bl	8007964 <vPortExitCritical>

	return xReturn;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e014      	b.n	8005f52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f28:	4a0f      	ldr	r2, [pc, #60]	; (8005f68 <vQueueAddToRegistry+0x50>)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f34:	490c      	ldr	r1, [pc, #48]	; (8005f68 <vQueueAddToRegistry+0x50>)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f3e:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <vQueueAddToRegistry+0x50>)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	4413      	add	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f4a:	e006      	b.n	8005f5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b07      	cmp	r3, #7
 8005f56:	d9e7      	bls.n	8005f28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000a30 	.word	0x20000a30

08005f6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f7c:	f001 fcc2 	bl	8007904 <vPortEnterCritical>
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f86:	b25b      	sxtb	r3, r3
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d103      	bne.n	8005f96 <vQueueWaitForMessageRestricted+0x2a>
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f9c:	b25b      	sxtb	r3, r3
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d103      	bne.n	8005fac <vQueueWaitForMessageRestricted+0x40>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fac:	f001 fcda 	bl	8007964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	3324      	adds	r3, #36	; 0x24
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fc5d 	bl	8006880 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fc6:	6978      	ldr	r0, [r7, #20]
 8005fc8:	f7ff ff26 	bl	8005e18 <prvUnlockQueue>
	}
 8005fcc:	bf00      	nop
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08e      	sub	sp, #56	; 0x38
 8005fd8:	af04      	add	r7, sp, #16
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xTaskCreateStatic+0x2a>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	623b      	str	r3, [r7, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <xTaskCreateStatic+0x46>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	61fb      	str	r3, [r7, #28]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800601a:	23bc      	movs	r3, #188	; 0xbc
 800601c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2bbc      	cmp	r3, #188	; 0xbc
 8006022:	d00a      	beq.n	800603a <xTaskCreateStatic+0x66>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	61bb      	str	r3, [r7, #24]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01e      	beq.n	800607e <xTaskCreateStatic+0xaa>
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01b      	beq.n	800607e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800604e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	2202      	movs	r2, #2
 8006054:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006058:	2300      	movs	r3, #0
 800605a:	9303      	str	r3, [sp, #12]
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	9302      	str	r3, [sp, #8]
 8006060:	f107 0314 	add.w	r3, r7, #20
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f851 	bl	8006118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006078:	f000 f8ec 	bl	8006254 <prvAddNewTaskToReadyList>
 800607c:	e001      	b.n	8006082 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006082:	697b      	ldr	r3, [r7, #20]
	}
 8006084:	4618      	mov	r0, r3
 8006086:	3728      	adds	r7, #40	; 0x28
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af04      	add	r7, sp, #16
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 fd51 	bl	8007b48 <pvPortMalloc>
 80060a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80060ae:	20bc      	movs	r0, #188	; 0xbc
 80060b0:	f001 fd4a 	bl	8007b48 <pvPortMalloc>
 80060b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
 80060c2:	e005      	b.n	80060d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060c4:	6978      	ldr	r0, [r7, #20]
 80060c6:	f001 fe03 	bl	8007cd0 <vPortFree>
 80060ca:	e001      	b.n	80060d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d017      	beq.n	8006106 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	2300      	movs	r3, #0
 80060e2:	9303      	str	r3, [sp, #12]
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f80f 	bl	8006118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060fa:	69f8      	ldr	r0, [r7, #28]
 80060fc:	f000 f8aa 	bl	8006254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006100:	2301      	movs	r3, #1
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	e002      	b.n	800610c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006106:	f04f 33ff 	mov.w	r3, #4294967295
 800610a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800610c:	69bb      	ldr	r3, [r7, #24]
	}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	461a      	mov	r2, r3
 8006130:	21a5      	movs	r1, #165	; 0xa5
 8006132:	f001 ff17 	bl	8007f64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006140:	3b01      	subs	r3, #1
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f023 0307 	bic.w	r3, r3, #7
 800614e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <prvInitialiseNewTask+0x58>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	617b      	str	r3, [r7, #20]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	e012      	b.n	800619c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	7819      	ldrb	r1, [r3, #0]
 800617e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	3334      	adds	r3, #52	; 0x34
 8006186:	460a      	mov	r2, r1
 8006188:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d006      	beq.n	80061a4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	3301      	adds	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b0f      	cmp	r3, #15
 80061a0:	d9e9      	bls.n	8006176 <prvInitialiseNewTask+0x5e>
 80061a2:	e000      	b.n	80061a6 <prvInitialiseNewTask+0x8e>
		{
			break;
 80061a4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	2b37      	cmp	r3, #55	; 0x37
 80061b2:	d901      	bls.n	80061b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061b4:	2337      	movs	r3, #55	; 0x37
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	2200      	movs	r2, #0
 80061c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	3304      	adds	r3, #4
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff f986 	bl	80054e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	3318      	adds	r3, #24
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff f981 	bl	80054e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	3354      	adds	r3, #84	; 0x54
 8006208:	2260      	movs	r2, #96	; 0x60
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fea9 	bl	8007f64 <memset>
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	4a0c      	ldr	r2, [pc, #48]	; (8006248 <prvInitialiseNewTask+0x130>)
 8006216:	659a      	str	r2, [r3, #88]	; 0x58
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	4a0c      	ldr	r2, [pc, #48]	; (800624c <prvInitialiseNewTask+0x134>)
 800621c:	65da      	str	r2, [r3, #92]	; 0x5c
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	4a0b      	ldr	r2, [pc, #44]	; (8006250 <prvInitialiseNewTask+0x138>)
 8006222:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	69b8      	ldr	r0, [r7, #24]
 800622a:	f001 fa41 	bl	80076b0 <pxPortInitialiseStack>
 800622e:	4602      	mov	r2, r0
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006240:	bf00      	nop
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	080081dc 	.word	0x080081dc
 800624c:	080081fc 	.word	0x080081fc
 8006250:	080081bc 	.word	0x080081bc

08006254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800625c:	f001 fb52 	bl	8007904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006260:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <prvAddNewTaskToReadyList+0xc4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3301      	adds	r3, #1
 8006266:	4a2c      	ldr	r2, [pc, #176]	; (8006318 <prvAddNewTaskToReadyList+0xc4>)
 8006268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800626a:	4b2c      	ldr	r3, [pc, #176]	; (800631c <prvAddNewTaskToReadyList+0xc8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006272:	4a2a      	ldr	r2, [pc, #168]	; (800631c <prvAddNewTaskToReadyList+0xc8>)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006278:	4b27      	ldr	r3, [pc, #156]	; (8006318 <prvAddNewTaskToReadyList+0xc4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d110      	bne.n	80062a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006280:	f000 fc2a 	bl	8006ad8 <prvInitialiseTaskLists>
 8006284:	e00d      	b.n	80062a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006286:	4b26      	ldr	r3, [pc, #152]	; (8006320 <prvAddNewTaskToReadyList+0xcc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800628e:	4b23      	ldr	r3, [pc, #140]	; (800631c <prvAddNewTaskToReadyList+0xc8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	429a      	cmp	r2, r3
 800629a:	d802      	bhi.n	80062a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800629c:	4a1f      	ldr	r2, [pc, #124]	; (800631c <prvAddNewTaskToReadyList+0xc8>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062a2:	4b20      	ldr	r3, [pc, #128]	; (8006324 <prvAddNewTaskToReadyList+0xd0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <prvAddNewTaskToReadyList+0xd0>)
 80062aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062ac:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <prvAddNewTaskToReadyList+0xd0>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <prvAddNewTaskToReadyList+0xd4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d903      	bls.n	80062c8 <prvAddNewTaskToReadyList+0x74>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	4a18      	ldr	r2, [pc, #96]	; (8006328 <prvAddNewTaskToReadyList+0xd4>)
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4a15      	ldr	r2, [pc, #84]	; (800632c <prvAddNewTaskToReadyList+0xd8>)
 80062d6:	441a      	add	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f7ff f90b 	bl	80054fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062e4:	f001 fb3e 	bl	8007964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062e8:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <prvAddNewTaskToReadyList+0xcc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <prvAddNewTaskToReadyList+0xc8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d207      	bcs.n	800630e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <prvAddNewTaskToReadyList+0xdc>)
 8006300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000f44 	.word	0x20000f44
 800631c:	20000a70 	.word	0x20000a70
 8006320:	20000f50 	.word	0x20000f50
 8006324:	20000f60 	.word	0x20000f60
 8006328:	20000f4c 	.word	0x20000f4c
 800632c:	20000a74 	.word	0x20000a74
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d017      	beq.n	8006376 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <vTaskDelay+0x60>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <vTaskDelay+0x30>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	60bb      	str	r3, [r7, #8]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006364:	f000 f88a 	bl	800647c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006368:	2100      	movs	r1, #0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fe3a 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006370:	f000 f892 	bl	8006498 <xTaskResumeAll>
 8006374:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d107      	bne.n	800638c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <vTaskDelay+0x64>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800638c:	bf00      	nop
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20000f6c 	.word	0x20000f6c
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063aa:	463a      	mov	r2, r7
 80063ac:	1d39      	adds	r1, r7, #4
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff f840 	bl	8005438 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	9202      	str	r2, [sp, #8]
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	2300      	movs	r3, #0
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	460a      	mov	r2, r1
 80063ca:	4924      	ldr	r1, [pc, #144]	; (800645c <vTaskStartScheduler+0xc0>)
 80063cc:	4824      	ldr	r0, [pc, #144]	; (8006460 <vTaskStartScheduler+0xc4>)
 80063ce:	f7ff fe01 	bl	8005fd4 <xTaskCreateStatic>
 80063d2:	4603      	mov	r3, r0
 80063d4:	4a23      	ldr	r2, [pc, #140]	; (8006464 <vTaskStartScheduler+0xc8>)
 80063d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063d8:	4b22      	ldr	r3, [pc, #136]	; (8006464 <vTaskStartScheduler+0xc8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e001      	b.n	80063ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d102      	bne.n	80063f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063f0:	f000 fe4c 	bl	800708c <xTimerCreateTimerTask>
 80063f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d11b      	bne.n	8006434 <vTaskStartScheduler+0x98>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	613b      	str	r3, [r7, #16]
}
 800640e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006410:	4b15      	ldr	r3, [pc, #84]	; (8006468 <vTaskStartScheduler+0xcc>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3354      	adds	r3, #84	; 0x54
 8006416:	4a15      	ldr	r2, [pc, #84]	; (800646c <vTaskStartScheduler+0xd0>)
 8006418:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <vTaskStartScheduler+0xd4>)
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <vTaskStartScheduler+0xd8>)
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006428:	4b13      	ldr	r3, [pc, #76]	; (8006478 <vTaskStartScheduler+0xdc>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800642e:	f001 f9c7 	bl	80077c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006432:	e00e      	b.n	8006452 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643a:	d10a      	bne.n	8006452 <vTaskStartScheduler+0xb6>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60fb      	str	r3, [r7, #12]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <vTaskStartScheduler+0xb4>
}
 8006452:	bf00      	nop
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	08008124 	.word	0x08008124
 8006460:	08006aa9 	.word	0x08006aa9
 8006464:	20000f68 	.word	0x20000f68
 8006468:	20000a70 	.word	0x20000a70
 800646c:	20000010 	.word	0x20000010
 8006470:	20000f64 	.word	0x20000f64
 8006474:	20000f50 	.word	0x20000f50
 8006478:	20000f48 	.word	0x20000f48

0800647c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <vTaskSuspendAll+0x18>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	4a03      	ldr	r2, [pc, #12]	; (8006494 <vTaskSuspendAll+0x18>)
 8006488:	6013      	str	r3, [r2, #0]
}
 800648a:	bf00      	nop
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	20000f6c 	.word	0x20000f6c

08006498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064a6:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <xTaskResumeAll+0x118>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	603b      	str	r3, [r7, #0]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064c4:	f001 fa1e 	bl	8007904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064c8:	4b39      	ldr	r3, [pc, #228]	; (80065b0 <xTaskResumeAll+0x118>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4a38      	ldr	r2, [pc, #224]	; (80065b0 <xTaskResumeAll+0x118>)
 80064d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d2:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <xTaskResumeAll+0x118>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d162      	bne.n	80065a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064da:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <xTaskResumeAll+0x11c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d05e      	beq.n	80065a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064e2:	e02f      	b.n	8006544 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80064e4:	4b34      	ldr	r3, [pc, #208]	; (80065b8 <xTaskResumeAll+0x120>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3318      	adds	r3, #24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff f85f 	bl	80055b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff f85a 	bl	80055b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <xTaskResumeAll+0x124>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d903      	bls.n	8006514 <xTaskResumeAll+0x7c>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a2a      	ldr	r2, [pc, #168]	; (80065bc <xTaskResumeAll+0x124>)
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <xTaskResumeAll+0x128>)
 8006522:	441a      	add	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7fe ffe5 	bl	80054fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4b23      	ldr	r3, [pc, #140]	; (80065c4 <xTaskResumeAll+0x12c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	429a      	cmp	r2, r3
 800653c:	d302      	bcc.n	8006544 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800653e:	4b22      	ldr	r3, [pc, #136]	; (80065c8 <xTaskResumeAll+0x130>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006544:	4b1c      	ldr	r3, [pc, #112]	; (80065b8 <xTaskResumeAll+0x120>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1cb      	bne.n	80064e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006552:	f000 fb63 	bl	8006c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006556:	4b1d      	ldr	r3, [pc, #116]	; (80065cc <xTaskResumeAll+0x134>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d010      	beq.n	8006584 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006562:	f000 f847 	bl	80065f4 <xTaskIncrementTick>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <xTaskResumeAll+0x130>)
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3b01      	subs	r3, #1
 8006576:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f1      	bne.n	8006562 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <xTaskResumeAll+0x134>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006584:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <xTaskResumeAll+0x130>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800658c:	2301      	movs	r3, #1
 800658e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <xTaskResumeAll+0x138>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065a0:	f001 f9e0 	bl	8007964 <vPortExitCritical>

	return xAlreadyYielded;
 80065a4:	68bb      	ldr	r3, [r7, #8]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000f6c 	.word	0x20000f6c
 80065b4:	20000f44 	.word	0x20000f44
 80065b8:	20000f04 	.word	0x20000f04
 80065bc:	20000f4c 	.word	0x20000f4c
 80065c0:	20000a74 	.word	0x20000a74
 80065c4:	20000a70 	.word	0x20000a70
 80065c8:	20000f58 	.word	0x20000f58
 80065cc:	20000f54 	.word	0x20000f54
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <xTaskGetTickCount+0x1c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065e0:	687b      	ldr	r3, [r7, #4]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	20000f48 	.word	0x20000f48

080065f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065fe:	4b51      	ldr	r3, [pc, #324]	; (8006744 <xTaskIncrementTick+0x150>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f040 808e 	bne.w	8006724 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006608:	4b4f      	ldr	r3, [pc, #316]	; (8006748 <xTaskIncrementTick+0x154>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006610:	4a4d      	ldr	r2, [pc, #308]	; (8006748 <xTaskIncrementTick+0x154>)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d120      	bne.n	800665e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800661c:	4b4b      	ldr	r3, [pc, #300]	; (800674c <xTaskIncrementTick+0x158>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <xTaskIncrementTick+0x48>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	603b      	str	r3, [r7, #0]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <xTaskIncrementTick+0x46>
 800663c:	4b43      	ldr	r3, [pc, #268]	; (800674c <xTaskIncrementTick+0x158>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	4b43      	ldr	r3, [pc, #268]	; (8006750 <xTaskIncrementTick+0x15c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a41      	ldr	r2, [pc, #260]	; (800674c <xTaskIncrementTick+0x158>)
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	4a41      	ldr	r2, [pc, #260]	; (8006750 <xTaskIncrementTick+0x15c>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	4b40      	ldr	r3, [pc, #256]	; (8006754 <xTaskIncrementTick+0x160>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	4a3f      	ldr	r2, [pc, #252]	; (8006754 <xTaskIncrementTick+0x160>)
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	f000 fadf 	bl	8006c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800665e:	4b3e      	ldr	r3, [pc, #248]	; (8006758 <xTaskIncrementTick+0x164>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	429a      	cmp	r2, r3
 8006666:	d34e      	bcc.n	8006706 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006668:	4b38      	ldr	r3, [pc, #224]	; (800674c <xTaskIncrementTick+0x158>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <xTaskIncrementTick+0x82>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <xTaskIncrementTick+0x84>
 8006676:	2300      	movs	r3, #0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800667c:	4b36      	ldr	r3, [pc, #216]	; (8006758 <xTaskIncrementTick+0x164>)
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	601a      	str	r2, [r3, #0]
					break;
 8006684:	e03f      	b.n	8006706 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006686:	4b31      	ldr	r3, [pc, #196]	; (800674c <xTaskIncrementTick+0x158>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d203      	bcs.n	80066a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800669e:	4a2e      	ldr	r2, [pc, #184]	; (8006758 <xTaskIncrementTick+0x164>)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6013      	str	r3, [r2, #0]
						break;
 80066a4:	e02f      	b.n	8006706 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe ff82 	bl	80055b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	3318      	adds	r3, #24
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe ff79 	bl	80055b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c6:	4b25      	ldr	r3, [pc, #148]	; (800675c <xTaskIncrementTick+0x168>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d903      	bls.n	80066d6 <xTaskIncrementTick+0xe2>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	4a22      	ldr	r2, [pc, #136]	; (800675c <xTaskIncrementTick+0x168>)
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a1f      	ldr	r2, [pc, #124]	; (8006760 <xTaskIncrementTick+0x16c>)
 80066e4:	441a      	add	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f7fe ff04 	bl	80054fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <xTaskIncrementTick+0x170>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d3b3      	bcc.n	8006668 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006700:	2301      	movs	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006704:	e7b0      	b.n	8006668 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006706:	4b17      	ldr	r3, [pc, #92]	; (8006764 <xTaskIncrementTick+0x170>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	4914      	ldr	r1, [pc, #80]	; (8006760 <xTaskIncrementTick+0x16c>)
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d907      	bls.n	800672e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800671e:	2301      	movs	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e004      	b.n	800672e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006724:	4b10      	ldr	r3, [pc, #64]	; (8006768 <xTaskIncrementTick+0x174>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3301      	adds	r3, #1
 800672a:	4a0f      	ldr	r2, [pc, #60]	; (8006768 <xTaskIncrementTick+0x174>)
 800672c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <xTaskIncrementTick+0x178>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006736:	2301      	movs	r3, #1
 8006738:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800673a:	697b      	ldr	r3, [r7, #20]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000f6c 	.word	0x20000f6c
 8006748:	20000f48 	.word	0x20000f48
 800674c:	20000efc 	.word	0x20000efc
 8006750:	20000f00 	.word	0x20000f00
 8006754:	20000f5c 	.word	0x20000f5c
 8006758:	20000f64 	.word	0x20000f64
 800675c:	20000f4c 	.word	0x20000f4c
 8006760:	20000a74 	.word	0x20000a74
 8006764:	20000a70 	.word	0x20000a70
 8006768:	20000f54 	.word	0x20000f54
 800676c:	20000f58 	.word	0x20000f58

08006770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006776:	4b2a      	ldr	r3, [pc, #168]	; (8006820 <vTaskSwitchContext+0xb0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800677e:	4b29      	ldr	r3, [pc, #164]	; (8006824 <vTaskSwitchContext+0xb4>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006784:	e046      	b.n	8006814 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006786:	4b27      	ldr	r3, [pc, #156]	; (8006824 <vTaskSwitchContext+0xb4>)
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800678c:	4b26      	ldr	r3, [pc, #152]	; (8006828 <vTaskSwitchContext+0xb8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	e010      	b.n	80067b6 <vTaskSwitchContext+0x46>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	607b      	str	r3, [r7, #4]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <vTaskSwitchContext+0x3e>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	491d      	ldr	r1, [pc, #116]	; (800682c <vTaskSwitchContext+0xbc>)
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0e4      	beq.n	8006794 <vTaskSwitchContext+0x24>
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4a15      	ldr	r2, [pc, #84]	; (800682c <vTaskSwitchContext+0xbc>)
 80067d6:	4413      	add	r3, r2
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	605a      	str	r2, [r3, #4]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3308      	adds	r3, #8
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d104      	bne.n	80067fa <vTaskSwitchContext+0x8a>
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	4a0b      	ldr	r2, [pc, #44]	; (8006830 <vTaskSwitchContext+0xc0>)
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	4a08      	ldr	r2, [pc, #32]	; (8006828 <vTaskSwitchContext+0xb8>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <vTaskSwitchContext+0xc0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3354      	adds	r3, #84	; 0x54
 8006810:	4a08      	ldr	r2, [pc, #32]	; (8006834 <vTaskSwitchContext+0xc4>)
 8006812:	6013      	str	r3, [r2, #0]
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	20000f6c 	.word	0x20000f6c
 8006824:	20000f58 	.word	0x20000f58
 8006828:	20000f4c 	.word	0x20000f4c
 800682c:	20000a74 	.word	0x20000a74
 8006830:	20000a70 	.word	0x20000a70
 8006834:	20000010 	.word	0x20000010

08006838 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	60fb      	str	r3, [r7, #12]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800685e:	4b07      	ldr	r3, [pc, #28]	; (800687c <vTaskPlaceOnEventList+0x44>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3318      	adds	r3, #24
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fe fe6b 	bl	8005542 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800686c:	2101      	movs	r1, #1
 800686e:	6838      	ldr	r0, [r7, #0]
 8006870:	f000 fbb8 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000a70 	.word	0x20000a70

08006880 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	617b      	str	r3, [r7, #20]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3318      	adds	r3, #24
 80068ae:	4619      	mov	r1, r3
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7fe fe22 	bl	80054fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295
 80068c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	68b8      	ldr	r0, [r7, #8]
 80068c6:	f000 fb8d 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
	}
 80068ca:	bf00      	nop
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000a70 	.word	0x20000a70

080068d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	60fb      	str	r3, [r7, #12]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	3318      	adds	r3, #24
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fe53 	bl	80055b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800690e:	4b1e      	ldr	r3, [pc, #120]	; (8006988 <xTaskRemoveFromEventList+0xb0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d11d      	bne.n	8006952 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3304      	adds	r3, #4
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fe4a 	bl	80055b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4b19      	ldr	r3, [pc, #100]	; (800698c <xTaskRemoveFromEventList+0xb4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d903      	bls.n	8006934 <xTaskRemoveFromEventList+0x5c>
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	4a16      	ldr	r2, [pc, #88]	; (800698c <xTaskRemoveFromEventList+0xb4>)
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4a13      	ldr	r2, [pc, #76]	; (8006990 <xTaskRemoveFromEventList+0xb8>)
 8006942:	441a      	add	r2, r3
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	3304      	adds	r3, #4
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f7fe fdd5 	bl	80054fa <vListInsertEnd>
 8006950:	e005      	b.n	800695e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	3318      	adds	r3, #24
 8006956:	4619      	mov	r1, r3
 8006958:	480e      	ldr	r0, [pc, #56]	; (8006994 <xTaskRemoveFromEventList+0xbc>)
 800695a:	f7fe fdce 	bl	80054fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006962:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <xTaskRemoveFromEventList+0xc0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	429a      	cmp	r2, r3
 800696a:	d905      	bls.n	8006978 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800696c:	2301      	movs	r3, #1
 800696e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <xTaskRemoveFromEventList+0xc4>)
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	e001      	b.n	800697c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800697c:	697b      	ldr	r3, [r7, #20]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000f6c 	.word	0x20000f6c
 800698c:	20000f4c 	.word	0x20000f4c
 8006990:	20000a74 	.word	0x20000a74
 8006994:	20000f04 	.word	0x20000f04
 8006998:	20000a70 	.word	0x20000a70
 800699c:	20000f58 	.word	0x20000f58

080069a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <vTaskInternalSetTimeOutState+0x24>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <vTaskInternalSetTimeOutState+0x28>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	605a      	str	r2, [r3, #4]
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	20000f5c 	.word	0x20000f5c
 80069c8:	20000f48 	.word	0x20000f48

080069cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	613b      	str	r3, [r7, #16]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	60fb      	str	r3, [r7, #12]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a0e:	f000 ff79 	bl	8007904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a12:	4b1d      	ldr	r3, [pc, #116]	; (8006a88 <xTaskCheckForTimeOut+0xbc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d102      	bne.n	8006a32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	e023      	b.n	8006a7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <xTaskCheckForTimeOut+0xc0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d007      	beq.n	8006a4e <xTaskCheckForTimeOut+0x82>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d302      	bcc.n	8006a4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	e015      	b.n	8006a7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d20b      	bcs.n	8006a70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff ff9b 	bl	80069a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	e004      	b.n	8006a7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a76:	2301      	movs	r3, #1
 8006a78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a7a:	f000 ff73 	bl	8007964 <vPortExitCritical>

	return xReturn;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3720      	adds	r7, #32
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000f48 	.word	0x20000f48
 8006a8c:	20000f5c 	.word	0x20000f5c

08006a90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a94:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <vTaskMissedYield+0x14>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	20000f58 	.word	0x20000f58

08006aa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ab0:	f000 f852 	bl	8006b58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <prvIdleTask+0x28>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d9f9      	bls.n	8006ab0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <prvIdleTask+0x2c>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006acc:	e7f0      	b.n	8006ab0 <prvIdleTask+0x8>
 8006ace:	bf00      	nop
 8006ad0:	20000a74 	.word	0x20000a74
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	e00c      	b.n	8006afe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4a12      	ldr	r2, [pc, #72]	; (8006b38 <prvInitialiseTaskLists+0x60>)
 8006af0:	4413      	add	r3, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fcd4 	bl	80054a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3301      	adds	r3, #1
 8006afc:	607b      	str	r3, [r7, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b37      	cmp	r3, #55	; 0x37
 8006b02:	d9ef      	bls.n	8006ae4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b04:	480d      	ldr	r0, [pc, #52]	; (8006b3c <prvInitialiseTaskLists+0x64>)
 8006b06:	f7fe fccb 	bl	80054a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b0a:	480d      	ldr	r0, [pc, #52]	; (8006b40 <prvInitialiseTaskLists+0x68>)
 8006b0c:	f7fe fcc8 	bl	80054a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b10:	480c      	ldr	r0, [pc, #48]	; (8006b44 <prvInitialiseTaskLists+0x6c>)
 8006b12:	f7fe fcc5 	bl	80054a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b16:	480c      	ldr	r0, [pc, #48]	; (8006b48 <prvInitialiseTaskLists+0x70>)
 8006b18:	f7fe fcc2 	bl	80054a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b1c:	480b      	ldr	r0, [pc, #44]	; (8006b4c <prvInitialiseTaskLists+0x74>)
 8006b1e:	f7fe fcbf 	bl	80054a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b22:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <prvInitialiseTaskLists+0x78>)
 8006b24:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <prvInitialiseTaskLists+0x64>)
 8006b26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b28:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <prvInitialiseTaskLists+0x7c>)
 8006b2a:	4a05      	ldr	r2, [pc, #20]	; (8006b40 <prvInitialiseTaskLists+0x68>)
 8006b2c:	601a      	str	r2, [r3, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000a74 	.word	0x20000a74
 8006b3c:	20000ed4 	.word	0x20000ed4
 8006b40:	20000ee8 	.word	0x20000ee8
 8006b44:	20000f04 	.word	0x20000f04
 8006b48:	20000f18 	.word	0x20000f18
 8006b4c:	20000f30 	.word	0x20000f30
 8006b50:	20000efc 	.word	0x20000efc
 8006b54:	20000f00 	.word	0x20000f00

08006b58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b5e:	e019      	b.n	8006b94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b60:	f000 fed0 	bl	8007904 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <prvCheckTasksWaitingTermination+0x50>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe fd1f 	bl	80055b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b76:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <prvCheckTasksWaitingTermination+0x54>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	4a0b      	ldr	r2, [pc, #44]	; (8006bac <prvCheckTasksWaitingTermination+0x54>)
 8006b7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <prvCheckTasksWaitingTermination+0x58>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <prvCheckTasksWaitingTermination+0x58>)
 8006b88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b8a:	f000 feeb 	bl	8007964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f810 	bl	8006bb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b94:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <prvCheckTasksWaitingTermination+0x58>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e1      	bne.n	8006b60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000f18 	.word	0x20000f18
 8006bac:	20000f44 	.word	0x20000f44
 8006bb0:	20000f2c 	.word	0x20000f2c

08006bb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3354      	adds	r3, #84	; 0x54
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 f9e5 	bl	8007f90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d108      	bne.n	8006be2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f87b 	bl	8007cd0 <vPortFree>
				vPortFree( pxTCB );
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 f878 	bl	8007cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006be0:	e018      	b.n	8006c14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d103      	bne.n	8006bf4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f86f 	bl	8007cd0 <vPortFree>
	}
 8006bf2:	e00f      	b.n	8006c14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d00a      	beq.n	8006c14 <prvDeleteTCB+0x60>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	60fb      	str	r3, [r7, #12]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <prvDeleteTCB+0x5e>
	}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c22:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <prvResetNextTaskUnblockTime+0x44>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <prvResetNextTaskUnblockTime+0x14>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <prvResetNextTaskUnblockTime+0x16>
 8006c30:	2300      	movs	r3, #0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c36:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <prvResetNextTaskUnblockTime+0x48>)
 8006c38:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c3e:	e008      	b.n	8006c52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <prvResetNextTaskUnblockTime+0x44>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4a05      	ldr	r2, [pc, #20]	; (8006c64 <prvResetNextTaskUnblockTime+0x48>)
 8006c50:	6013      	str	r3, [r2, #0]
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000efc 	.word	0x20000efc
 8006c64:	20000f64 	.word	0x20000f64

08006c68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <xTaskGetSchedulerState+0x34>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c76:	2301      	movs	r3, #1
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	e008      	b.n	8006c8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7c:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <xTaskGetSchedulerState+0x38>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c84:	2302      	movs	r3, #2
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	e001      	b.n	8006c8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c8e:	687b      	ldr	r3, [r7, #4]
	}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	20000f50 	.word	0x20000f50
 8006ca0:	20000f6c 	.word	0x20000f6c

08006ca4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d056      	beq.n	8006d68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cba:	4b2e      	ldr	r3, [pc, #184]	; (8006d74 <xTaskPriorityDisinherit+0xd0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d00a      	beq.n	8006cda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	60fb      	str	r3, [r7, #12]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60bb      	str	r3, [r7, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfc:	1e5a      	subs	r2, r3, #1
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d02c      	beq.n	8006d68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d128      	bne.n	8006d68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fc4a 	bl	80055b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d38:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <xTaskPriorityDisinherit+0xd4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d903      	bls.n	8006d48 <xTaskPriorityDisinherit+0xa4>
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	4a0c      	ldr	r2, [pc, #48]	; (8006d78 <xTaskPriorityDisinherit+0xd4>)
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4a09      	ldr	r2, [pc, #36]	; (8006d7c <xTaskPriorityDisinherit+0xd8>)
 8006d56:	441a      	add	r2, r3
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	f7fe fbcb 	bl	80054fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d64:	2301      	movs	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d68:	697b      	ldr	r3, [r7, #20]
	}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000a70 	.word	0x20000a70
 8006d78:	20000f4c 	.word	0x20000f4c
 8006d7c:	20000a74 	.word	0x20000a74

08006d80 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006d8e:	f000 fdb9 	bl	8007904 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006d92:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <xTaskNotifyWait+0xb8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d01c      	beq.n	8006dda <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006da0:	4b25      	ldr	r3, [pc, #148]	; (8006e38 <xTaskNotifyWait+0xb8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	43d2      	mvns	r2, r2
 8006dac:	400a      	ands	r2, r1
 8006dae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006db2:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <xTaskNotifyWait+0xb8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00b      	beq.n	8006dda <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	6838      	ldr	r0, [r7, #0]
 8006dc6:	f000 f90d 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006dca:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <xTaskNotifyWait+0xbc>)
 8006dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006dda:	f000 fdc3 	bl	8007964 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006dde:	f000 fd91 	bl	8007904 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006de8:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <xTaskNotifyWait+0xb8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006df4:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <xTaskNotifyWait+0xb8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d002      	beq.n	8006e08 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	e00a      	b.n	8006e1e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <xTaskNotifyWait+0xb8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	43d2      	mvns	r2, r2
 8006e14:	400a      	ands	r2, r1
 8006e16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e1e:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <xTaskNotifyWait+0xb8>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8006e28:	f000 fd9c 	bl	8007964 <vPortExitCritical>

		return xReturn;
 8006e2c:	697b      	ldr	r3, [r7, #20]
	}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000a70 	.word	0x20000a70
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08e      	sub	sp, #56	; 0x38
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006e50:	2301      	movs	r3, #1
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e70:	f000 fe2a 	bl	8007ac8 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006e78:	f3ef 8211 	mrs	r2, BASEPRI
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	623a      	str	r2, [r7, #32]
 8006e8e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006e90:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d82f      	bhi.n	8006f1c <xTaskGenericNotifyFromISR+0xdc>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <xTaskGenericNotifyFromISR+0x84>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006f1d 	.word	0x08006f1d
 8006ec8:	08006ed9 	.word	0x08006ed9
 8006ecc:	08006eeb 	.word	0x08006eeb
 8006ed0:	08006efb 	.word	0x08006efb
 8006ed4:	08006f05 	.word	0x08006f05
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006ee8:	e018      	b.n	8006f1c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006ef8:	e010      	b.n	8006f1c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006f02:	e00b      	b.n	8006f1c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d004      	beq.n	8006f16 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006f14:	e001      	b.n	8006f1a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006f1a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d147      	bne.n	8006fb4 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61bb      	str	r3, [r7, #24]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f42:	4b22      	ldr	r3, [pc, #136]	; (8006fcc <xTaskGenericNotifyFromISR+0x18c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d11d      	bne.n	8006f86 <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fb30 	bl	80055b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <xTaskGenericNotifyFromISR+0x190>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d903      	bls.n	8006f68 <xTaskGenericNotifyFromISR+0x128>
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	4a1a      	ldr	r2, [pc, #104]	; (8006fd0 <xTaskGenericNotifyFromISR+0x190>)
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <xTaskGenericNotifyFromISR+0x194>)
 8006f76:	441a      	add	r2, r3
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f7fe fabb 	bl	80054fa <vListInsertEnd>
 8006f84:	e005      	b.n	8006f92 <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	3318      	adds	r3, #24
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4812      	ldr	r0, [pc, #72]	; (8006fd8 <xTaskGenericNotifyFromISR+0x198>)
 8006f8e:	f7fe fab4 	bl	80054fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f96:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <xTaskGenericNotifyFromISR+0x19c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d909      	bls.n	8006fb4 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa8:	2201      	movs	r2, #1
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	e002      	b.n	8006fb4 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006fae:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <xTaskGenericNotifyFromISR+0x1a0>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f383 8811 	msr	BASEPRI, r3
}
 8006fbe:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3738      	adds	r7, #56	; 0x38
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000f6c 	.word	0x20000f6c
 8006fd0:	20000f4c 	.word	0x20000f4c
 8006fd4:	20000a74 	.word	0x20000a74
 8006fd8:	20000f04 	.word	0x20000f04
 8006fdc:	20000a70 	.word	0x20000a70
 8006fe0:	20000f58 	.word	0x20000f58

08006fe4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fee:	4b21      	ldr	r3, [pc, #132]	; (8007074 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff4:	4b20      	ldr	r3, [pc, #128]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fada 	bl	80055b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007006:	d10a      	bne.n	800701e <prvAddCurrentTaskToDelayedList+0x3a>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800700e:	4b1a      	ldr	r3, [pc, #104]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4819      	ldr	r0, [pc, #100]	; (800707c <prvAddCurrentTaskToDelayedList+0x98>)
 8007018:	f7fe fa6f 	bl	80054fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800701c:	e026      	b.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007026:	4b14      	ldr	r3, [pc, #80]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	429a      	cmp	r2, r3
 8007034:	d209      	bcs.n	800704a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007036:	4b12      	ldr	r3, [pc, #72]	; (8007080 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f7fe fa7d 	bl	8005542 <vListInsert>
}
 8007048:	e010      	b.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800704a:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <prvAddCurrentTaskToDelayedList+0xa0>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3304      	adds	r3, #4
 8007054:	4619      	mov	r1, r3
 8007056:	4610      	mov	r0, r2
 8007058:	f7fe fa73 	bl	8005542 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800705c:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <prvAddCurrentTaskToDelayedList+0xa4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	d202      	bcs.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007066:	4a08      	ldr	r2, [pc, #32]	; (8007088 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6013      	str	r3, [r2, #0]
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000f48 	.word	0x20000f48
 8007078:	20000a70 	.word	0x20000a70
 800707c:	20000f30 	.word	0x20000f30
 8007080:	20000f00 	.word	0x20000f00
 8007084:	20000efc 	.word	0x20000efc
 8007088:	20000f64 	.word	0x20000f64

0800708c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007096:	f000 facb 	bl	8007630 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800709a:	4b1c      	ldr	r3, [pc, #112]	; (800710c <xTimerCreateTimerTask+0x80>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d021      	beq.n	80070e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070aa:	1d3a      	adds	r2, r7, #4
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	f107 030c 	add.w	r3, r7, #12
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe f9d9 	bl	800546c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	9202      	str	r2, [sp, #8]
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	2302      	movs	r3, #2
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	460a      	mov	r2, r1
 80070cc:	4910      	ldr	r1, [pc, #64]	; (8007110 <xTimerCreateTimerTask+0x84>)
 80070ce:	4811      	ldr	r0, [pc, #68]	; (8007114 <xTimerCreateTimerTask+0x88>)
 80070d0:	f7fe ff80 	bl	8005fd4 <xTaskCreateStatic>
 80070d4:	4603      	mov	r3, r0
 80070d6:	4a10      	ldr	r2, [pc, #64]	; (8007118 <xTimerCreateTimerTask+0x8c>)
 80070d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070da:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <xTimerCreateTimerTask+0x8c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	613b      	str	r3, [r7, #16]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007102:	697b      	ldr	r3, [r7, #20]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000fa0 	.word	0x20000fa0
 8007110:	0800812c 	.word	0x0800812c
 8007114:	08007239 	.word	0x08007239
 8007118:	20000fa4 	.word	0x20000fa4

0800711c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800712a:	2300      	movs	r3, #0
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	623b      	str	r3, [r7, #32]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800714a:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <xTimerGenericCommand+0x98>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d02a      	beq.n	80071a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b05      	cmp	r3, #5
 8007162:	dc18      	bgt.n	8007196 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007164:	f7ff fd80 	bl	8006c68 <xTaskGetSchedulerState>
 8007168:	4603      	mov	r3, r0
 800716a:	2b02      	cmp	r3, #2
 800716c:	d109      	bne.n	8007182 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <xTimerGenericCommand+0x98>)
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f107 0110 	add.w	r1, r7, #16
 8007176:	2300      	movs	r3, #0
 8007178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800717a:	f7fe fb47 	bl	800580c <xQueueGenericSend>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24
 8007180:	e012      	b.n	80071a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007182:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <xTimerGenericCommand+0x98>)
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	f107 0110 	add.w	r1, r7, #16
 800718a:	2300      	movs	r3, #0
 800718c:	2200      	movs	r2, #0
 800718e:	f7fe fb3d 	bl	800580c <xQueueGenericSend>
 8007192:	6278      	str	r0, [r7, #36]	; 0x24
 8007194:	e008      	b.n	80071a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007196:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <xTimerGenericCommand+0x98>)
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	f107 0110 	add.w	r1, r7, #16
 800719e:	2300      	movs	r3, #0
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	f7fe fc31 	bl	8005a08 <xQueueGenericSendFromISR>
 80071a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3728      	adds	r7, #40	; 0x28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000fa0 	.word	0x20000fa0

080071b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af02      	add	r7, sp, #8
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <prvProcessExpiredTimer+0x7c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe f9ef 	bl	80055b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d122      	bne.n	8007224 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	18d1      	adds	r1, r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	6978      	ldr	r0, [r7, #20]
 80071ec:	f000 f8c8 	bl	8007380 <prvInsertTimerInActiveList>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d016      	beq.n	8007224 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071f6:	2300      	movs	r3, #0
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	2100      	movs	r1, #0
 8007200:	6978      	ldr	r0, [r7, #20]
 8007202:	f7ff ff8b 	bl	800711c <xTimerGenericCommand>
 8007206:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	6978      	ldr	r0, [r7, #20]
 800722a:	4798      	blx	r3
}
 800722c:	bf00      	nop
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000f98 	.word	0x20000f98

08007238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007240:	f107 0308 	add.w	r3, r7, #8
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f857 	bl	80072f8 <prvGetNextExpireTime>
 800724a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f803 	bl	800725c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007256:	f000 f8d5 	bl	8007404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800725a:	e7f1      	b.n	8007240 <prvTimerTask+0x8>

0800725c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007266:	f7ff f909 	bl	800647c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800726a:	f107 0308 	add.w	r3, r7, #8
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f866 	bl	8007340 <prvSampleTimeNow>
 8007274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d130      	bne.n	80072de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <prvProcessTimerOrBlockTask+0x3c>
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	429a      	cmp	r2, r3
 8007288:	d806      	bhi.n	8007298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800728a:	f7ff f905 	bl	8006498 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff ff91 	bl	80071b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007296:	e024      	b.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <prvProcessTimerOrBlockTask+0x90>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bf0c      	ite	eq
 80072a8:	2301      	moveq	r3, #1
 80072aa:	2300      	movne	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072b0:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <prvProcessTimerOrBlockTask+0x94>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	f7fe fe55 	bl	8005f6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072c2:	f7ff f8e9 	bl	8006498 <xTaskResumeAll>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <prvProcessTimerOrBlockTask+0x98>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
}
 80072dc:	e001      	b.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072de:	f7ff f8db 	bl	8006498 <xTaskResumeAll>
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000f9c 	.word	0x20000f9c
 80072f0:	20000fa0 	.word	0x20000fa0
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007300:	4b0e      	ldr	r3, [pc, #56]	; (800733c <prvGetNextExpireTime+0x44>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	bf0c      	ite	eq
 800730a:	2301      	moveq	r3, #1
 800730c:	2300      	movne	r3, #0
 800730e:	b2db      	uxtb	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800731e:	4b07      	ldr	r3, [pc, #28]	; (800733c <prvGetNextExpireTime+0x44>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e001      	b.n	800732e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800732e:	68fb      	ldr	r3, [r7, #12]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	20000f98 	.word	0x20000f98

08007340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007348:	f7ff f944 	bl	80065d4 <xTaskGetTickCount>
 800734c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800734e:	4b0b      	ldr	r3, [pc, #44]	; (800737c <prvSampleTimeNow+0x3c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d205      	bcs.n	8007364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007358:	f000 f908 	bl	800756c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e002      	b.n	800736a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800736a:	4a04      	ldr	r2, [pc, #16]	; (800737c <prvSampleTimeNow+0x3c>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007370:	68fb      	ldr	r3, [r7, #12]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20000fa8 	.word	0x20000fa8

08007380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d812      	bhi.n	80073cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d302      	bcc.n	80073ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e01b      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <prvInsertTimerInActiveList+0x7c>)
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7fe f8bc 	bl	8005542 <vListInsert>
 80073ca:	e012      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d206      	bcs.n	80073e2 <prvInsertTimerInActiveList+0x62>
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d302      	bcc.n	80073e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073dc:	2301      	movs	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e007      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <prvInsertTimerInActiveList+0x80>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fe f8a8 	bl	8005542 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073f2:	697b      	ldr	r3, [r7, #20]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000f9c 	.word	0x20000f9c
 8007400:	20000f98 	.word	0x20000f98

08007404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08e      	sub	sp, #56	; 0x38
 8007408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800740a:	e09d      	b.n	8007548 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	da18      	bge.n	8007444 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	3304      	adds	r3, #4
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	61fb      	str	r3, [r7, #28]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743a:	6850      	ldr	r0, [r2, #4]
 800743c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743e:	6892      	ldr	r2, [r2, #8]
 8007440:	4611      	mov	r1, r2
 8007442:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	db7d      	blt.n	8007546 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	3304      	adds	r3, #4
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe f8aa 	bl	80055b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007460:	463b      	mov	r3, r7
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff ff6c 	bl	8007340 <prvSampleTimeNow>
 8007468:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b09      	cmp	r3, #9
 800746e:	d86b      	bhi.n	8007548 <prvProcessReceivedCommands+0x144>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <prvProcessReceivedCommands+0x74>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	080074a1 	.word	0x080074a1
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a1 	.word	0x080074a1
 8007484:	08007549 	.word	0x08007549
 8007488:	080074fd 	.word	0x080074fd
 800748c:	08007535 	.word	0x08007535
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074a1 	.word	0x080074a1
 8007498:	08007549 	.word	0x08007549
 800749c:	080074fd 	.word	0x080074fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	18d1      	adds	r1, r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ae:	f7ff ff67 	bl	8007380 <prvInsertTimerInActiveList>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d047      	beq.n	8007548 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d13f      	bne.n	8007548 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	441a      	add	r2, r3
 80074d0:	2300      	movs	r3, #0
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	2300      	movs	r3, #0
 80074d6:	2100      	movs	r1, #0
 80074d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074da:	f7ff fe1f 	bl	800711c <xTimerGenericCommand>
 80074de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d130      	bne.n	8007548 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	61bb      	str	r3, [r7, #24]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	617b      	str	r3, [r7, #20]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	18d1      	adds	r1, r2, r3
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800752c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752e:	f7ff ff27 	bl	8007380 <prvInsertTimerInActiveList>
					break;
 8007532:	e009      	b.n	8007548 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800753e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007540:	f000 fbc6 	bl	8007cd0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007544:	e000      	b.n	8007548 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007546:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007548:	4b07      	ldr	r3, [pc, #28]	; (8007568 <prvProcessReceivedCommands+0x164>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	1d39      	adds	r1, r7, #4
 800754e:	2200      	movs	r2, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe faf1 	bl	8005b38 <xQueueReceive>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	f47f af57 	bne.w	800740c <prvProcessReceivedCommands+0x8>
	}
}
 800755e:	bf00      	nop
 8007560:	bf00      	nop
 8007562:	3730      	adds	r7, #48	; 0x30
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	20000fa0 	.word	0x20000fa0

0800756c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007572:	e045      	b.n	8007600 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007574:	4b2c      	ldr	r3, [pc, #176]	; (8007628 <prvSwitchTimerLists+0xbc>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800757e:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <prvSwitchTimerLists+0xbc>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3304      	adds	r3, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe f811 	bl	80055b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d12e      	bne.n	8007600 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4413      	add	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d90e      	bls.n	80075d2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075c0:	4b19      	ldr	r3, [pc, #100]	; (8007628 <prvSwitchTimerLists+0xbc>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f7fd ffb9 	bl	8005542 <vListInsert>
 80075d0:	e016      	b.n	8007600 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075d2:	2300      	movs	r3, #0
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	2300      	movs	r3, #0
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	2100      	movs	r1, #0
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff fd9d 	bl	800711c <xTimerGenericCommand>
 80075e2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <prvSwitchTimerLists+0x94>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	603b      	str	r3, [r7, #0]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007600:	4b09      	ldr	r3, [pc, #36]	; (8007628 <prvSwitchTimerLists+0xbc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1b4      	bne.n	8007574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <prvSwitchTimerLists+0xbc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <prvSwitchTimerLists+0xc0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a04      	ldr	r2, [pc, #16]	; (8007628 <prvSwitchTimerLists+0xbc>)
 8007616:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <prvSwitchTimerLists+0xc0>)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	6013      	str	r3, [r2, #0]
}
 800761e:	bf00      	nop
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000f98 	.word	0x20000f98
 800762c:	20000f9c 	.word	0x20000f9c

08007630 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007636:	f000 f965 	bl	8007904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800763a:	4b15      	ldr	r3, [pc, #84]	; (8007690 <prvCheckForValidListAndQueue+0x60>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d120      	bne.n	8007684 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007642:	4814      	ldr	r0, [pc, #80]	; (8007694 <prvCheckForValidListAndQueue+0x64>)
 8007644:	f7fd ff2c 	bl	80054a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007648:	4813      	ldr	r0, [pc, #76]	; (8007698 <prvCheckForValidListAndQueue+0x68>)
 800764a:	f7fd ff29 	bl	80054a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <prvCheckForValidListAndQueue+0x6c>)
 8007650:	4a10      	ldr	r2, [pc, #64]	; (8007694 <prvCheckForValidListAndQueue+0x64>)
 8007652:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007654:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <prvCheckForValidListAndQueue+0x70>)
 8007656:	4a10      	ldr	r2, [pc, #64]	; (8007698 <prvCheckForValidListAndQueue+0x68>)
 8007658:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800765a:	2300      	movs	r3, #0
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	4b11      	ldr	r3, [pc, #68]	; (80076a4 <prvCheckForValidListAndQueue+0x74>)
 8007660:	4a11      	ldr	r2, [pc, #68]	; (80076a8 <prvCheckForValidListAndQueue+0x78>)
 8007662:	2110      	movs	r1, #16
 8007664:	200a      	movs	r0, #10
 8007666:	f7fe f837 	bl	80056d8 <xQueueGenericCreateStatic>
 800766a:	4603      	mov	r3, r0
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <prvCheckForValidListAndQueue+0x60>)
 800766e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <prvCheckForValidListAndQueue+0x60>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <prvCheckForValidListAndQueue+0x60>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	490b      	ldr	r1, [pc, #44]	; (80076ac <prvCheckForValidListAndQueue+0x7c>)
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fc4a 	bl	8005f18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007684:	f000 f96e 	bl	8007964 <vPortExitCritical>
}
 8007688:	bf00      	nop
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000fa0 	.word	0x20000fa0
 8007694:	20000f70 	.word	0x20000f70
 8007698:	20000f84 	.word	0x20000f84
 800769c:	20000f98 	.word	0x20000f98
 80076a0:	20000f9c 	.word	0x20000f9c
 80076a4:	2000104c 	.word	0x2000104c
 80076a8:	20000fac 	.word	0x20000fac
 80076ac:	08008134 	.word	0x08008134

080076b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3b04      	subs	r3, #4
 80076c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3b04      	subs	r3, #4
 80076ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f023 0201 	bic.w	r2, r3, #1
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3b04      	subs	r3, #4
 80076de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076e0:	4a0c      	ldr	r2, [pc, #48]	; (8007714 <pxPortInitialiseStack+0x64>)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3b14      	subs	r3, #20
 80076ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3b04      	subs	r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f06f 0202 	mvn.w	r2, #2
 80076fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3b20      	subs	r3, #32
 8007704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007706:	68fb      	ldr	r3, [r7, #12]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	08007719 	.word	0x08007719

08007718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007722:	4b12      	ldr	r3, [pc, #72]	; (800776c <prvTaskExitError+0x54>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d00a      	beq.n	8007742 <prvTaskExitError+0x2a>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	60fb      	str	r3, [r7, #12]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <prvTaskExitError+0x28>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	60bb      	str	r3, [r7, #8]
}
 8007754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007756:	bf00      	nop
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0fc      	beq.n	8007758 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	2000000c 	.word	0x2000000c

08007770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <pxCurrentTCBConst2>)
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	6808      	ldr	r0, [r1, #0]
 8007776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	f380 8809 	msr	PSP, r0
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8811 	msr	BASEPRI, r0
 800778a:	4770      	bx	lr
 800778c:	f3af 8000 	nop.w

08007790 <pxCurrentTCBConst2>:
 8007790:	20000a70 	.word	0x20000a70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop

08007798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007798:	4808      	ldr	r0, [pc, #32]	; (80077bc <prvPortStartFirstTask+0x24>)
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f380 8808 	msr	MSP, r0
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8814 	msr	CONTROL, r0
 80077aa:	b662      	cpsie	i
 80077ac:	b661      	cpsie	f
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	df00      	svc	0
 80077b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ba:	bf00      	nop
 80077bc:	e000ed08 	.word	0xe000ed08

080077c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077c6:	4b46      	ldr	r3, [pc, #280]	; (80078e0 <xPortStartScheduler+0x120>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a46      	ldr	r2, [pc, #280]	; (80078e4 <xPortStartScheduler+0x124>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10a      	bne.n	80077e6 <xPortStartScheduler+0x26>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	613b      	str	r3, [r7, #16]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077e6:	4b3e      	ldr	r3, [pc, #248]	; (80078e0 <xPortStartScheduler+0x120>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a3f      	ldr	r2, [pc, #252]	; (80078e8 <xPortStartScheduler+0x128>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10a      	bne.n	8007806 <xPortStartScheduler+0x46>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60fb      	str	r3, [r7, #12]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007806:	4b39      	ldr	r3, [pc, #228]	; (80078ec <xPortStartScheduler+0x12c>)
 8007808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007828:	b2da      	uxtb	r2, r3
 800782a:	4b31      	ldr	r3, [pc, #196]	; (80078f0 <xPortStartScheduler+0x130>)
 800782c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800782e:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <xPortStartScheduler+0x134>)
 8007830:	2207      	movs	r2, #7
 8007832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007834:	e009      	b.n	800784a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007836:	4b2f      	ldr	r3, [pc, #188]	; (80078f4 <xPortStartScheduler+0x134>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	4a2d      	ldr	r2, [pc, #180]	; (80078f4 <xPortStartScheduler+0x134>)
 800783e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	b2db      	uxtb	r3, r3
 8007848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007852:	2b80      	cmp	r3, #128	; 0x80
 8007854:	d0ef      	beq.n	8007836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007856:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <xPortStartScheduler+0x134>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f1c3 0307 	rsb	r3, r3, #7
 800785e:	2b04      	cmp	r3, #4
 8007860:	d00a      	beq.n	8007878 <xPortStartScheduler+0xb8>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	60bb      	str	r3, [r7, #8]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <xPortStartScheduler+0x134>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <xPortStartScheduler+0x134>)
 8007880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007882:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <xPortStartScheduler+0x134>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800788a:	4a1a      	ldr	r2, [pc, #104]	; (80078f4 <xPortStartScheduler+0x134>)
 800788c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	b2da      	uxtb	r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007896:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <xPortStartScheduler+0x138>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <xPortStartScheduler+0x138>)
 800789c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <xPortStartScheduler+0x138>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a14      	ldr	r2, [pc, #80]	; (80078f8 <xPortStartScheduler+0x138>)
 80078a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078ae:	f000 f8dd 	bl	8007a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078b2:	4b12      	ldr	r3, [pc, #72]	; (80078fc <xPortStartScheduler+0x13c>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078b8:	f000 f8fc 	bl	8007ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078bc:	4b10      	ldr	r3, [pc, #64]	; (8007900 <xPortStartScheduler+0x140>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a0f      	ldr	r2, [pc, #60]	; (8007900 <xPortStartScheduler+0x140>)
 80078c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078c8:	f7ff ff66 	bl	8007798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078cc:	f7fe ff50 	bl	8006770 <vTaskSwitchContext>
	prvTaskExitError();
 80078d0:	f7ff ff22 	bl	8007718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed00 	.word	0xe000ed00
 80078e4:	410fc271 	.word	0x410fc271
 80078e8:	410fc270 	.word	0x410fc270
 80078ec:	e000e400 	.word	0xe000e400
 80078f0:	2000109c 	.word	0x2000109c
 80078f4:	200010a0 	.word	0x200010a0
 80078f8:	e000ed20 	.word	0xe000ed20
 80078fc:	2000000c 	.word	0x2000000c
 8007900:	e000ef34 	.word	0xe000ef34

08007904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	607b      	str	r3, [r7, #4]
}
 800791c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <vPortEnterCritical+0x58>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	4a0d      	ldr	r2, [pc, #52]	; (800795c <vPortEnterCritical+0x58>)
 8007926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007928:	4b0c      	ldr	r3, [pc, #48]	; (800795c <vPortEnterCritical+0x58>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d10f      	bne.n	8007950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <vPortEnterCritical+0x5c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <vPortEnterCritical+0x4c>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	603b      	str	r3, [r7, #0]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <vPortEnterCritical+0x4a>
	}
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	2000000c 	.word	0x2000000c
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <vPortExitCritical+0x50>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <vPortExitCritical+0x24>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	607b      	str	r3, [r7, #4]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <vPortExitCritical+0x50>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3b01      	subs	r3, #1
 800798e:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <vPortExitCritical+0x50>)
 8007990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <vPortExitCritical+0x50>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <vPortExitCritical+0x42>
 800799a:	2300      	movs	r3, #0
 800799c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	f383 8811 	msr	BASEPRI, r3
}
 80079a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	2000000c 	.word	0x2000000c
	...

080079c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079c0:	f3ef 8009 	mrs	r0, PSP
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <pxCurrentTCBConst>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	f01e 0f10 	tst.w	lr, #16
 80079d0:	bf08      	it	eq
 80079d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079da:	6010      	str	r0, [r2, #0]
 80079dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079e4:	f380 8811 	msr	BASEPRI, r0
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f7fe febe 	bl	8006770 <vTaskSwitchContext>
 80079f4:	f04f 0000 	mov.w	r0, #0
 80079f8:	f380 8811 	msr	BASEPRI, r0
 80079fc:	bc09      	pop	{r0, r3}
 80079fe:	6819      	ldr	r1, [r3, #0]
 8007a00:	6808      	ldr	r0, [r1, #0]
 8007a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a06:	f01e 0f10 	tst.w	lr, #16
 8007a0a:	bf08      	it	eq
 8007a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a10:	f380 8809 	msr	PSP, r0
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	f3af 8000 	nop.w

08007a20 <pxCurrentTCBConst>:
 8007a20:	20000a70 	.word	0x20000a70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
}
 8007a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a42:	f7fe fdd7 	bl	80065f4 <xTaskIncrementTick>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <xPortSysTickHandler+0x40>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	2300      	movs	r3, #0
 8007a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f383 8811 	msr	BASEPRI, r3
}
 8007a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <vPortSetupTimerInterrupt+0x34>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a76:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <vPortSetupTimerInterrupt+0x38>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <vPortSetupTimerInterrupt+0x3c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a0a      	ldr	r2, [pc, #40]	; (8007aac <vPortSetupTimerInterrupt+0x40>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <vPortSetupTimerInterrupt+0x44>)
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <vPortSetupTimerInterrupt+0x34>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
}
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	e000e010 	.word	0xe000e010
 8007aa4:	e000e018 	.word	0xe000e018
 8007aa8:	20000000 	.word	0x20000000
 8007aac:	10624dd3 	.word	0x10624dd3
 8007ab0:	e000e014 	.word	0xe000e014

08007ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ac4 <vPortEnableVFP+0x10>
 8007ab8:	6801      	ldr	r1, [r0, #0]
 8007aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007abe:	6001      	str	r1, [r0, #0]
 8007ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ac2:	bf00      	nop
 8007ac4:	e000ed88 	.word	0xe000ed88

08007ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ace:	f3ef 8305 	mrs	r3, IPSR
 8007ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b0f      	cmp	r3, #15
 8007ad8:	d914      	bls.n	8007b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ada:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <vPortValidateInterruptPriority+0x70>)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ae4:	4b15      	ldr	r3, [pc, #84]	; (8007b3c <vPortValidateInterruptPriority+0x74>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	7afa      	ldrb	r2, [r7, #11]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d20a      	bcs.n	8007b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b04:	4b0e      	ldr	r3, [pc, #56]	; (8007b40 <vPortValidateInterruptPriority+0x78>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	; (8007b44 <vPortValidateInterruptPriority+0x7c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d90a      	bls.n	8007b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	603b      	str	r3, [r7, #0]
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <vPortValidateInterruptPriority+0x60>
	}
 8007b2a:	bf00      	nop
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	e000e3f0 	.word	0xe000e3f0
 8007b3c:	2000109c 	.word	0x2000109c
 8007b40:	e000ed0c 	.word	0xe000ed0c
 8007b44:	200010a0 	.word	0x200010a0

08007b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b54:	f7fe fc92 	bl	800647c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b58:	4b58      	ldr	r3, [pc, #352]	; (8007cbc <pvPortMalloc+0x174>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b60:	f000 f910 	bl	8007d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b64:	4b56      	ldr	r3, [pc, #344]	; (8007cc0 <pvPortMalloc+0x178>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f040 808e 	bne.w	8007c8e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01d      	beq.n	8007bb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b78:	2208      	movs	r2, #8
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d014      	beq.n	8007bb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f023 0307 	bic.w	r3, r3, #7
 8007b90:	3308      	adds	r3, #8
 8007b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <pvPortMalloc+0x6c>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	617b      	str	r3, [r7, #20]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d069      	beq.n	8007c8e <pvPortMalloc+0x146>
 8007bba:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <pvPortMalloc+0x17c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d864      	bhi.n	8007c8e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bc4:	4b40      	ldr	r3, [pc, #256]	; (8007cc8 <pvPortMalloc+0x180>)
 8007bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bc8:	4b3f      	ldr	r3, [pc, #252]	; (8007cc8 <pvPortMalloc+0x180>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bce:	e004      	b.n	8007bda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d903      	bls.n	8007bec <pvPortMalloc+0xa4>
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f1      	bne.n	8007bd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bec:	4b33      	ldr	r3, [pc, #204]	; (8007cbc <pvPortMalloc+0x174>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d04b      	beq.n	8007c8e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	4413      	add	r3, r2
 8007bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	2308      	movs	r3, #8
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d91f      	bls.n	8007c58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <pvPortMalloc+0xf8>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	613b      	str	r3, [r7, #16]
}
 8007c3c:	bf00      	nop
 8007c3e:	e7fe      	b.n	8007c3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	1ad2      	subs	r2, r2, r3
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c52:	69b8      	ldr	r0, [r7, #24]
 8007c54:	f000 f8f8 	bl	8007e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c58:	4b1a      	ldr	r3, [pc, #104]	; (8007cc4 <pvPortMalloc+0x17c>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	4a18      	ldr	r2, [pc, #96]	; (8007cc4 <pvPortMalloc+0x17c>)
 8007c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c66:	4b17      	ldr	r3, [pc, #92]	; (8007cc4 <pvPortMalloc+0x17c>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <pvPortMalloc+0x184>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d203      	bcs.n	8007c7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c72:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <pvPortMalloc+0x17c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <pvPortMalloc+0x184>)
 8007c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <pvPortMalloc+0x178>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c8e:	f7fe fc03 	bl	8006498 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <pvPortMalloc+0x16a>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	60fb      	str	r3, [r7, #12]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <pvPortMalloc+0x168>
	return pvReturn;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3728      	adds	r7, #40	; 0x28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	200014ac 	.word	0x200014ac
 8007cc0:	200014b8 	.word	0x200014b8
 8007cc4:	200014b0 	.word	0x200014b0
 8007cc8:	200014a4 	.word	0x200014a4
 8007ccc:	200014b4 	.word	0x200014b4

08007cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d048      	beq.n	8007d74 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	425b      	negs	r3, r3
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4413      	add	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	4b21      	ldr	r3, [pc, #132]	; (8007d7c <vPortFree+0xac>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <vPortFree+0x44>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60fb      	str	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <vPortFree+0x62>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	60bb      	str	r3, [r7, #8]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <vPortFree+0xac>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d019      	beq.n	8007d74 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d115      	bne.n	8007d74 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <vPortFree+0xac>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	43db      	mvns	r3, r3
 8007d52:	401a      	ands	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d58:	f7fe fb90 	bl	800647c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <vPortFree+0xb0>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4413      	add	r3, r2
 8007d66:	4a06      	ldr	r2, [pc, #24]	; (8007d80 <vPortFree+0xb0>)
 8007d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d6a:	6938      	ldr	r0, [r7, #16]
 8007d6c:	f000 f86c 	bl	8007e48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d70:	f7fe fb92 	bl	8006498 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d74:	bf00      	nop
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	200014b8 	.word	0x200014b8
 8007d80:	200014b0 	.word	0x200014b0

08007d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d90:	4b27      	ldr	r3, [pc, #156]	; (8007e30 <prvHeapInit+0xac>)
 8007d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3307      	adds	r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0307 	bic.w	r3, r3, #7
 8007daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	4a1f      	ldr	r2, [pc, #124]	; (8007e30 <prvHeapInit+0xac>)
 8007db4:	4413      	add	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <prvHeapInit+0xb0>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <prvHeapInit+0xb0>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0307 	bic.w	r3, r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <prvHeapInit+0xb4>)
 8007de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007de6:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <prvHeapInit+0xb4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dee:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <prvHeapInit+0xb4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e04:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <prvHeapInit+0xb4>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <prvHeapInit+0xb8>)
 8007e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <prvHeapInit+0xbc>)
 8007e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e1c:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <prvHeapInit+0xc0>)
 8007e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	200010a4 	.word	0x200010a4
 8007e34:	200014a4 	.word	0x200014a4
 8007e38:	200014ac 	.word	0x200014ac
 8007e3c:	200014b4 	.word	0x200014b4
 8007e40:	200014b0 	.word	0x200014b0
 8007e44:	200014b8 	.word	0x200014b8

08007e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e50:	4b28      	ldr	r3, [pc, #160]	; (8007ef4 <prvInsertBlockIntoFreeList+0xac>)
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e002      	b.n	8007e5c <prvInsertBlockIntoFreeList+0x14>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d8f7      	bhi.n	8007e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d108      	bne.n	8007e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d118      	bne.n	8007ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d00d      	beq.n	8007ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e008      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e003      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d002      	beq.n	8007ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	200014a4 	.word	0x200014a4
 8007ef8:	200014ac 	.word	0x200014ac

08007efc <__libc_init_array>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4d0d      	ldr	r5, [pc, #52]	; (8007f34 <__libc_init_array+0x38>)
 8007f00:	4c0d      	ldr	r4, [pc, #52]	; (8007f38 <__libc_init_array+0x3c>)
 8007f02:	1b64      	subs	r4, r4, r5
 8007f04:	10a4      	asrs	r4, r4, #2
 8007f06:	2600      	movs	r6, #0
 8007f08:	42a6      	cmp	r6, r4
 8007f0a:	d109      	bne.n	8007f20 <__libc_init_array+0x24>
 8007f0c:	4d0b      	ldr	r5, [pc, #44]	; (8007f3c <__libc_init_array+0x40>)
 8007f0e:	4c0c      	ldr	r4, [pc, #48]	; (8007f40 <__libc_init_array+0x44>)
 8007f10:	f000 f8f2 	bl	80080f8 <_init>
 8007f14:	1b64      	subs	r4, r4, r5
 8007f16:	10a4      	asrs	r4, r4, #2
 8007f18:	2600      	movs	r6, #0
 8007f1a:	42a6      	cmp	r6, r4
 8007f1c:	d105      	bne.n	8007f2a <__libc_init_array+0x2e>
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}
 8007f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f24:	4798      	blx	r3
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7ee      	b.n	8007f08 <__libc_init_array+0xc>
 8007f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2e:	4798      	blx	r3
 8007f30:	3601      	adds	r6, #1
 8007f32:	e7f2      	b.n	8007f1a <__libc_init_array+0x1e>
 8007f34:	0800821c 	.word	0x0800821c
 8007f38:	0800821c 	.word	0x0800821c
 8007f3c:	0800821c 	.word	0x0800821c
 8007f40:	08008220 	.word	0x08008220

08007f44 <__retarget_lock_acquire_recursive>:
 8007f44:	4770      	bx	lr

08007f46 <__retarget_lock_release_recursive>:
 8007f46:	4770      	bx	lr

08007f48 <memcpy>:
 8007f48:	440a      	add	r2, r1
 8007f4a:	4291      	cmp	r1, r2
 8007f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f50:	d100      	bne.n	8007f54 <memcpy+0xc>
 8007f52:	4770      	bx	lr
 8007f54:	b510      	push	{r4, lr}
 8007f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f5e:	4291      	cmp	r1, r2
 8007f60:	d1f9      	bne.n	8007f56 <memcpy+0xe>
 8007f62:	bd10      	pop	{r4, pc}

08007f64 <memset>:
 8007f64:	4402      	add	r2, r0
 8007f66:	4603      	mov	r3, r0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d100      	bne.n	8007f6e <memset+0xa>
 8007f6c:	4770      	bx	lr
 8007f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f72:	e7f9      	b.n	8007f68 <memset+0x4>

08007f74 <cleanup_glue>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	460c      	mov	r4, r1
 8007f78:	6809      	ldr	r1, [r1, #0]
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	b109      	cbz	r1, 8007f82 <cleanup_glue+0xe>
 8007f7e:	f7ff fff9 	bl	8007f74 <cleanup_glue>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8a:	f000 b869 	b.w	8008060 <_free_r>
	...

08007f90 <_reclaim_reent>:
 8007f90:	4b2c      	ldr	r3, [pc, #176]	; (8008044 <_reclaim_reent+0xb4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4283      	cmp	r3, r0
 8007f96:	b570      	push	{r4, r5, r6, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	d051      	beq.n	8008040 <_reclaim_reent+0xb0>
 8007f9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f9e:	b143      	cbz	r3, 8007fb2 <_reclaim_reent+0x22>
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d14a      	bne.n	800803c <_reclaim_reent+0xac>
 8007fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fa8:	6819      	ldr	r1, [r3, #0]
 8007faa:	b111      	cbz	r1, 8007fb2 <_reclaim_reent+0x22>
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 f857 	bl	8008060 <_free_r>
 8007fb2:	6961      	ldr	r1, [r4, #20]
 8007fb4:	b111      	cbz	r1, 8007fbc <_reclaim_reent+0x2c>
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 f852 	bl	8008060 <_free_r>
 8007fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007fbe:	b111      	cbz	r1, 8007fc6 <_reclaim_reent+0x36>
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 f84d 	bl	8008060 <_free_r>
 8007fc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007fc8:	b111      	cbz	r1, 8007fd0 <_reclaim_reent+0x40>
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 f848 	bl	8008060 <_free_r>
 8007fd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007fd2:	b111      	cbz	r1, 8007fda <_reclaim_reent+0x4a>
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 f843 	bl	8008060 <_free_r>
 8007fda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007fdc:	b111      	cbz	r1, 8007fe4 <_reclaim_reent+0x54>
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 f83e 	bl	8008060 <_free_r>
 8007fe4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007fe6:	b111      	cbz	r1, 8007fee <_reclaim_reent+0x5e>
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 f839 	bl	8008060 <_free_r>
 8007fee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ff0:	b111      	cbz	r1, 8007ff8 <_reclaim_reent+0x68>
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 f834 	bl	8008060 <_free_r>
 8007ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ffa:	b111      	cbz	r1, 8008002 <_reclaim_reent+0x72>
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 f82f 	bl	8008060 <_free_r>
 8008002:	69a3      	ldr	r3, [r4, #24]
 8008004:	b1e3      	cbz	r3, 8008040 <_reclaim_reent+0xb0>
 8008006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008008:	4620      	mov	r0, r4
 800800a:	4798      	blx	r3
 800800c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800800e:	b1b9      	cbz	r1, 8008040 <_reclaim_reent+0xb0>
 8008010:	4620      	mov	r0, r4
 8008012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008016:	f7ff bfad 	b.w	8007f74 <cleanup_glue>
 800801a:	5949      	ldr	r1, [r1, r5]
 800801c:	b941      	cbnz	r1, 8008030 <_reclaim_reent+0xa0>
 800801e:	3504      	adds	r5, #4
 8008020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008022:	2d80      	cmp	r5, #128	; 0x80
 8008024:	68d9      	ldr	r1, [r3, #12]
 8008026:	d1f8      	bne.n	800801a <_reclaim_reent+0x8a>
 8008028:	4620      	mov	r0, r4
 800802a:	f000 f819 	bl	8008060 <_free_r>
 800802e:	e7ba      	b.n	8007fa6 <_reclaim_reent+0x16>
 8008030:	680e      	ldr	r6, [r1, #0]
 8008032:	4620      	mov	r0, r4
 8008034:	f000 f814 	bl	8008060 <_free_r>
 8008038:	4631      	mov	r1, r6
 800803a:	e7ef      	b.n	800801c <_reclaim_reent+0x8c>
 800803c:	2500      	movs	r5, #0
 800803e:	e7ef      	b.n	8008020 <_reclaim_reent+0x90>
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	bf00      	nop
 8008044:	20000010 	.word	0x20000010

08008048 <__malloc_lock>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__malloc_lock+0x8>)
 800804a:	f7ff bf7b 	b.w	8007f44 <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	200014bc 	.word	0x200014bc

08008054 <__malloc_unlock>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__malloc_unlock+0x8>)
 8008056:	f7ff bf76 	b.w	8007f46 <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	200014bc 	.word	0x200014bc

08008060 <_free_r>:
 8008060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008062:	2900      	cmp	r1, #0
 8008064:	d044      	beq.n	80080f0 <_free_r+0x90>
 8008066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800806a:	9001      	str	r0, [sp, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	f1a1 0404 	sub.w	r4, r1, #4
 8008072:	bfb8      	it	lt
 8008074:	18e4      	addlt	r4, r4, r3
 8008076:	f7ff ffe7 	bl	8008048 <__malloc_lock>
 800807a:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <_free_r+0x94>)
 800807c:	9801      	ldr	r0, [sp, #4]
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	b933      	cbnz	r3, 8008090 <_free_r+0x30>
 8008082:	6063      	str	r3, [r4, #4]
 8008084:	6014      	str	r4, [r2, #0]
 8008086:	b003      	add	sp, #12
 8008088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800808c:	f7ff bfe2 	b.w	8008054 <__malloc_unlock>
 8008090:	42a3      	cmp	r3, r4
 8008092:	d908      	bls.n	80080a6 <_free_r+0x46>
 8008094:	6825      	ldr	r5, [r4, #0]
 8008096:	1961      	adds	r1, r4, r5
 8008098:	428b      	cmp	r3, r1
 800809a:	bf01      	itttt	eq
 800809c:	6819      	ldreq	r1, [r3, #0]
 800809e:	685b      	ldreq	r3, [r3, #4]
 80080a0:	1949      	addeq	r1, r1, r5
 80080a2:	6021      	streq	r1, [r4, #0]
 80080a4:	e7ed      	b.n	8008082 <_free_r+0x22>
 80080a6:	461a      	mov	r2, r3
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	b10b      	cbz	r3, 80080b0 <_free_r+0x50>
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	d9fa      	bls.n	80080a6 <_free_r+0x46>
 80080b0:	6811      	ldr	r1, [r2, #0]
 80080b2:	1855      	adds	r5, r2, r1
 80080b4:	42a5      	cmp	r5, r4
 80080b6:	d10b      	bne.n	80080d0 <_free_r+0x70>
 80080b8:	6824      	ldr	r4, [r4, #0]
 80080ba:	4421      	add	r1, r4
 80080bc:	1854      	adds	r4, r2, r1
 80080be:	42a3      	cmp	r3, r4
 80080c0:	6011      	str	r1, [r2, #0]
 80080c2:	d1e0      	bne.n	8008086 <_free_r+0x26>
 80080c4:	681c      	ldr	r4, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	6053      	str	r3, [r2, #4]
 80080ca:	4421      	add	r1, r4
 80080cc:	6011      	str	r1, [r2, #0]
 80080ce:	e7da      	b.n	8008086 <_free_r+0x26>
 80080d0:	d902      	bls.n	80080d8 <_free_r+0x78>
 80080d2:	230c      	movs	r3, #12
 80080d4:	6003      	str	r3, [r0, #0]
 80080d6:	e7d6      	b.n	8008086 <_free_r+0x26>
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	1961      	adds	r1, r4, r5
 80080dc:	428b      	cmp	r3, r1
 80080de:	bf04      	itt	eq
 80080e0:	6819      	ldreq	r1, [r3, #0]
 80080e2:	685b      	ldreq	r3, [r3, #4]
 80080e4:	6063      	str	r3, [r4, #4]
 80080e6:	bf04      	itt	eq
 80080e8:	1949      	addeq	r1, r1, r5
 80080ea:	6021      	streq	r1, [r4, #0]
 80080ec:	6054      	str	r4, [r2, #4]
 80080ee:	e7ca      	b.n	8008086 <_free_r+0x26>
 80080f0:	b003      	add	sp, #12
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	200014c0 	.word	0x200014c0

080080f8 <_init>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr

08008104 <_fini>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	bf00      	nop
 8008108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810a:	bc08      	pop	{r3}
 800810c:	469e      	mov	lr, r3
 800810e:	4770      	bx	lr
