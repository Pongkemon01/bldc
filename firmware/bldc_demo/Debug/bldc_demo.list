
bldc_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081dc  080081dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080081dc  080081dc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081dc  080081dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081e0  080081e0  000181e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080081e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001444  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200014b8  200014b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ded1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000353b  00000000  00000000  0003df75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  000414b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001578  00000000  00000000  00042b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003804  00000000  00000000  000440c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c1af  00000000  00000000  000478cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7886  00000000  00000000  00063a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011b301  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006380  00000000  00000000  0011b354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080b8 	.word	0x080080b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080080b8 	.word	0x080080b8

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fcf0 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82e 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 fa48 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 fa16 	bl	8000610 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001e4:	f000 f910 	bl	8000408 <MX_SPI1_Init>
  MX_TIM1_Init();
 80001e8:	f000 f94c 	bl	8000484 <MX_TIM1_Init>
  MX_ADC1_Init();
 80001ec:	f000 f88e 	bl	800030c <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80001f0:	f000 f87f 	bl	80002f2 <MX_NVIC_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f004 ffba 	bl	800516c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f8:	4a09      	ldr	r2, [pc, #36]	; (8000220 <main+0x50>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0x54>)
 80001fe:	f005 f81d 	bl	800523c <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <main+0x58>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <main+0x5c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x60>)
 800020e:	f005 f815 	bl	800523c <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a07      	ldr	r2, [pc, #28]	; (8000234 <main+0x64>)
 8000216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f004 ffdc 	bl	80051d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x4c>
 800021e:	bf00      	nop
 8000220:	080080fc 	.word	0x080080fc
 8000224:	08000705 	.word	0x08000705
 8000228:	20000218 	.word	0x20000218
 800022c:	08008120 	.word	0x08008120
 8000230:	08000741 	.word	0x08000741
 8000234:	200003d8 	.word	0x200003d8

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b096      	sub	sp, #88	; 0x58
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f007 fe6c 	bl	8007f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 031c 	add.w	r3, r7, #28
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]
 800026a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	2310      	movs	r3, #16
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027c:	2300      	movs	r3, #0
 800027e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000280:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000284:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fd14 	bl	8001cb8 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000296:	f000 fa85 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b0:	f107 031c 	add.w	r3, r7, #28
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fd3c 	bl	8002d34 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002c2:	f000 fa6f 	bl	80007a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 80002c6:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80002ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80002d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 ff60 	bl	80031a0 <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002e6:	f000 fa5d 	bl	80007a4 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3758      	adds	r7, #88	; 0x58
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2105      	movs	r1, #5
 80002fa:	201b      	movs	r0, #27
 80002fc:	f001 fb1b 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000300:	201b      	movs	r0, #27
 8000302:	f001 fb34 	bl	800196e <HAL_NVIC_EnableIRQ>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08a      	sub	sp, #40	; 0x28
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
 800032c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800032e:	4b35      	ldr	r3, [pc, #212]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000330:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000334:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000336:	4b33      	ldr	r3, [pc, #204]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <MX_ADC1_Init+0xf8>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000342:	4b30      	ldr	r3, [pc, #192]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000344:	2201      	movs	r2, #1
 8000346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <MX_ADC1_Init+0xf8>)
 800034a:	2200      	movs	r2, #0
 800034c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800034e:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000350:	2201      	movs	r2, #1
 8000352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000356:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000358:	2201      	movs	r2, #1
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b29      	ldr	r3, [pc, #164]	; (8000404 <MX_ADC1_Init+0xf8>)
 800035e:	2200      	movs	r2, #0
 8000360:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000362:	4b28      	ldr	r3, [pc, #160]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000364:	2201      	movs	r2, #1
 8000366:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000368:	4b26      	ldr	r3, [pc, #152]	; (8000404 <MX_ADC1_Init+0xf8>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000370:	2202      	movs	r2, #2
 8000372:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000376:	2200      	movs	r2, #0
 8000378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_ADC1_Init+0xf8>)
 800037e:	2204      	movs	r2, #4
 8000380:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000382:	4b20      	ldr	r3, [pc, #128]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000384:	2200      	movs	r2, #0
 8000386:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_ADC1_Init+0xf8>)
 800038a:	2200      	movs	r2, #0
 800038c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038e:	481d      	ldr	r0, [pc, #116]	; (8000404 <MX_ADC1_Init+0xf8>)
 8000390:	f000 fc78 	bl	8000c84 <HAL_ADC_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800039a:	f000 fa03 	bl	80007a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800039e:	2300      	movs	r3, #0
 80003a0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003a2:	f107 031c 	add.w	r3, r7, #28
 80003a6:	4619      	mov	r1, r3
 80003a8:	4816      	ldr	r0, [pc, #88]	; (8000404 <MX_ADC1_Init+0xf8>)
 80003aa:	f001 f8bd 	bl	8001528 <HAL_ADCEx_MultiModeConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003b4:	f000 f9f6 	bl	80007a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b8:	2301      	movs	r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003bc:	2301      	movs	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <MX_ADC1_Init+0xf8>)
 80003d6:	f000 fde7 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80003e0:	f000 f9e0 	bl	80007a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003e4:	2302      	movs	r3, #2
 80003e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_ADC1_Init+0xf8>)
 80003ee:	f000 fddb 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80003f8:	f000 f9d4 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3728      	adds	r7, #40	; 0x28
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000090 	.word	0x20000090

08000408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_SPI1_Init+0x74>)
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_SPI1_Init+0x78>)
 8000410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_SPI1_Init+0x74>)
 8000414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_SPI1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000420:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_SPI1_Init+0x74>)
 8000422:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000426:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_SPI1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042e:	4b13      	ldr	r3, [pc, #76]	; (800047c <MX_SPI1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_SPI1_Init+0x74>)
 8000436:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800043a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_SPI1_Init+0x74>)
 800043e:	2220      	movs	r2, #32
 8000440:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_SPI1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_SPI1_Init+0x74>)
 8000456:	2207      	movs	r2, #7
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_SPI1_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_SPI1_Init+0x74>)
 8000462:	2208      	movs	r2, #8
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_SPI1_Init+0x74>)
 8000468:	f002 ffc0 	bl	80033ec <HAL_SPI_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000472:	f000 f997 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000e0 	.word	0x200000e0
 8000480:	40013000 	.word	0x40013000

08000484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09a      	sub	sp, #104	; 0x68
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
 80004b4:	615a      	str	r2, [r3, #20]
 80004b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	222c      	movs	r2, #44	; 0x2c
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f007 fd30 	bl	8007f24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004c4:	4b50      	ldr	r3, [pc, #320]	; (8000608 <MX_TIM1_Init+0x184>)
 80004c6:	4a51      	ldr	r2, [pc, #324]	; (800060c <MX_TIM1_Init+0x188>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ca:	4b4f      	ldr	r3, [pc, #316]	; (8000608 <MX_TIM1_Init+0x184>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80004d0:	4b4d      	ldr	r3, [pc, #308]	; (8000608 <MX_TIM1_Init+0x184>)
 80004d2:	2260      	movs	r2, #96	; 0x60
 80004d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2560;
 80004d6:	4b4c      	ldr	r3, [pc, #304]	; (8000608 <MX_TIM1_Init+0x184>)
 80004d8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80004dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	4b4a      	ldr	r3, [pc, #296]	; (8000608 <MX_TIM1_Init+0x184>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004e4:	4b48      	ldr	r3, [pc, #288]	; (8000608 <MX_TIM1_Init+0x184>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ea:	4b47      	ldr	r3, [pc, #284]	; (8000608 <MX_TIM1_Init+0x184>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004f0:	4845      	ldr	r0, [pc, #276]	; (8000608 <MX_TIM1_Init+0x184>)
 80004f2:	f003 f81e 	bl	8003532 <HAL_TIM_Base_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004fc:	f000 f952 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000504:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800050a:	4619      	mov	r1, r3
 800050c:	483e      	ldr	r0, [pc, #248]	; (8000608 <MX_TIM1_Init+0x184>)
 800050e:	f003 fbe9 	bl	8003ce4 <HAL_TIM_ConfigClockSource>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000518:	f000 f944 	bl	80007a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800051c:	483a      	ldr	r0, [pc, #232]	; (8000608 <MX_TIM1_Init+0x184>)
 800051e:	f003 f85f 	bl	80035e0 <HAL_TIM_PWM_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000528:	f000 f93c 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000530:	2300      	movs	r3, #0
 8000532:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000538:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800053c:	4619      	mov	r1, r3
 800053e:	4832      	ldr	r0, [pc, #200]	; (8000608 <MX_TIM1_Init+0x184>)
 8000540:	f004 f950 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800054a:	f000 f92b 	bl	80007a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054e:	2360      	movs	r3, #96	; 0x60
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000558:	2300      	movs	r3, #0
 800055a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800055c:	2300      	movs	r3, #0
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	4824      	ldr	r0, [pc, #144]	; (8000608 <MX_TIM1_Init+0x184>)
 8000576:	f003 faa1 	bl	8003abc <HAL_TIM_PWM_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000580:	f000 f910 	bl	80007a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000588:	2204      	movs	r2, #4
 800058a:	4619      	mov	r1, r3
 800058c:	481e      	ldr	r0, [pc, #120]	; (8000608 <MX_TIM1_Init+0x184>)
 800058e:	f003 fa95 	bl	8003abc <HAL_TIM_PWM_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000598:	f000 f904 	bl	80007a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800059c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a0:	2208      	movs	r2, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	4818      	ldr	r0, [pc, #96]	; (8000608 <MX_TIM1_Init+0x184>)
 80005a6:	f003 fa89 	bl	8003abc <HAL_TIM_PWM_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80005b0:	f000 f8f8 	bl	80007a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <MX_TIM1_Init+0x184>)
 80005ea:	f004 f969 	bl	80048c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80005f4:	f000 f8d6 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <MX_TIM1_Init+0x184>)
 80005fa:	f000 f9bd 	bl	8000978 <HAL_TIM_MspPostInit>

}
 80005fe:	bf00      	nop
 8000600:	3768      	adds	r7, #104	; 0x68
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000144 	.word	0x20000144
 800060c:	40012c00 	.word	0x40012c00

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_USART2_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800061c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000654:	f004 f9ef 	bl	8004a36 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f8a1 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000190 	.word	0x20000190
 800066c:	40004400 	.word	0x40004400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <MX_GPIO_Init+0x8c>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_GPIO_Init+0x8c>)
 800068c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_GPIO_Init+0x8c>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2108      	movs	r1, #8
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x90>)
 80006d4:	f001 fad8 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006d8:	2308      	movs	r3, #8
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x90>)
 80006f0:	f001 f958 	bl	80019a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400

08000704 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Start the system here */
	  TIM1->CCR1 = 5;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <StartDefaultTask+0x34>)
 800070e:	2205      	movs	r2, #5
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->DIER |= TIM_DIER_CC1IE_Msk;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <StartDefaultTask+0x34>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <StartDefaultTask+0x34>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	60d3      	str	r3, [r2, #12]
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800071e:	2100      	movs	r1, #0
 8000720:	4806      	ldr	r0, [pc, #24]	; (800073c <StartDefaultTask+0x38>)
 8000722:	f002 ffbf 	bl	80036a4 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000726:	2100      	movs	r1, #0
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <StartDefaultTask+0x38>)
 800072a:	f003 ffb5 	bl	8004698 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f004 fe2e 	bl	8005390 <osDelay>
 8000734:	e7fb      	b.n	800072e <StartDefaultTask+0x2a>
 8000736:	bf00      	nop
 8000738:	40012c00 	.word	0x40012c00
 800073c:	20000144 	.word	0x20000144

08000740 <StartADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
        // Bits in this RTOS task's notification value are set by the notifying
        // tasks and interrupts to indicate which events have occurred. */
        xTaskNotifyWait( 0x00,      /* Don't clear any notification bits on entry. */
 8000748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800074c:	4a11      	ldr	r2, [pc, #68]	; (8000794 <StartADCTask+0x54>)
 800074e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000752:	2000      	movs	r0, #0
 8000754:	f006 faee 	bl	8006d34 <xTaskNotifyWait>
                         ULONG_MAX, /* Reset the notification value to 0 on exit. */
                         &ulNotifiedValue, /* Notified value pass out in
                                           ulNotifiedValue. */
                         portMAX_DELAY );  /* Block indefinitely. */
		current_cnt = TIM1->CNT;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <StartADCTask+0x58>)
 800075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <StartADCTask+0x5c>)
 800075e:	6013      	str	r3, [r2, #0]
		while(current_cnt == TIM1->CNT);	// Wait until CNT change
 8000760:	bf00      	nop
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <StartADCTask+0x58>)
 8000764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <StartADCTask+0x5c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d0f9      	beq.n	8000762 <StartADCTask+0x22>
		if(current_cnt < TIM1->CNT)
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <StartADCTask+0x58>)
 8000770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <StartADCTask+0x5c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d905      	bls.n	8000786 <StartADCTask+0x46>
		{
			 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2108      	movs	r1, #8
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <StartADCTask+0x60>)
 8000780:	f001 fa82 	bl	8001c88 <HAL_GPIO_WritePin>
 8000784:	e7e0      	b.n	8000748 <StartADCTask+0x8>
		 }
		 else
		 {
			 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	2108      	movs	r1, #8
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <StartADCTask+0x60>)
 800078c:	f001 fa7c 	bl	8001c88 <HAL_GPIO_WritePin>
        xTaskNotifyWait( 0x00,      /* Don't clear any notification bits on entry. */
 8000790:	e7da      	b.n	8000748 <StartADCTask+0x8>
 8000792:	bf00      	nop
 8000794:	20000598 	.word	0x20000598
 8000798:	40012c00 	.word	0x40012c00
 800079c:	2000059c 	.word	0x2000059c
 80007a0:	48000400 	.word	0x48000400

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_MspInit+0x4c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a10      	ldr	r2, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_MspInit+0x4c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_MspInit+0x4c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <HAL_MspInit+0x4c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	210f      	movs	r1, #15
 80007ea:	f06f 0001 	mvn.w	r0, #1
 80007ee:	f001 f8a2 	bl	8001936 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000820:	d124      	bne.n	800086c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_ADC_MspInit+0x74>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000852:	2303      	movs	r3, #3
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000856:	2303      	movs	r3, #3
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f001 f89c 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a25      	ldr	r2, [pc, #148]	; (800092c <HAL_SPI_MspInit+0xb4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d144      	bne.n	8000924 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a24      	ldr	r2, [pc, #144]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 80008a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_SPI_MspInit+0xb8>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008e2:	2370      	movs	r3, #112	; 0x70
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f2:	2305      	movs	r3, #5
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f001 f850 	bl	80019a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000904:	2320      	movs	r3, #32
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000914:	2305      	movs	r3, #5
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <HAL_SPI_MspInit+0xbc>)
 8000920:	f001 f840 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40013000 	.word	0x40013000
 8000930:	40021000 	.word	0x40021000
 8000934:	48000400 	.word	0x48000400

08000938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_TIM_Base_MspInit+0x38>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10b      	bne.n	8000962 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_TIM_Base_MspInit+0x3c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <HAL_TIM_Base_MspInit+0x3c>)
 8000950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_TIM_Base_MspInit+0x3c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40012c00 	.word	0x40012c00
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <HAL_TIM_MspPostInit+0xa0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d139      	bne.n	8000a0e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <HAL_TIM_MspPostInit+0xa4>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <HAL_TIM_MspPostInit+0xa4>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <HAL_TIM_MspPostInit+0xa4>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_TIM_MspPostInit+0xa4>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_TIM_MspPostInit+0xa4>)
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_TIM_MspPostInit+0xa4>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80009ca:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009dc:	2306      	movs	r3, #6
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f000 ffdb 	bl	80019a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ee:	2303      	movs	r3, #3
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009fe:	2306      	movs	r3, #6
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_TIM_MspPostInit+0xa8>)
 8000a0a:	f000 ffcb 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012c00 	.word	0x40012c00
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000400 	.word	0x48000400

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_UART_MspInit+0x80>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d129      	bne.n	8000a9a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a76:	f248 0304 	movw	r3, #32772	; 0x8004
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 ff85 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40021000 	.word	0x40021000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f8b2 	bl	8000c44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ae0:	f006 f89c 	bl	8006c1c <xTaskGetSchedulerState>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d001      	beq.n	8000aee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aea:	f006 ff7d 	bl	80079e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	static BaseType_t xHigherPriorityTaskWoken;
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <TIM1_CC_IRQHandler+0x3c>)
 8000afc:	f002 febe 	bl	800387c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
  xTaskNotifyFromISR( ADCTaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken );
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <TIM1_CC_IRQHandler+0x40>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <TIM1_CC_IRQHandler+0x44>)
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f006 f971 	bl	8006df4 <xTaskGenericNotifyFromISR>

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
  The macro used to do this is dependent on the port and may be called
  portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <TIM1_CC_IRQHandler+0x44>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <TIM1_CC_IRQHandler+0x36>
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <TIM1_CC_IRQHandler+0x48>)
 8000b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	f3bf 8f6f 	isb	sy
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000144 	.word	0x20000144
 8000b34:	200003d8 	.word	0x200003d8
 8000b38:	200005a0 	.word	0x200005a0
 8000b3c:	e000ed04 	.word	0xe000ed04

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b68:	f7ff ffea 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f007 f993 	bl	8007ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b96:	f7ff fb1b 	bl	80001d0 <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b9c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ba8:	080081e4 	.word	0x080081e4
  ldr r2, =_sbss
 8000bac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bb0:	200014b8 	.word	0x200014b8

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x28>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 fea9 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fdec 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fec1 	bl	800198a <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	f000 fe89 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200005a4 	.word	0x200005a4

08000c6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200005a4 	.word	0x200005a4

08000c84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09a      	sub	sp, #104	; 0x68
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e172      	b.n	8000f8a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d176      	bne.n	8000da4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d152      	bne.n	8000d64 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fd91 	bl	8000800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d13b      	bne.n	8000d64 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fce1 	bl	80016b4 <ADC_Disable>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d12f      	bne.n	8000d64 <HAL_ADC_Init+0xe0>
 8000d04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d12b      	bne.n	8000d64 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d14:	f023 0302 	bic.w	r3, r3, #2
 8000d18:	f043 0202 	orr.w	r2, r3, #2
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d2e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d3e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d40:	4b94      	ldr	r3, [pc, #592]	; (8000f94 <HAL_ADC_Init+0x310>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a94      	ldr	r2, [pc, #592]	; (8000f98 <HAL_ADC_Init+0x314>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	0c9a      	lsrs	r2, r3, #18
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d56:	e002      	b.n	8000d5e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f9      	bne.n	8000d58 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d80:	d110      	bne.n	8000da4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f023 0312 	bic.w	r3, r3, #18
 8000d8a:	f043 0210 	orr.w	r2, r3, #16
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f043 0201 	orr.w	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f040 80df 	bne.w	8000f70 <HAL_ADC_Init+0x2ec>
 8000db2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 80da 	bne.w	8000f70 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 80d2 	bne.w	8000f70 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000dd4:	f043 0202 	orr.w	r2, r3, #2
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ddc:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <HAL_ADC_Init+0x318>)
 8000dde:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de8:	d102      	bne.n	8000df0 <HAL_ADC_Init+0x16c>
 8000dea:	4b6d      	ldr	r3, [pc, #436]	; (8000fa0 <HAL_ADC_Init+0x31c>)
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	e002      	b.n	8000df6 <HAL_ADC_Init+0x172>
 8000df0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000df4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_ADC_Init+0x192>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d101      	bne.n	8000e16 <HAL_ADC_Init+0x192>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_ADC_Init+0x194>
 8000e16:	2300      	movs	r3, #0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d11c      	bne.n	8000e56 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d010      	beq.n	8000e44 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d107      	bne.n	8000e3e <HAL_ADC_Init+0x1ba>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d101      	bne.n	8000e3e <HAL_ADC_Init+0x1ba>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <HAL_ADC_Init+0x1bc>
 8000e3e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d108      	bne.n	8000e56 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e54:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7e5b      	ldrb	r3, [r3, #25]
 8000e5a:	035b      	lsls	r3, r3, #13
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e60:	2a01      	cmp	r2, #1
 8000e62:	d002      	beq.n	8000e6a <HAL_ADC_Init+0x1e6>
 8000e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e68:	e000      	b.n	8000e6c <HAL_ADC_Init+0x1e8>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d11b      	bne.n	8000ec2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7e5b      	ldrb	r3, [r3, #25]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d109      	bne.n	8000ea6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	3b01      	subs	r3, #1
 8000e98:	045a      	lsls	r2, r3, #17
 8000e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8000ea4:	e00d      	b.n	8000ec2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000eae:	f043 0220 	orr.w	r2, r3, #32
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f043 0201 	orr.w	r2, r3, #1
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d007      	beq.n	8000eda <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d114      	bne.n	8000f12 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ef6:	f023 0302 	bic.w	r3, r3, #2
 8000efa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7e1b      	ldrb	r3, [r3, #24]
 8000f00:	039a      	lsls	r2, r3, #14
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HAL_ADC_Init+0x320>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f22:	430b      	orrs	r3, r1
 8000f24:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10c      	bne.n	8000f48 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f023 010f 	bic.w	r1, r3, #15
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	631a      	str	r2, [r3, #48]	; 0x30
 8000f46:	e007      	b.n	8000f58 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 020f 	bic.w	r2, r2, #15
 8000f56:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f023 0303 	bic.w	r3, r3, #3
 8000f66:	f043 0201 	orr.w	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6e:	e00a      	b.n	8000f86 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f023 0312 	bic.w	r3, r3, #18
 8000f78:	f043 0210 	orr.w	r2, r3, #16
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f80:	2301      	movs	r3, #1
 8000f82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3768      	adds	r7, #104	; 0x68
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000000 	.word	0x20000000
 8000f98:	431bde83 	.word	0x431bde83
 8000f9c:	50000300 	.word	0x50000300
 8000fa0:	50000100 	.word	0x50000100
 8000fa4:	fff0c007 	.word	0xfff0c007

08000fa8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b09b      	sub	sp, #108	; 0x6c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x22>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e2a4      	b.n	8001514 <HAL_ADC_ConfigChannel+0x56c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f040 8288 	bne.w	80014f2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d81c      	bhi.n	8001024 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	231f      	movs	r3, #31
 8001000:	4093      	lsls	r3, r2
 8001002:	43db      	mvns	r3, r3
 8001004:	4019      	ands	r1, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa00 f203 	lsl.w	r2, r0, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
 8001022:	e063      	b.n	80010ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d81e      	bhi.n	800106a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	3b1e      	subs	r3, #30
 8001040:	221f      	movs	r2, #31
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	4019      	ands	r1, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	3b1e      	subs	r3, #30
 800105c:	fa00 f203 	lsl.w	r2, r0, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
 8001068:	e040      	b.n	80010ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b0e      	cmp	r3, #14
 8001070:	d81e      	bhi.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	3b3c      	subs	r3, #60	; 0x3c
 8001086:	221f      	movs	r2, #31
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	4019      	ands	r1, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	3b3c      	subs	r3, #60	; 0x3c
 80010a2:	fa00 f203 	lsl.w	r2, r0, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38
 80010ae:	e01d      	b.n	80010ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	3b5a      	subs	r3, #90	; 0x5a
 80010c4:	221f      	movs	r2, #31
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	4019      	ands	r1, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	3b5a      	subs	r3, #90	; 0x5a
 80010e0:	fa00 f203 	lsl.w	r2, r0, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80e5 	bne.w	80012c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b09      	cmp	r3, #9
 8001102:	d91c      	bls.n	800113e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6999      	ldr	r1, [r3, #24]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	3b1e      	subs	r3, #30
 8001116:	2207      	movs	r2, #7
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4019      	ands	r1, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6898      	ldr	r0, [r3, #8]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	3b1e      	subs	r3, #30
 8001130:	fa00 f203 	lsl.w	r2, r0, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	e019      	b.n	8001172 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6959      	ldr	r1, [r3, #20]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	2207      	movs	r2, #7
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	4019      	ands	r1, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6898      	ldr	r0, [r3, #8]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	fa00 f203 	lsl.w	r2, r0, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	3b01      	subs	r3, #1
 8001190:	2b03      	cmp	r3, #3
 8001192:	d84f      	bhi.n	8001234 <HAL_ADC_ConfigChannel+0x28c>
 8001194:	a201      	add	r2, pc, #4	; (adr r2, 800119c <HAL_ADC_ConfigChannel+0x1f4>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011cf 	.word	0x080011cf
 80011a4:	080011f1 	.word	0x080011f1
 80011a8:	08001213 	.word	0x08001213
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011b2:	4b94      	ldr	r3, [pc, #592]	; (8001404 <HAL_ADC_ConfigChannel+0x45c>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	0691      	lsls	r1, r2, #26
 80011bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011be:	430a      	orrs	r2, r1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011cc:	e07e      	b.n	80012cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011d4:	4b8b      	ldr	r3, [pc, #556]	; (8001404 <HAL_ADC_ConfigChannel+0x45c>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	0691      	lsls	r1, r2, #26
 80011de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011e0:	430a      	orrs	r2, r1
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011ee:	e06d      	b.n	80012cc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011f6:	4b83      	ldr	r3, [pc, #524]	; (8001404 <HAL_ADC_ConfigChannel+0x45c>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	0691      	lsls	r1, r2, #26
 8001200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001202:	430a      	orrs	r2, r1
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800120e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001210:	e05c      	b.n	80012cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001218:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <HAL_ADC_ConfigChannel+0x45c>)
 800121a:	4013      	ands	r3, r2
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	0691      	lsls	r1, r2, #26
 8001222:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001224:	430a      	orrs	r2, r1
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001230:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001232:	e04b      	b.n	80012cc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	069b      	lsls	r3, r3, #26
 8001244:	429a      	cmp	r2, r3
 8001246:	d107      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001256:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800125e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	069b      	lsls	r3, r3, #26
 8001268:	429a      	cmp	r2, r3
 800126a:	d107      	bne.n	800127c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800127a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001282:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	069b      	lsls	r3, r3, #26
 800128c:	429a      	cmp	r2, r3
 800128e:	d107      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800129e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	069b      	lsls	r3, r3, #26
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d10a      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80012c4:	e001      	b.n	80012ca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80012c6:	bf00      	nop
 80012c8:	e000      	b.n	80012cc <HAL_ADC_ConfigChannel+0x324>
      break;
 80012ca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x344>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x344>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_ADC_ConfigChannel+0x346>
 80012ec:	2300      	movs	r3, #0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 810a 	bne.w	8001508 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d00f      	beq.n	800131c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	400a      	ands	r2, r1
 8001316:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800131a:	e049      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b09      	cmp	r3, #9
 800133c:	d91c      	bls.n	8001378 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6999      	ldr	r1, [r3, #24]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	3b1b      	subs	r3, #27
 8001350:	2207      	movs	r2, #7
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	4019      	ands	r1, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6898      	ldr	r0, [r3, #8]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	3b1b      	subs	r3, #27
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	619a      	str	r2, [r3, #24]
 8001376:	e01b      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6959      	ldr	r1, [r3, #20]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	4019      	ands	r1, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	6898      	ldr	r0, [r3, #8]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	fa00 f203 	lsl.w	r2, r0, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_ADC_ConfigChannel+0x460>)
 80013b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b10      	cmp	r3, #16
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80013bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80013cc:	2b11      	cmp	r3, #17
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80013d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80013e0:	2b12      	cmp	r3, #18
 80013e2:	f040 8091 	bne.w	8001508 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80013e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 808a 	bne.w	8001508 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013fc:	d108      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x468>
 80013fe:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_ADC_ConfigChannel+0x464>)
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e008      	b.n	8001416 <HAL_ADC_ConfigChannel+0x46e>
 8001404:	83fff000 	.word	0x83fff000
 8001408:	50000300 	.word	0x50000300
 800140c:	50000100 	.word	0x50000100
 8001410:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001414:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x48e>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x48e>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_ADC_ConfigChannel+0x490>
 8001436:	2300      	movs	r3, #0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d150      	bne.n	80014de <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800143c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d010      	beq.n	8001464 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_ADC_ConfigChannel+0x4b6>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d101      	bne.n	800145e <HAL_ADC_ConfigChannel+0x4b6>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_ADC_ConfigChannel+0x4b8>
 800145e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001460:	2b00      	cmp	r3, #0
 8001462:	d13c      	bne.n	80014de <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b10      	cmp	r3, #16
 800146a:	d11d      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x500>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001474:	d118      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800147e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001480:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_ADC_ConfigChannel+0x578>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a27      	ldr	r2, [pc, #156]	; (8001524 <HAL_ADC_ConfigChannel+0x57c>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9a      	lsrs	r2, r3, #18
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001498:	e002      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3b01      	subs	r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f9      	bne.n	800149a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014a6:	e02e      	b.n	8001506 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b11      	cmp	r3, #17
 80014ae:	d10b      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x520>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b8:	d106      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80014ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80014c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014c6:	e01e      	b.n	8001506 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b12      	cmp	r3, #18
 80014ce:	d11a      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80014d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014da:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014dc:	e013      	b.n	8001506 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f043 0220 	orr.w	r2, r3, #32
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014f0:	e00a      	b.n	8001508 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f043 0220 	orr.w	r2, r3, #32
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001504:	e000      	b.n	8001508 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001506:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001510:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001514:	4618      	mov	r0, r3
 8001516:	376c      	adds	r7, #108	; 0x6c
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83

08001528 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001528:	b480      	push	{r7}
 800152a:	b099      	sub	sp, #100	; 0x64
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001540:	d102      	bne.n	8001548 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001542:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	e002      	b.n	800154e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001548:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800154c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0a2      	b.n	800169e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001562:	2302      	movs	r3, #2
 8001564:	e09b      	b.n	800169e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d17f      	bne.n	800167c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d179      	bne.n	800167c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001588:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800158a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d040      	beq.n	8001616 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015a6:	035b      	lsls	r3, r3, #13
 80015a8:	430b      	orrs	r3, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ae:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d108      	bne.n	80015d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80015d0:	2300      	movs	r3, #0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d15c      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80015f2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d14b      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001600:	f023 030f 	bic.w	r3, r3, #15
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	6811      	ldr	r1, [r2, #0]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6892      	ldr	r2, [r2, #8]
 800160c:	430a      	orrs	r2, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001612:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001614:	e03c      	b.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800161e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001620:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001642:	2300      	movs	r3, #0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d123      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001664:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d112      	bne.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800166a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001672:	f023 030f 	bic.w	r3, r3, #15
 8001676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001678:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800167a:	e009      	b.n	8001690 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f043 0220 	orr.w	r2, r3, #32
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800168e:	e000      	b.n	8001692 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001690:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800169a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800169e:	4618      	mov	r0, r3
 80016a0:	3764      	adds	r7, #100	; 0x64
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	50000100 	.word	0x50000100
 80016b0:	50000300 	.word	0x50000300

080016b4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <ADC_Disable+0x2c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <ADC_Disable+0x2c>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <ADC_Disable+0x2e>
 80016e0:	2300      	movs	r3, #0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d047      	beq.n	8001776 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030d 	and.w	r3, r3, #13
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10f      	bne.n	8001714 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0202 	orr.w	r2, r2, #2
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2203      	movs	r2, #3
 800170a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800170c:	f7ff faae 	bl	8000c6c <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001712:	e029      	b.n	8001768 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f043 0210 	orr.w	r2, r3, #16
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e023      	b.n	8001778 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001730:	f7ff fa9c 	bl	8000c6c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d914      	bls.n	8001768 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10d      	bne.n	8001768 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e007      	b.n	8001778 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d0dc      	beq.n	8001730 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff29 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff3e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff31 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b2:	e14e      	b.n	8001c52 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8140 	beq.w	8001c4c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d005      	beq.n	80019e4 <HAL_GPIO_Init+0x40>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d130      	bne.n	8001a46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 0201 	and.w	r2, r3, #1
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d017      	beq.n	8001a82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d123      	bne.n	8001ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	6939      	ldr	r1, [r7, #16]
 8001ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0203 	and.w	r2, r3, #3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 809a 	beq.w	8001c4c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b18:	4b55      	ldr	r3, [pc, #340]	; (8001c70 <HAL_GPIO_Init+0x2cc>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a54      	ldr	r2, [pc, #336]	; (8001c70 <HAL_GPIO_Init+0x2cc>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b52      	ldr	r3, [pc, #328]	; (8001c70 <HAL_GPIO_Init+0x2cc>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b30:	4a50      	ldr	r2, [pc, #320]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b5a:	d013      	beq.n	8001b84 <HAL_GPIO_Init+0x1e0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a46      	ldr	r2, [pc, #280]	; (8001c78 <HAL_GPIO_Init+0x2d4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00d      	beq.n	8001b80 <HAL_GPIO_Init+0x1dc>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <HAL_GPIO_Init+0x2d8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d007      	beq.n	8001b7c <HAL_GPIO_Init+0x1d8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a44      	ldr	r2, [pc, #272]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d101      	bne.n	8001b78 <HAL_GPIO_Init+0x1d4>
 8001b74:	2303      	movs	r3, #3
 8001b76:	e006      	b.n	8001b86 <HAL_GPIO_Init+0x1e2>
 8001b78:	2305      	movs	r3, #5
 8001b7a:	e004      	b.n	8001b86 <HAL_GPIO_Init+0x1e2>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e002      	b.n	8001b86 <HAL_GPIO_Init+0x1e2>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_GPIO_Init+0x1e2>
 8001b84:	2300      	movs	r3, #0
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	f002 0203 	and.w	r2, r2, #3
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	4093      	lsls	r3, r2
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b96:	4937      	ldr	r1, [pc, #220]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_GPIO_Init+0x2e0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bc8:	4a2e      	ldr	r2, [pc, #184]	; (8001c84 <HAL_GPIO_Init+0x2e0>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_GPIO_Init+0x2e0>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bf2:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <HAL_GPIO_Init+0x2e0>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_GPIO_Init+0x2e0>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_GPIO_Init+0x2e0>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_GPIO_Init+0x2e0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c46:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_GPIO_Init+0x2e0>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f aea9 	bne.w	80019b4 <HAL_GPIO_Init+0x10>
  }
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	48000800 	.word	0x48000800
 8001c80:	48000c00 	.word	0x48000c00
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f001 b823 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 817d 	beq.w	8001fee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cf4:	4bbc      	ldr	r3, [pc, #752]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d00c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d00:	4bb9      	ldr	r3, [pc, #740]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d15c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x10e>
 8001d0c:	4bb6      	ldr	r3, [pc, #728]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d155      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x10e>
 8001d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0x94>
 8001d46:	4ba8      	ldr	r3, [pc, #672]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e015      	b.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d64:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d68:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d74:	4b9c      	ldr	r3, [pc, #624]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d80:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d84:	fa92 f2a2 	rbit	r2, r2
 8001d88:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001d8c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f042 0220 	orr.w	r2, r2, #32
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f002 021f 	and.w	r2, r2, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 811f 	beq.w	8001fec <HAL_RCC_OscConfig+0x334>
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8116 	bne.w	8001fec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f000 bfaf 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12e>
 8001dd8:	4b83      	ldr	r3, [pc, #524]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a82      	ldr	r2, [pc, #520]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e036      	b.n	8001e54 <HAL_RCC_OscConfig+0x19c>
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x158>
 8001df6:	4b7c      	ldr	r3, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7b      	ldr	r2, [pc, #492]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a78      	ldr	r2, [pc, #480]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e021      	b.n	8001e54 <HAL_RCC_OscConfig+0x19c>
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x184>
 8001e22:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a70      	ldr	r2, [pc, #448]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6d      	ldr	r2, [pc, #436]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0x19c>
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a69      	ldr	r2, [pc, #420]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a66      	ldr	r2, [pc, #408]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e54:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	f023 020f 	bic.w	r2, r3, #15
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	495f      	ldr	r1, [pc, #380]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d059      	beq.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fef5 	bl	8000c6c <HAL_GetTick>
 8001e82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7fe fef0 	bl	8000c6c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b64      	cmp	r3, #100	; 0x64
 8001e96:	d902      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	f000 bf43 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>
 8001e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001eb2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x218>
 8001eca:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	e015      	b.n	8001efc <HAL_RCC_OscConfig+0x244>
 8001ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001eec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f00:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f08:	fa92 f2a2 	rbit	r2, r2
 8001f0c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f10:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f002 021f 	and.w	r2, r2, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ab      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1d0>
 8001f30:	e05d      	b.n	8001fee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7fe fe9b 	bl	8000c6c <HAL_GetTick>
 8001f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe fe96 	bl	8000c6c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b64      	cmp	r3, #100	; 0x64
 8001f4a:	d902      	bls.n	8001f52 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	f000 bee9 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>
 8001f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f56:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_OscConfig+0x2cc>
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	e015      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2f8>
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fa0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fb4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001fb8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fbc:	fa92 f2a2 	rbit	r2, r2
 8001fc0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001fc4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001fc8:	fab2 f282 	clz	r2, r2
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f042 0220 	orr.w	r2, r2, #32
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f002 021f 	and.w	r2, r2, #31
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f202 	lsl.w	r2, r1, r2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ab      	bne.n	8001f3c <HAL_RCC_OscConfig+0x284>
 8001fe4:	e003      	b.n	8001fee <HAL_RCC_OscConfig+0x336>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 817d 	beq.w	80022fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002004:	4ba6      	ldr	r3, [pc, #664]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002010:	4ba3      	ldr	r3, [pc, #652]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d172      	bne.n	8002102 <HAL_RCC_OscConfig+0x44a>
 800201c:	4ba0      	ldr	r3, [pc, #640]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d16c      	bne.n	8002102 <HAL_RCC_OscConfig+0x44a>
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800203a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d102      	bne.n	8002058 <HAL_RCC_OscConfig+0x3a0>
 8002052:	4b93      	ldr	r3, [pc, #588]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	e013      	b.n	8002080 <HAL_RCC_OscConfig+0x3c8>
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002070:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800207c:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	2202      	movs	r2, #2
 8002082:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002086:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800208a:	fa92 f2a2 	rbit	r2, r2
 800208e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002092:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCC_OscConfig+0x410>
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f000 be2e 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	21f8      	movs	r1, #248	; 0xf8
 80020de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020e6:	fa91 f1a1 	rbit	r1, r1
 80020ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80020ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80020f2:	fab1 f181 	clz	r1, r1
 80020f6:	b2c9      	uxtb	r1, r1
 80020f8:	408b      	lsls	r3, r1
 80020fa:	4969      	ldr	r1, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002100:	e0fd      	b.n	80022fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8088 	beq.w	8002224 <HAL_RCC_OscConfig+0x56c>
 8002114:	2301      	movs	r3, #1
 8002116:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002126:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	461a      	mov	r2, r3
 800213c:	2301      	movs	r3, #1
 800213e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fd94 	bl	8000c6c <HAL_GetTick>
 8002144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214a:	f7fe fd8f 	bl	8000c6c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d902      	bls.n	8002160 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	f000 bde2 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>
 8002160:	2302      	movs	r3, #2
 8002162:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002172:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d102      	bne.n	8002190 <HAL_RCC_OscConfig+0x4d8>
 800218a:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	e013      	b.n	80021b8 <HAL_RCC_OscConfig+0x500>
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2202      	movs	r2, #2
 80021ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021c2:	fa92 f2a2 	rbit	r2, r2
 80021c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f042 0220 	orr.w	r2, r2, #32
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f002 021f 	and.w	r2, r2, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0af      	beq.n	800214a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	21f8      	movs	r1, #248	; 0xf8
 8002200:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002208:	fa91 f1a1 	rbit	r1, r1
 800220c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002210:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002214:	fab1 f181 	clz	r1, r1
 8002218:	b2c9      	uxtb	r1, r1
 800221a:	408b      	lsls	r3, r1
 800221c:	4920      	ldr	r1, [pc, #128]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
 8002222:	e06c      	b.n	80022fe <HAL_RCC_OscConfig+0x646>
 8002224:	2301      	movs	r3, #1
 8002226:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002236:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002244:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	2300      	movs	r3, #0
 800224e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fd0c 	bl	8000c6c <HAL_GetTick>
 8002254:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225a:	f7fe fd07 	bl	8000c6c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d902      	bls.n	8002270 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	f000 bd5a 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>
 8002270:	2302      	movs	r3, #2
 8002272:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d104      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5ec>
 800229a:	4b01      	ldr	r3, [pc, #4]	; (80022a0 <HAL_RCC_OscConfig+0x5e8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	e015      	b.n	80022cc <HAL_RCC_OscConfig+0x614>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022c8:	4bc8      	ldr	r3, [pc, #800]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2202      	movs	r2, #2
 80022ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80022d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80022de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80022e2:	fab2 f282 	clz	r2, r2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f042 0220 	orr.w	r2, r2, #32
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f002 021f 	and.w	r2, r2, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ad      	bne.n	800225a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8110 	beq.w	8002534 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d079      	beq.n	8002418 <HAL_RCC_OscConfig+0x760>
 8002324:	2301      	movs	r3, #1
 8002326:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	4bab      	ldr	r3, [pc, #684]	; (80025f0 <HAL_RCC_OscConfig+0x938>)
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	461a      	mov	r2, r3
 800234a:	2301      	movs	r3, #1
 800234c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fc8d 	bl	8000c6c <HAL_GetTick>
 8002352:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	e00a      	b.n	800236e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002358:	f7fe fc88 	bl	8000c6c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d902      	bls.n	800236e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	f000 bcdb 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002388:	2202      	movs	r2, #2
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	fa93 f2a3 	rbit	r2, r3
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023ac:	2202      	movs	r2, #2
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c8:	4b88      	ldr	r3, [pc, #544]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 80023ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023d4:	2102      	movs	r1, #2
 80023d6:	6019      	str	r1, [r3, #0]
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f1a3 	rbit	r1, r3
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023ee:	6019      	str	r1, [r3, #0]
  return result;
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0a0      	beq.n	8002358 <HAL_RCC_OscConfig+0x6a0>
 8002416:	e08d      	b.n	8002534 <HAL_RCC_OscConfig+0x87c>
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	fa93 f2a3 	rbit	r2, r3
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800243a:	601a      	str	r2, [r3, #0]
  return result;
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002444:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4b68      	ldr	r3, [pc, #416]	; (80025f0 <HAL_RCC_OscConfig+0x938>)
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	461a      	mov	r2, r3
 8002456:	2300      	movs	r3, #0
 8002458:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7fe fc07 	bl	8000c6c <HAL_GetTick>
 800245e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe fc02 	bl	8000c6c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d902      	bls.n	800247a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	f000 bc55 	b.w	8002d24 <HAL_RCC_OscConfig+0x106c>
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024a6:	2202      	movs	r2, #2
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024ca:	2202      	movs	r2, #2
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 80024e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024f2:	2102      	movs	r1, #2
 80024f4:	6019      	str	r1, [r3, #0]
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f1a3 	rbit	r1, r3
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800250c:	6019      	str	r1, [r3, #0]
  return result;
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d197      	bne.n	8002464 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 81a1 	beq.w	800288c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002550:	4b26      	ldr	r3, [pc, #152]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	4a22      	ldr	r2, [pc, #136]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002566:	61d3      	str	r3, [r2, #28]
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002582:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCC_OscConfig+0x93c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11a      	bne.n	80025cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_RCC_OscConfig+0x93c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_RCC_OscConfig+0x93c>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fb63 	bl	8000c6c <HAL_GetTick>
 80025a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	e009      	b.n	80025c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ac:	f7fe fb5e 	bl	8000c6c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	; 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e3b1      	b.n	8002d24 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_RCC_OscConfig+0x93c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ef      	beq.n	80025ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10d      	bne.n	80025f8 <HAL_RCC_OscConfig+0x940>
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a02      	ldr	r2, [pc, #8]	; (80025ec <HAL_RCC_OscConfig+0x934>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	e03c      	b.n	8002664 <HAL_RCC_OscConfig+0x9ac>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	10908120 	.word	0x10908120
 80025f4:	40007000 	.word	0x40007000
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_OscConfig+0x96a>
 8002608:	4bc1      	ldr	r3, [pc, #772]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4ac0      	ldr	r2, [pc, #768]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	4bbe      	ldr	r3, [pc, #760]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4abd      	ldr	r2, [pc, #756]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 800261a:	f023 0304 	bic.w	r3, r3, #4
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e020      	b.n	8002664 <HAL_RCC_OscConfig+0x9ac>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x994>
 8002632:	4bb7      	ldr	r3, [pc, #732]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4ab6      	ldr	r2, [pc, #728]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6213      	str	r3, [r2, #32]
 800263e:	4bb4      	ldr	r3, [pc, #720]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4ab3      	ldr	r2, [pc, #716]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6213      	str	r3, [r2, #32]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0x9ac>
 800264c:	4bb0      	ldr	r3, [pc, #704]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4aaf      	ldr	r2, [pc, #700]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4bad      	ldr	r3, [pc, #692]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4aac      	ldr	r2, [pc, #688]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8081 	beq.w	8002778 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7fe faf9 	bl	8000c6c <HAL_GetTick>
 800267a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7fe faf4 	bl	8000c6c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e345      	b.n	8002d24 <HAL_RCC_OscConfig+0x106c>
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026a0:	2202      	movs	r2, #2
 80026a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026c4:	2202      	movs	r2, #2
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026de:	601a      	str	r2, [r3, #0]
  return result;
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d102      	bne.n	8002704 <HAL_RCC_OscConfig+0xa4c>
 80026fe:	4b84      	ldr	r3, [pc, #528]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	e013      	b.n	800272c <HAL_RCC_OscConfig+0xa74>
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800270c:	2202      	movs	r2, #2
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002714:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002730:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002734:	2102      	movs	r1, #2
 8002736:	6011      	str	r1, [r2, #0]
 8002738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800273c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	fa92 f1a2 	rbit	r1, r2
 8002746:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800274e:	6011      	str	r1, [r2, #0]
  return result;
 8002750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002754:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d084      	beq.n	8002680 <HAL_RCC_OscConfig+0x9c8>
 8002776:	e07f      	b.n	8002878 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7fe fa78 	bl	8000c6c <HAL_GetTick>
 800277c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe fa73 	bl	8000c6c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e2c4      	b.n	8002d24 <HAL_RCC_OscConfig+0x106c>
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027a2:	2202      	movs	r2, #2
 80027a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027c6:	2202      	movs	r2, #2
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027e0:	601a      	str	r2, [r3, #0]
  return result;
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f043 0302 	orr.w	r3, r3, #2
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_OscConfig+0xb4e>
 8002800:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	e013      	b.n	800282e <HAL_RCC_OscConfig+0xb76>
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800280e:	2202      	movs	r2, #2
 8002810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002824:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002832:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002836:	2102      	movs	r1, #2
 8002838:	6011      	str	r1, [r2, #0]
 800283a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800283e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	fa92 f1a2 	rbit	r1, r2
 8002848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800284c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002850:	6011      	str	r1, [r2, #0]
  return result;
 8002852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002856:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	f002 021f 	and.w	r2, r2, #31
 800286c:	2101      	movs	r1, #1
 800286e:	fa01 f202 	lsl.w	r2, r1, r2
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d184      	bne.n	8002782 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002878:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8242 	beq.w	8002d22 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <HAL_RCC_OscConfig+0xc58>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	f000 8213 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	f040 8162 	bne.w	8002b82 <HAL_RCC_OscConfig+0xeca>
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028e2:	601a      	str	r2, [r3, #0]
  return result;
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	461a      	mov	r2, r3
 8002900:	2300      	movs	r3, #0
 8002902:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe f9b2 	bl	8000c6c <HAL_GetTick>
 8002908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	e00c      	b.n	8002928 <HAL_RCC_OscConfig+0xc70>
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe f9aa 	bl	8000c6c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1fd      	b.n	8002d24 <HAL_RCC_OscConfig+0x106c>
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800294c:	601a      	str	r2, [r3, #0]
  return result;
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002956:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d102      	bne.n	8002972 <HAL_RCC_OscConfig+0xcba>
 800296c:	4bb0      	ldr	r3, [pc, #704]	; (8002c30 <HAL_RCC_OscConfig+0xf78>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	e027      	b.n	80029c2 <HAL_RCC_OscConfig+0xd0a>
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800297a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800297e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fa93 f2a3 	rbit	r2, r3
 80029b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	4b9c      	ldr	r3, [pc, #624]	; (8002c30 <HAL_RCC_OscConfig+0xf78>)
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029ce:	6011      	str	r1, [r2, #0]
 80029d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	fa92 f1a2 	rbit	r1, r2
 80029de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029e6:	6011      	str	r1, [r2, #0]
  return result;
 80029e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	fab2 f282 	clz	r2, r2
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f042 0220 	orr.w	r2, r2, #32
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f002 021f 	and.w	r2, r2, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f202 	lsl.w	r2, r1, r2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d182      	bne.n	8002914 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0e:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0xf78>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	497f      	ldr	r1, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0xf78>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fa93 f2a3 	rbit	r2, r3
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a5a:	601a      	str	r2, [r3, #0]
  return result;
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a64:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2301      	movs	r3, #1
 8002a7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe f8f6 	bl	8000c6c <HAL_GetTick>
 8002a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe f8f1 	bl	8000c6c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e144      	b.n	8002d24 <HAL_RCC_OscConfig+0x106c>
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002abe:	601a      	str	r2, [r3, #0]
  return result;
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ac8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xe2c>
 8002ade:	4b54      	ldr	r3, [pc, #336]	; (8002c30 <HAL_RCC_OscConfig+0xf78>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	e027      	b.n	8002b34 <HAL_RCC_OscConfig+0xe7c>
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	fa93 f2a3 	rbit	r2, r3
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	fa93 f2a3 	rbit	r2, r3
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_RCC_OscConfig+0xf78>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b38:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b40:	6011      	str	r1, [r2, #0]
 8002b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b46:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	fa92 f1a2 	rbit	r1, r2
 8002b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b58:	6011      	str	r1, [r2, #0]
  return result;
 8002b5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	fab2 f282 	clz	r2, r2
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	f042 0220 	orr.w	r2, r2, #32
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f002 021f 	and.w	r2, r2, #31
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d082      	beq.n	8002a86 <HAL_RCC_OscConfig+0xdce>
 8002b80:	e0cf      	b.n	8002d22 <HAL_RCC_OscConfig+0x106a>
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	fa93 f2a3 	rbit	r2, r3
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ba6:	601a      	str	r2, [r3, #0]
  return result;
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bb0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe f850 	bl	8000c6c <HAL_GetTick>
 8002bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd0:	e009      	b.n	8002be6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe f84b 	bl	8000c6c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e09e      	b.n	8002d24 <HAL_RCC_OscConfig+0x106c>
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f2a3 	rbit	r2, r3
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c0a:	601a      	str	r2, [r3, #0]
  return result;
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d104      	bne.n	8002c34 <HAL_RCC_OscConfig+0xf7c>
 8002c2a:	4b01      	ldr	r3, [pc, #4]	; (8002c30 <HAL_RCC_OscConfig+0xf78>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e029      	b.n	8002c84 <HAL_RCC_OscConfig+0xfcc>
 8002c30:	40021000 	.word	0x40021000
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c46:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	fa93 f2a3 	rbit	r2, r3
 8002c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_RCC_OscConfig+0x1078>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c88:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c90:	6011      	str	r1, [r2, #0]
 8002c92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c96:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	fa92 f1a2 	rbit	r1, r2
 8002ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ca4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ca8:	6011      	str	r1, [r2, #0]
  return result;
 8002caa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	fab2 f282 	clz	r2, r2
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	f042 0220 	orr.w	r2, r2, #32
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	f002 021f 	and.w	r2, r2, #31
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d180      	bne.n	8002bd2 <HAL_RCC_OscConfig+0xf1a>
 8002cd0:	e027      	b.n	8002d22 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e01e      	b.n	8002d24 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_OscConfig+0x1078>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cf2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d10b      	bne.n	8002d1e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b09e      	sub	sp, #120	; 0x78
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e162      	b.n	8003012 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b90      	ldr	r3, [pc, #576]	; (8002f90 <HAL_RCC_ClockConfig+0x25c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b8d      	ldr	r3, [pc, #564]	; (8002f90 <HAL_RCC_ClockConfig+0x25c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	498b      	ldr	r1, [pc, #556]	; (8002f90 <HAL_RCC_ClockConfig+0x25c>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b89      	ldr	r3, [pc, #548]	; (8002f90 <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e14a      	b.n	8003012 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b82      	ldr	r3, [pc, #520]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	497f      	ldr	r1, [pc, #508]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80dc 	beq.w	8002f60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d13c      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xf6>
 8002db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d102      	bne.n	8002dda <HAL_RCC_ClockConfig+0xa6>
 8002dd4:	4b6f      	ldr	r3, [pc, #444]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	e00f      	b.n	8002dfa <HAL_RCC_ClockConfig+0xc6>
 8002dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	667b      	str	r3, [r7, #100]	; 0x64
 8002de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dec:	663b      	str	r3, [r7, #96]	; 0x60
 8002dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002df6:	4b67      	ldr	r3, [pc, #412]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e02:	fa92 f2a2 	rbit	r2, r2
 8002e06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e0a:	fab2 f282 	clz	r2, r2
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f042 0220 	orr.w	r2, r2, #32
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f002 021f 	and.w	r2, r2, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d17b      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0f3      	b.n	8003012 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d13c      	bne.n	8002eac <HAL_RCC_ClockConfig+0x178>
 8002e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x128>
 8002e56:	4b4f      	ldr	r3, [pc, #316]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	e00f      	b.n	8002e7c <HAL_RCC_ClockConfig+0x148>
 8002e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e78:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e80:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e84:	fa92 f2a2 	rbit	r2, r2
 8002e88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f042 0220 	orr.w	r2, r2, #32
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f002 021f 	and.w	r2, r2, #31
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d13a      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0b2      	b.n	8003012 <HAL_RCC_ClockConfig+0x2de>
 8002eac:	2302      	movs	r3, #2
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d102      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x1a0>
 8002ece:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	e00d      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1bc>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	61ba      	str	r2, [r7, #24]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	fa92 f2a2 	rbit	r2, r2
 8002efa:	617a      	str	r2, [r7, #20]
  return result;
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	fab2 f282 	clz	r2, r2
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f042 0220 	orr.w	r2, r2, #32
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	f002 021f 	and.w	r2, r2, #31
 8002f0e:	2101      	movs	r1, #1
 8002f10:	fa01 f202 	lsl.w	r2, r1, r2
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e079      	b.n	8003012 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	491a      	ldr	r1, [pc, #104]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f30:	f7fd fe9c 	bl	8000c6c <HAL_GetTick>
 8002f34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7fd fe98 	bl	8000c6c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e061      	b.n	8003012 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 020c 	and.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1eb      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_ClockConfig+0x25c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d214      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCC_ClockConfig+0x25c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 0207 	bic.w	r2, r3, #7
 8002f76:	4906      	ldr	r1, [pc, #24]	; (8002f90 <HAL_RCC_ClockConfig+0x25c>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_RCC_ClockConfig+0x25c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e040      	b.n	8003012 <HAL_RCC_ClockConfig+0x2de>
 8002f90:	40022000 	.word	0x40022000
 8002f94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCC_ClockConfig+0x2e8>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	491a      	ldr	r1, [pc, #104]	; (800301c <HAL_RCC_ClockConfig+0x2e8>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_RCC_ClockConfig+0x2e8>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4912      	ldr	r1, [pc, #72]	; (800301c <HAL_RCC_ClockConfig+0x2e8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fd6:	f000 f829 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002fda:	4601      	mov	r1, r0
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_RCC_ClockConfig+0x2e8>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe4:	22f0      	movs	r2, #240	; 0xf0
 8002fe6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	fa92 f2a2 	rbit	r2, r2
 8002fee:	60fa      	str	r2, [r7, #12]
  return result;
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	fab2 f282 	clz	r2, r2
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	40d3      	lsrs	r3, r2
 8002ffa:	4a09      	ldr	r2, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x2ec>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	fa21 f303 	lsr.w	r3, r1, r3
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <HAL_RCC_ClockConfig+0x2f0>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_RCC_ClockConfig+0x2f4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fdea 	bl	8000be4 <HAL_InitTick>
  
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3778      	adds	r7, #120	; 0x78
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	08008144 	.word	0x08008144
 8003024:	20000000 	.word	0x20000000
 8003028:	20000004 	.word	0x20000004

0800302c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b08b      	sub	sp, #44	; 0x2c
 8003030:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003046:	4b29      	ldr	r3, [pc, #164]	; (80030ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d002      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x30>
 8003056:	2b08      	cmp	r3, #8
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x36>
 800305a:	e03c      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800305e:	623b      	str	r3, [r7, #32]
      break;
 8003060:	e03c      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003068:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800306c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	fa92 f2a2 	rbit	r2, r2
 8003074:	607a      	str	r2, [r7, #4]
  return result;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	40d3      	lsrs	r3, r2
 8003080:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003086:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	220f      	movs	r2, #15
 8003090:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	fa92 f2a2 	rbit	r2, r2
 8003098:	60fa      	str	r2, [r7, #12]
  return result;
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	fab2 f282 	clz	r2, r2
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	40d3      	lsrs	r3, r2
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030b4:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	e004      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	623b      	str	r3, [r7, #32]
      break;
 80030d4:	e002      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030d8:	623b      	str	r3, [r7, #32]
      break;
 80030da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030dc:	6a3b      	ldr	r3, [r7, #32]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	372c      	adds	r7, #44	; 0x2c
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	007a1200 	.word	0x007a1200
 80030f4:	0800815c 	.word	0x0800815c
 80030f8:	0800816c 	.word	0x0800816c
 80030fc:	003d0900 	.word	0x003d0900

08003100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCC_GetHCLKFreq+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000000 	.word	0x20000000

08003118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800311e:	f7ff ffef 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003122:	4601      	mov	r1, r0
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800312c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003130:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	fa92 f2a2 	rbit	r2, r2
 8003138:	603a      	str	r2, [r7, #0]
  return result;
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	fab2 f282 	clz	r2, r2
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	40d3      	lsrs	r3, r2
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	08008154 	.word	0x08008154

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003162:	f7ff ffcd 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003166:	4601      	mov	r1, r0
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003170:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003174:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	fa92 f2a2 	rbit	r2, r2
 800317c:	603a      	str	r2, [r7, #0]
  return result;
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	fab2 f282 	clz	r2, r2
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	40d3      	lsrs	r3, r2
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <HAL_RCC_GetPCLK2Freq+0x40>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	08008154 	.word	0x08008154

080031a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b092      	sub	sp, #72	; 0x48
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80cd 	beq.w	800335e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c4:	4b86      	ldr	r3, [pc, #536]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10e      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d0:	4b83      	ldr	r3, [pc, #524]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4a82      	ldr	r2, [pc, #520]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031da:	61d3      	str	r3, [r2, #28]
 80031dc:	4b80      	ldr	r3, [pc, #512]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	4b7d      	ldr	r3, [pc, #500]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fa:	4b7a      	ldr	r3, [pc, #488]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a79      	ldr	r2, [pc, #484]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fd fd31 	bl	8000c6c <HAL_GetTick>
 800320a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fd fd2d 	bl	8000c6c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d901      	bls.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e0db      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	4b70      	ldr	r3, [pc, #448]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800322c:	4b6c      	ldr	r3, [pc, #432]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d07d      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003244:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003246:	429a      	cmp	r2, r3
 8003248:	d076      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800324a:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	4b5e      	ldr	r3, [pc, #376]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	461a      	mov	r2, r3
 8003274:	2301      	movs	r3, #1
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	4b55      	ldr	r3, [pc, #340]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	461a      	mov	r2, r3
 8003298:	2300      	movs	r3, #0
 800329a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800329c:	4a50      	ldr	r2, [pc, #320]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d045      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fd fcde 	bl	8000c6c <HAL_GetTick>
 80032b0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b2:	e00a      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7fd fcda 	bl	8000c6c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e086      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80032ca:	2302      	movs	r3, #2
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	2302      	movs	r3, #2
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	61fb      	str	r3, [r7, #28]
  return result;
 80032e2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d102      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80032f8:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	e007      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2202      	movs	r2, #2
 8003310:	613a      	str	r2, [r7, #16]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	fa92 f2a2 	rbit	r2, r2
 8003318:	60fa      	str	r2, [r7, #12]
  return result;
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f002 021f 	and.w	r2, r2, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0bd      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4926      	ldr	r1, [pc, #152]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003346:	4313      	orrs	r3, r2
 8003348:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800334a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800334e:	2b01      	cmp	r3, #1
 8003350:	d105      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003352:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	491a      	ldr	r1, [pc, #104]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003378:	4313      	orrs	r3, r2
 800337a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f023 0210 	bic.w	r2, r3, #16
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4912      	ldr	r1, [pc, #72]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003396:	4313      	orrs	r3, r2
 8003398:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	490b      	ldr	r1, [pc, #44]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3748      	adds	r7, #72	; 0x48
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
 80033e8:	10908100 	.word	0x10908100

080033ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e095      	b.n	800352a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d108      	bne.n	8003418 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340e:	d009      	beq.n	8003424 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]
 8003416:	e005      	b.n	8003424 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fa1a 	bl	8000878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003464:	d902      	bls.n	800346c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e002      	b.n	8003472 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800346c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003470:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800347a:	d007      	beq.n	800348c <HAL_SPI_Init+0xa0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003484:	d002      	beq.n	800348c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	ea42 0103 	orr.w	r1, r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	0c1b      	lsrs	r3, r3, #16
 80034e8:	f003 0204 	and.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003508:	ea42 0103 	orr.w	r1, r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e049      	b.n	80035d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d106      	bne.n	800355e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd f9ed 	bl	8000938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 fcb3 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e049      	b.n	8003686 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f841 	bl	800368e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	4619      	mov	r1, r3
 800361e:	4610      	mov	r0, r2
 8003620:	f000 fc5c 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_TIM_PWM_Start+0x24>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e03c      	b.n	8003742 <HAL_TIM_PWM_Start+0x9e>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d109      	bne.n	80036e2 <HAL_TIM_PWM_Start+0x3e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	e02f      	b.n	8003742 <HAL_TIM_PWM_Start+0x9e>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d109      	bne.n	80036fc <HAL_TIM_PWM_Start+0x58>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	e022      	b.n	8003742 <HAL_TIM_PWM_Start+0x9e>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d109      	bne.n	8003716 <HAL_TIM_PWM_Start+0x72>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	bf14      	ite	ne
 800370e:	2301      	movne	r3, #1
 8003710:	2300      	moveq	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	e015      	b.n	8003742 <HAL_TIM_PWM_Start+0x9e>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b10      	cmp	r3, #16
 800371a:	d109      	bne.n	8003730 <HAL_TIM_PWM_Start+0x8c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e008      	b.n	8003742 <HAL_TIM_PWM_Start+0x9e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e088      	b.n	800385c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <HAL_TIM_PWM_Start+0xb6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003758:	e023      	b.n	80037a2 <HAL_TIM_PWM_Start+0xfe>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d104      	bne.n	800376a <HAL_TIM_PWM_Start+0xc6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003768:	e01b      	b.n	80037a2 <HAL_TIM_PWM_Start+0xfe>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d104      	bne.n	800377a <HAL_TIM_PWM_Start+0xd6>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003778:	e013      	b.n	80037a2 <HAL_TIM_PWM_Start+0xfe>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b0c      	cmp	r3, #12
 800377e:	d104      	bne.n	800378a <HAL_TIM_PWM_Start+0xe6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003788:	e00b      	b.n	80037a2 <HAL_TIM_PWM_Start+0xfe>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b10      	cmp	r3, #16
 800378e:	d104      	bne.n	800379a <HAL_TIM_PWM_Start+0xf6>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003798:	e003      	b.n	80037a2 <HAL_TIM_PWM_Start+0xfe>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2201      	movs	r2, #1
 80037a8:	6839      	ldr	r1, [r7, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 ff4e 	bl	800464c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2b      	ldr	r2, [pc, #172]	; (8003864 <HAL_TIM_PWM_Start+0x1c0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_TIM_PWM_Start+0x134>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <HAL_TIM_PWM_Start+0x1c4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d009      	beq.n	80037d8 <HAL_TIM_PWM_Start+0x134>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a28      	ldr	r2, [pc, #160]	; (800386c <HAL_TIM_PWM_Start+0x1c8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIM_PWM_Start+0x134>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a27      	ldr	r2, [pc, #156]	; (8003870 <HAL_TIM_PWM_Start+0x1cc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_PWM_Start+0x138>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_TIM_PWM_Start+0x13a>
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_TIM_PWM_Start+0x1c0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00e      	beq.n	800381a <HAL_TIM_PWM_Start+0x176>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003804:	d009      	beq.n	800381a <HAL_TIM_PWM_Start+0x176>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <HAL_TIM_PWM_Start+0x1d0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_TIM_PWM_Start+0x176>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <HAL_TIM_PWM_Start+0x1c4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d115      	bne.n	8003846 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_TIM_PWM_Start+0x1d4>)
 8003822:	4013      	ands	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b06      	cmp	r3, #6
 800382a:	d015      	beq.n	8003858 <HAL_TIM_PWM_Start+0x1b4>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003832:	d011      	beq.n	8003858 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	e008      	b.n	8003858 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e000      	b.n	800385a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800
 8003874:	40000400 	.word	0x40000400
 8003878:	00010007 	.word	0x00010007

0800387c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0202 	mvn.w	r2, #2
 80038a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 faed 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fadf 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 faf0 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0204 	mvn.w	r2, #4
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fac3 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fab5 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fac6 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b08      	cmp	r3, #8
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b08      	cmp	r3, #8
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0208 	mvn.w	r2, #8
 8003950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2204      	movs	r2, #4
 8003956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa99 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa8b 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fa9c 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b10      	cmp	r3, #16
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0210 	mvn.w	r2, #16
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2208      	movs	r2, #8
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa6f 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa61 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fa72 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0201 	mvn.w	r2, #1
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fa3b 	bl	8003e76 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b80      	cmp	r3, #128	; 0x80
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b80      	cmp	r3, #128	; 0x80
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 ffcc 	bl	80049c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3a:	d10e      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	2b80      	cmp	r3, #128	; 0x80
 8003a48:	d107      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 ffbf 	bl	80049d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d10e      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fa20 	bl	8003ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d10e      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0220 	mvn.w	r2, #32
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 ff7f 	bl	80049b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e0ff      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b14      	cmp	r3, #20
 8003ae6:	f200 80f0 	bhi.w	8003cca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b45 	.word	0x08003b45
 8003af4:	08003ccb 	.word	0x08003ccb
 8003af8:	08003ccb 	.word	0x08003ccb
 8003afc:	08003ccb 	.word	0x08003ccb
 8003b00:	08003b85 	.word	0x08003b85
 8003b04:	08003ccb 	.word	0x08003ccb
 8003b08:	08003ccb 	.word	0x08003ccb
 8003b0c:	08003ccb 	.word	0x08003ccb
 8003b10:	08003bc7 	.word	0x08003bc7
 8003b14:	08003ccb 	.word	0x08003ccb
 8003b18:	08003ccb 	.word	0x08003ccb
 8003b1c:	08003ccb 	.word	0x08003ccb
 8003b20:	08003c07 	.word	0x08003c07
 8003b24:	08003ccb 	.word	0x08003ccb
 8003b28:	08003ccb 	.word	0x08003ccb
 8003b2c:	08003ccb 	.word	0x08003ccb
 8003b30:	08003c49 	.word	0x08003c49
 8003b34:	08003ccb 	.word	0x08003ccb
 8003b38:	08003ccb 	.word	0x08003ccb
 8003b3c:	08003ccb 	.word	0x08003ccb
 8003b40:	08003c89 	.word	0x08003c89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fa3e 	bl	8003fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0208 	orr.w	r2, r2, #8
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0204 	bic.w	r2, r2, #4
 8003b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	619a      	str	r2, [r3, #24]
      break;
 8003b82:	e0a5      	b.n	8003cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 faa4 	bl	80040d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6999      	ldr	r1, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	619a      	str	r2, [r3, #24]
      break;
 8003bc4:	e084      	b.n	8003cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fb03 	bl	80041d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0208 	orr.w	r2, r2, #8
 8003be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0204 	bic.w	r2, r2, #4
 8003bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	61da      	str	r2, [r3, #28]
      break;
 8003c04:	e064      	b.n	8003cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fb61 	bl	80042d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	021a      	lsls	r2, r3, #8
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	61da      	str	r2, [r3, #28]
      break;
 8003c46:	e043      	b.n	8003cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fba4 	bl	800439c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0208 	orr.w	r2, r2, #8
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c86:	e023      	b.n	8003cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fbe2 	bl	8004458 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cc8:	e002      	b.n	8003cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop

08003ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_ConfigClockSource+0x1c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0b6      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x18a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3c:	d03e      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0xd8>
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d42:	f200 8087 	bhi.w	8003e54 <HAL_TIM_ConfigClockSource+0x170>
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4a:	f000 8086 	beq.w	8003e5a <HAL_TIM_ConfigClockSource+0x176>
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	d87f      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x170>
 8003d54:	2b70      	cmp	r3, #112	; 0x70
 8003d56:	d01a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xaa>
 8003d58:	2b70      	cmp	r3, #112	; 0x70
 8003d5a:	d87b      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x170>
 8003d5c:	2b60      	cmp	r3, #96	; 0x60
 8003d5e:	d050      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x11e>
 8003d60:	2b60      	cmp	r3, #96	; 0x60
 8003d62:	d877      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x170>
 8003d64:	2b50      	cmp	r3, #80	; 0x50
 8003d66:	d03c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0xfe>
 8003d68:	2b50      	cmp	r3, #80	; 0x50
 8003d6a:	d873      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x170>
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d058      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x13e>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d86f      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x170>
 8003d74:	2b30      	cmp	r3, #48	; 0x30
 8003d76:	d064      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15e>
 8003d78:	2b30      	cmp	r3, #48	; 0x30
 8003d7a:	d86b      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x170>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d060      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15e>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d867      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x170>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05c      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15e>
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d05a      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15e>
 8003d8c:	e062      	b.n	8003e54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6899      	ldr	r1, [r3, #8]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f000 fc35 	bl	800460c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	609a      	str	r2, [r3, #8]
      break;
 8003dba:	e04f      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6899      	ldr	r1, [r3, #8]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f000 fc1e 	bl	800460c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dde:	609a      	str	r2, [r3, #8]
      break;
 8003de0:	e03c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 fb92 	bl	8004518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2150      	movs	r1, #80	; 0x50
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fbeb 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 8003e00:	e02c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 fbb1 	bl	8004576 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2160      	movs	r1, #96	; 0x60
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fbdb 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 8003e20:	e01c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 fb72 	bl	8004518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2140      	movs	r1, #64	; 0x40
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fbcb 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 8003e40:	e00c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f000 fbc2 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 8003e52:	e003      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e000      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a32      	ldr	r2, [pc, #200]	; (8003fb8 <TIM_Base_SetConfig+0xdc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d007      	beq.n	8003f04 <TIM_Base_SetConfig+0x28>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0x28>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a2f      	ldr	r2, [pc, #188]	; (8003fbc <TIM_Base_SetConfig+0xe0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d108      	bne.n	8003f16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a27      	ldr	r2, [pc, #156]	; (8003fb8 <TIM_Base_SetConfig+0xdc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <TIM_Base_SetConfig+0x6a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f24:	d00f      	beq.n	8003f46 <TIM_Base_SetConfig+0x6a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a24      	ldr	r2, [pc, #144]	; (8003fbc <TIM_Base_SetConfig+0xe0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_Base_SetConfig+0x6a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <TIM_Base_SetConfig+0xe4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_Base_SetConfig+0x6a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <TIM_Base_SetConfig+0xe8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_Base_SetConfig+0x6a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a21      	ldr	r2, [pc, #132]	; (8003fc8 <TIM_Base_SetConfig+0xec>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d108      	bne.n	8003f58 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <TIM_Base_SetConfig+0xdc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <TIM_Base_SetConfig+0xc0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <TIM_Base_SetConfig+0xe4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_Base_SetConfig+0xc0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <TIM_Base_SetConfig+0xe8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_Base_SetConfig+0xc0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <TIM_Base_SetConfig+0xec>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d103      	bne.n	8003fa4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	615a      	str	r2, [r3, #20]
}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40014400 	.word	0x40014400
 8003fc8:	40014800 	.word	0x40014800

08003fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0201 	bic.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0302 	bic.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <TIM_OC1_SetConfig+0xfc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00b      	beq.n	8004044 <TIM_OC1_SetConfig+0x78>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a27      	ldr	r2, [pc, #156]	; (80040cc <TIM_OC1_SetConfig+0x100>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <TIM_OC1_SetConfig+0x78>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <TIM_OC1_SetConfig+0x104>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_OC1_SetConfig+0x78>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <TIM_OC1_SetConfig+0x108>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10c      	bne.n	800405e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0308 	bic.w	r3, r3, #8
 800404a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <TIM_OC1_SetConfig+0xfc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_OC1_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a18      	ldr	r2, [pc, #96]	; (80040cc <TIM_OC1_SetConfig+0x100>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_OC1_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <TIM_OC1_SetConfig+0x104>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_OC1_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <TIM_OC1_SetConfig+0x108>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d111      	bne.n	80040a2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800408c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800

080040d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f023 0210 	bic.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0320 	bic.w	r3, r3, #32
 8004126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <TIM_OC2_SetConfig+0xf0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d10d      	bne.n	8004158 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <TIM_OC2_SetConfig+0xf0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00b      	beq.n	8004178 <TIM_OC2_SetConfig+0xa0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <TIM_OC2_SetConfig+0xf4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <TIM_OC2_SetConfig+0xa0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <TIM_OC2_SetConfig+0xf8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_OC2_SetConfig+0xa0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <TIM_OC2_SetConfig+0xfc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d113      	bne.n	80041a0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004186:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800

080041d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <TIM_OC3_SetConfig+0xec>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004254:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <TIM_OC3_SetConfig+0xec>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00b      	beq.n	8004276 <TIM_OC3_SetConfig+0x9e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <TIM_OC3_SetConfig+0xf0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <TIM_OC3_SetConfig+0x9e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <TIM_OC3_SetConfig+0xf4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC3_SetConfig+0x9e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <TIM_OC3_SetConfig+0xf8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d113      	bne.n	800429e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800427c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	031b      	lsls	r3, r3, #12
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a16      	ldr	r2, [pc, #88]	; (800438c <TIM_OC4_SetConfig+0xb8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00b      	beq.n	8004350 <TIM_OC4_SetConfig+0x7c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a15      	ldr	r2, [pc, #84]	; (8004390 <TIM_OC4_SetConfig+0xbc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_OC4_SetConfig+0x7c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a14      	ldr	r2, [pc, #80]	; (8004394 <TIM_OC4_SetConfig+0xc0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_OC4_SetConfig+0x7c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <TIM_OC4_SetConfig+0xc4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d109      	bne.n	8004364 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40014000 	.word	0x40014000
 8004394:	40014400 	.word	0x40014400
 8004398:	40014800 	.word	0x40014800

0800439c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <TIM_OC5_SetConfig+0xac>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00b      	beq.n	800440e <TIM_OC5_SetConfig+0x72>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <TIM_OC5_SetConfig+0xb0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <TIM_OC5_SetConfig+0x72>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <TIM_OC5_SetConfig+0xb4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_OC5_SetConfig+0x72>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a12      	ldr	r2, [pc, #72]	; (8004454 <TIM_OC5_SetConfig+0xb8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d109      	bne.n	8004422 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40014000 	.word	0x40014000
 8004450:	40014400 	.word	0x40014400
 8004454:	40014800 	.word	0x40014800

08004458 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800449e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	051b      	lsls	r3, r3, #20
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a16      	ldr	r2, [pc, #88]	; (8004508 <TIM_OC6_SetConfig+0xb0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00b      	beq.n	80044cc <TIM_OC6_SetConfig+0x74>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a15      	ldr	r2, [pc, #84]	; (800450c <TIM_OC6_SetConfig+0xb4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <TIM_OC6_SetConfig+0x74>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a14      	ldr	r2, [pc, #80]	; (8004510 <TIM_OC6_SetConfig+0xb8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_OC6_SetConfig+0x74>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <TIM_OC6_SetConfig+0xbc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d109      	bne.n	80044e0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	029b      	lsls	r3, r3, #10
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40014000 	.word	0x40014000
 8004510:	40014400 	.word	0x40014400
 8004514:	40014800 	.word	0x40014800

08004518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0201 	bic.w	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 030a 	bic.w	r3, r3, #10
 8004554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004576:	b480      	push	{r7}
 8004578:	b087      	sub	sp, #28
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0210 	bic.w	r2, r3, #16
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	031b      	lsls	r3, r3, #12
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f043 0307 	orr.w	r3, r3, #7
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	431a      	orrs	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	2201      	movs	r2, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1a      	ldr	r2, [r3, #32]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	43db      	mvns	r3, r3
 800466e:	401a      	ands	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	fa01 f303 	lsl.w	r3, r1, r3
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_TIMEx_PWMN_Start+0x24>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e022      	b.n	8004702 <HAL_TIMEx_PWMN_Start+0x6a>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d109      	bne.n	80046d6 <HAL_TIMEx_PWMN_Start+0x3e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	e015      	b.n	8004702 <HAL_TIMEx_PWMN_Start+0x6a>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d109      	bne.n	80046f0 <HAL_TIMEx_PWMN_Start+0x58>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e008      	b.n	8004702 <HAL_TIMEx_PWMN_Start+0x6a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e05f      	b.n	80047ca <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_TIMEx_PWMN_Start+0x82>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004718:	e013      	b.n	8004742 <HAL_TIMEx_PWMN_Start+0xaa>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d104      	bne.n	800472a <HAL_TIMEx_PWMN_Start+0x92>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004728:	e00b      	b.n	8004742 <HAL_TIMEx_PWMN_Start+0xaa>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d104      	bne.n	800473a <HAL_TIMEx_PWMN_Start+0xa2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004738:	e003      	b.n	8004742 <HAL_TIMEx_PWMN_Start+0xaa>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2204      	movs	r2, #4
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f94e 	bl	80049ec <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800475e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_TIMEx_PWMN_Start+0x13c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_TIMEx_PWMN_Start+0xf0>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d009      	beq.n	8004788 <HAL_TIMEx_PWMN_Start+0xf0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <HAL_TIMEx_PWMN_Start+0x140>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIMEx_PWMN_Start+0xf0>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a16      	ldr	r2, [pc, #88]	; (80047dc <HAL_TIMEx_PWMN_Start+0x144>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d115      	bne.n	80047b4 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <HAL_TIMEx_PWMN_Start+0x148>)
 8004790:	4013      	ands	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b06      	cmp	r3, #6
 8004798:	d015      	beq.n	80047c6 <HAL_TIMEx_PWMN_Start+0x12e>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d011      	beq.n	80047c6 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	e008      	b.n	80047c6 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e000      	b.n	80047c8 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40014000 	.word	0x40014000
 80047e0:	00010007 	.word	0x00010007

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e054      	b.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a24      	ldr	r2, [pc, #144]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800482c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004864:	d009      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10c      	bne.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4313      	orrs	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40014000 	.word	0x40014000

080048c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048d8:	2302      	movs	r3, #2
 80048da:	e060      	b.n	800499e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a14      	ldr	r2, [pc, #80]	; (80049ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d115      	bne.n	800498c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	051b      	lsls	r3, r3, #20
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00

080049b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	2204      	movs	r2, #4
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1a      	ldr	r2, [r3, #32]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	401a      	ands	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e040      	b.n	8004aca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fb ffe3 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2224      	movs	r2, #36	; 0x24
 8004a62:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f82d 	bl	8004ad4 <UART_SetConfig>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e022      	b.n	8004aca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f957 	bl	8004d40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ab0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9de 	bl	8004e84 <UART_CheckIdleState>
 8004ac8:	4603      	mov	r3, r0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b8a      	ldr	r3, [pc, #552]	; (8004d28 <UART_SetConfig+0x254>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	6979      	ldr	r1, [r7, #20]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a78      	ldr	r2, [pc, #480]	; (8004d2c <UART_SetConfig+0x258>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d120      	bne.n	8004b92 <UART_SetConfig+0xbe>
 8004b50:	4b77      	ldr	r3, [pc, #476]	; (8004d30 <UART_SetConfig+0x25c>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d817      	bhi.n	8004b8c <UART_SetConfig+0xb8>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <UART_SetConfig+0x90>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b87 	.word	0x08004b87
 8004b70:	08004b7b 	.word	0x08004b7b
 8004b74:	2300      	movs	r3, #0
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e01d      	b.n	8004bb6 <UART_SetConfig+0xe2>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e01a      	b.n	8004bb6 <UART_SetConfig+0xe2>
 8004b80:	2304      	movs	r3, #4
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e017      	b.n	8004bb6 <UART_SetConfig+0xe2>
 8004b86:	2308      	movs	r3, #8
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e014      	b.n	8004bb6 <UART_SetConfig+0xe2>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e011      	b.n	8004bb6 <UART_SetConfig+0xe2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <UART_SetConfig+0x260>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d102      	bne.n	8004ba2 <UART_SetConfig+0xce>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e009      	b.n	8004bb6 <UART_SetConfig+0xe2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a64      	ldr	r2, [pc, #400]	; (8004d38 <UART_SetConfig+0x264>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d102      	bne.n	8004bb2 <UART_SetConfig+0xde>
 8004bac:	2300      	movs	r3, #0
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e001      	b.n	8004bb6 <UART_SetConfig+0xe2>
 8004bb2:	2310      	movs	r3, #16
 8004bb4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbe:	d15a      	bne.n	8004c76 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004bc0:	7ffb      	ldrb	r3, [r7, #31]
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d827      	bhi.n	8004c16 <UART_SetConfig+0x142>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0xf8>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe fa92 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	61b8      	str	r0, [r7, #24]
        break;
 8004bf6:	e013      	b.n	8004c20 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe fab0 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8004bfc:	61b8      	str	r0, [r7, #24]
        break;
 8004bfe:	e00f      	b.n	8004c20 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b4e      	ldr	r3, [pc, #312]	; (8004d3c <UART_SetConfig+0x268>)
 8004c02:	61bb      	str	r3, [r7, #24]
        break;
 8004c04:	e00c      	b.n	8004c20 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe fa11 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8004c0a:	61b8      	str	r0, [r7, #24]
        break;
 8004c0c:	e008      	b.n	8004c20 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	61bb      	str	r3, [r7, #24]
        break;
 8004c14:	e004      	b.n	8004c20 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d074      	beq.n	8004d10 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	005a      	lsls	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	441a      	add	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d916      	bls.n	8004c70 <UART_SetConfig+0x19c>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d212      	bcs.n	8004c70 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f023 030f 	bic.w	r3, r3, #15
 8004c52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	89fb      	ldrh	r3, [r7, #14]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	89fa      	ldrh	r2, [r7, #14]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e04f      	b.n	8004d10 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	77bb      	strb	r3, [r7, #30]
 8004c74:	e04c      	b.n	8004d10 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c76:	7ffb      	ldrb	r3, [r7, #31]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d828      	bhi.n	8004cce <UART_SetConfig+0x1fa>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x1b0>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cbf 	.word	0x08004cbf
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004ccf 	.word	0x08004ccf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe fa36 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 8004cac:	61b8      	str	r0, [r7, #24]
        break;
 8004cae:	e013      	b.n	8004cd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fe fa54 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8004cb4:	61b8      	str	r0, [r7, #24]
        break;
 8004cb6:	e00f      	b.n	8004cd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <UART_SetConfig+0x268>)
 8004cba:	61bb      	str	r3, [r7, #24]
        break;
 8004cbc:	e00c      	b.n	8004cd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7fe f9b5 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8004cc2:	61b8      	str	r0, [r7, #24]
        break;
 8004cc4:	e008      	b.n	8004cd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cca:	61bb      	str	r3, [r7, #24]
        break;
 8004ccc:	e004      	b.n	8004cd8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	77bb      	strb	r3, [r7, #30]
        break;
 8004cd6:	bf00      	nop
    }

    if (pclk != 0U)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d018      	beq.n	8004d10 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	085a      	lsrs	r2, r3, #1
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	441a      	add	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b0f      	cmp	r3, #15
 8004cf6:	d909      	bls.n	8004d0c <UART_SetConfig+0x238>
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d205      	bcs.n	8004d0c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	e001      	b.n	8004d10 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	efff69f3 	.word	0xefff69f3
 8004d2c:	40013800 	.word	0x40013800
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40004400 	.word	0x40004400
 8004d38:	40004800 	.word	0x40004800
 8004d3c:	007a1200 	.word	0x007a1200

08004d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01a      	beq.n	8004e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3e:	d10a      	bne.n	8004e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]
  }
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b098      	sub	sp, #96	; 0x60
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e94:	f7fb feea 	bl	8000c6c <HAL_GetTick>
 8004e98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d12e      	bne.n	8004f06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f88c 	bl	8004fd4 <UART_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d021      	beq.n	8004f06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e6      	bne.n	8004ec2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e062      	b.n	8004fcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d149      	bne.n	8004fa8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f856 	bl	8004fd4 <UART_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d03c      	beq.n	8004fa8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e6      	bne.n	8004f2e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f80:	61fa      	str	r2, [r7, #28]
 8004f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	69b9      	ldr	r1, [r7, #24]
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e011      	b.n	8004fcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3758      	adds	r7, #88	; 0x58
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe4:	e049      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fec:	d045      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7fb fe3d 	bl	8000c6c <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e048      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d031      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d110      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2208      	movs	r2, #8
 800502a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f838 	bl	80050a2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2208      	movs	r2, #8
 8005036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e029      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005054:	d111      	bne.n	800507a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800505e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f81e 	bl	80050a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00f      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	bf0c      	ite	eq
 800508a:	2301      	moveq	r3, #1
 800508c:	2300      	movne	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	429a      	cmp	r2, r3
 8005096:	d0a6      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b095      	sub	sp, #84	; 0x54
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	643b      	str	r3, [r7, #64]	; 0x40
 80050ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3308      	adds	r3, #8
 80050e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	2b01      	cmp	r3, #1
 8005116:	d118      	bne.n	800514a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	60bb      	str	r3, [r7, #8]
   return(result);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f023 0310 	bic.w	r3, r3, #16
 800512c:	647b      	str	r3, [r7, #68]	; 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	613b      	str	r3, [r7, #16]
   return(result);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e6      	bne.n	8005118 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800515e:	bf00      	nop
 8005160:	3754      	adds	r7, #84	; 0x54
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005172:	f3ef 8305 	mrs	r3, IPSR
 8005176:	60bb      	str	r3, [r7, #8]
  return(result);
 8005178:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10f      	bne.n	800519e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800517e:	f3ef 8310 	mrs	r3, PRIMASK
 8005182:	607b      	str	r3, [r7, #4]
  return(result);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <osKernelInitialize+0x32>
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <osKernelInitialize+0x64>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d109      	bne.n	80051a6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005192:	f3ef 8311 	mrs	r3, BASEPRI
 8005196:	603b      	str	r3, [r7, #0]
  return(result);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800519e:	f06f 0305 	mvn.w	r3, #5
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e00c      	b.n	80051c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <osKernelInitialize+0x64>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d105      	bne.n	80051ba <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <osKernelInitialize+0x64>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e002      	b.n	80051c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80051c0:	68fb      	ldr	r3, [r7, #12]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	200005a8 	.word	0x200005a8

080051d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051da:	f3ef 8305 	mrs	r3, IPSR
 80051de:	60bb      	str	r3, [r7, #8]
  return(result);
 80051e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10f      	bne.n	8005206 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ea:	607b      	str	r3, [r7, #4]
  return(result);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <osKernelStart+0x32>
 80051f2:	4b11      	ldr	r3, [pc, #68]	; (8005238 <osKernelStart+0x64>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d109      	bne.n	800520e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051fa:	f3ef 8311 	mrs	r3, BASEPRI
 80051fe:	603b      	str	r3, [r7, #0]
  return(result);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005206:	f06f 0305 	mvn.w	r3, #5
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e00e      	b.n	800522c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <osKernelStart+0x64>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <osKernelStart+0x64>)
 8005218:	2202      	movs	r2, #2
 800521a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800521c:	f001 f898 	bl	8006350 <vTaskStartScheduler>
      stat = osOK;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e002      	b.n	800522c <osKernelStart+0x58>
    } else {
      stat = osError;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800522a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800522c:	68fb      	ldr	r3, [r7, #12]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200005a8 	.word	0x200005a8

0800523c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b092      	sub	sp, #72	; 0x48
 8005240:	af04      	add	r7, sp, #16
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800524c:	f3ef 8305 	mrs	r3, IPSR
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 8094 	bne.w	8005382 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525a:	f3ef 8310 	mrs	r3, PRIMASK
 800525e:	623b      	str	r3, [r7, #32]
  return(result);
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 808d 	bne.w	8005382 <osThreadNew+0x146>
 8005268:	4b48      	ldr	r3, [pc, #288]	; (800538c <osThreadNew+0x150>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d106      	bne.n	800527e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005270:	f3ef 8311 	mrs	r3, BASEPRI
 8005274:	61fb      	str	r3, [r7, #28]
  return(result);
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f040 8082 	bne.w	8005382 <osThreadNew+0x146>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d07e      	beq.n	8005382 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005288:	2318      	movs	r3, #24
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800528c:	2300      	movs	r3, #0
 800528e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005290:	f107 031b 	add.w	r3, r7, #27
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d045      	beq.n	800532e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <osThreadNew+0x74>
        name = attr->name;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <osThreadNew+0x9a>
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	2b38      	cmp	r3, #56	; 0x38
 80052c8:	d805      	bhi.n	80052d6 <osThreadNew+0x9a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <osThreadNew+0x9e>
        return (NULL);
 80052d6:	2300      	movs	r3, #0
 80052d8:	e054      	b.n	8005384 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00e      	beq.n	8005310 <osThreadNew+0xd4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2bbb      	cmp	r3, #187	; 0xbb
 80052f8:	d90a      	bls.n	8005310 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <osThreadNew+0xd4>
        mem = 1;
 800530a:	2301      	movs	r3, #1
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
 800530e:	e010      	b.n	8005332 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10c      	bne.n	8005332 <osThreadNew+0xf6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d108      	bne.n	8005332 <osThreadNew+0xf6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <osThreadNew+0xf6>
          mem = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28
 800532c:	e001      	b.n	8005332 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	2b01      	cmp	r3, #1
 8005336:	d110      	bne.n	800535a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005340:	9202      	str	r2, [sp, #8]
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fe1a 	bl	8005f88 <xTaskCreateStatic>
 8005354:	4603      	mov	r3, r0
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e013      	b.n	8005382 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	d110      	bne.n	8005382 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	b29a      	uxth	r2, r3
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fe64 	bl	8006040 <xTaskCreate>
 8005378:	4603      	mov	r3, r0
 800537a:	2b01      	cmp	r3, #1
 800537c:	d001      	beq.n	8005382 <osThreadNew+0x146>
          hTask = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3738      	adds	r7, #56	; 0x38
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	200005a8 	.word	0x200005a8

08005390 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005398:	f3ef 8305 	mrs	r3, IPSR
 800539c:	613b      	str	r3, [r7, #16]
  return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10f      	bne.n	80053c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a4:	f3ef 8310 	mrs	r3, PRIMASK
 80053a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <osDelay+0x34>
 80053b0:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <osDelay+0x58>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d109      	bne.n	80053cc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053b8:	f3ef 8311 	mrs	r3, BASEPRI
 80053bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <osDelay+0x3c>
    stat = osErrorISR;
 80053c4:	f06f 0305 	mvn.w	r3, #5
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e007      	b.n	80053dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 ff86 	bl	80062e8 <vTaskDelay>
    }
  }

  return (stat);
 80053dc:	697b      	ldr	r3, [r7, #20]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200005a8 	.word	0x200005a8

080053ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4a07      	ldr	r2, [pc, #28]	; (8005418 <vApplicationGetIdleTaskMemory+0x2c>)
 80053fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a06      	ldr	r2, [pc, #24]	; (800541c <vApplicationGetIdleTaskMemory+0x30>)
 8005402:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2240      	movs	r2, #64	; 0x40
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	200005ac 	.word	0x200005ac
 800541c:	20000668 	.word	0x20000668

08005420 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a07      	ldr	r2, [pc, #28]	; (800544c <vApplicationGetTimerTaskMemory+0x2c>)
 8005430:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a06      	ldr	r2, [pc, #24]	; (8005450 <vApplicationGetTimerTaskMemory+0x30>)
 8005436:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	601a      	str	r2, [r3, #0]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000768 	.word	0x20000768
 8005450:	20000824 	.word	0x20000824

08005454 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f103 0208 	add.w	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f103 0208 	add.w	r2, r3, #8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f103 0208 	add.w	r2, r3, #8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	601a      	str	r2, [r3, #0]
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800550c:	d103      	bne.n	8005516 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e00c      	b.n	8005530 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3308      	adds	r3, #8
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e002      	b.n	8005524 <vListInsert+0x2e>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	429a      	cmp	r2, r3
 800552e:	d2f6      	bcs.n	800551e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6892      	ldr	r2, [r2, #8]
 800557e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6852      	ldr	r2, [r2, #4]
 8005588:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d103      	bne.n	800559c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	1e5a      	subs	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055e6:	f002 f96d 	bl	80078c4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	441a      	add	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	3b01      	subs	r3, #1
 8005618:	68f9      	ldr	r1, [r7, #12]
 800561a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	441a      	add	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	22ff      	movs	r2, #255	; 0xff
 800562a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	22ff      	movs	r2, #255	; 0xff
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d114      	bne.n	8005666 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01a      	beq.n	800567a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3310      	adds	r3, #16
 8005648:	4618      	mov	r0, r3
 800564a:	f001 f91f 	bl	800688c <xTaskRemoveFromEventList>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d012      	beq.n	800567a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <xQueueGenericReset+0xcc>)
 8005656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	e009      	b.n	800567a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3310      	adds	r3, #16
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fef2 	bl	8005454 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3324      	adds	r3, #36	; 0x24
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff feed 	bl	8005454 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800567a:	f002 f953 	bl	8007924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800567e:	2301      	movs	r3, #1
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08e      	sub	sp, #56	; 0x38
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <xQueueGenericCreateStatic+0x52>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <xQueueGenericCreateStatic+0x56>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueGenericCreateStatic+0x58>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	623b      	str	r3, [r7, #32]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <xQueueGenericCreateStatic+0x7e>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <xQueueGenericCreateStatic+0x82>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <xQueueGenericCreateStatic+0x84>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	61fb      	str	r3, [r7, #28]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800572a:	2350      	movs	r3, #80	; 0x50
 800572c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d00a      	beq.n	800574a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	61bb      	str	r3, [r7, #24]
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800575c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f805 	bl	800577a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005772:	4618      	mov	r0, r3
 8005774:	3730      	adds	r7, #48	; 0x30
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e002      	b.n	800579c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057a8:	2101      	movs	r1, #1
 80057aa:	69b8      	ldr	r0, [r7, #24]
 80057ac:	f7ff ff06 	bl	80055bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08e      	sub	sp, #56	; 0x38
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057ce:	2300      	movs	r3, #0
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xQueueGenericSend+0x32>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d103      	bne.n	8005800 <xQueueGenericSend+0x40>
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <xQueueGenericSend+0x44>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <xQueueGenericSend+0x46>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <xQueueGenericSend+0x60>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d103      	bne.n	800582e <xQueueGenericSend+0x6e>
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <xQueueGenericSend+0x72>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <xQueueGenericSend+0x74>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueGenericSend+0x8e>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	623b      	str	r3, [r7, #32]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800584e:	f001 f9e5 	bl	8006c1c <xTaskGetSchedulerState>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <xQueueGenericSend+0x9e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <xQueueGenericSend+0xa2>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <xQueueGenericSend+0xa4>
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <xQueueGenericSend+0xbe>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	61fb      	str	r3, [r7, #28]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800587e:	f002 f821 	bl	80078c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <xQueueGenericSend+0xd4>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d129      	bne.n	80058e8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800589a:	f000 fa07 	bl	8005cac <prvCopyDataToQueue>
 800589e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	3324      	adds	r3, #36	; 0x24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 ffed 	bl	800688c <xTaskRemoveFromEventList>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d013      	beq.n	80058e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058b8:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <xQueueGenericSend+0x1f8>)
 80058ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	e00a      	b.n	80058e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058d0:	4b39      	ldr	r3, [pc, #228]	; (80059b8 <xQueueGenericSend+0x1f8>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058e0:	f002 f820 	bl	8007924 <vPortExitCritical>
				return pdPASS;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e063      	b.n	80059b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ee:	f002 f819 	bl	8007924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e05c      	b.n	80059b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058fc:	f107 0314 	add.w	r3, r7, #20
 8005900:	4618      	mov	r0, r3
 8005902:	f001 f827 	bl	8006954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005906:	2301      	movs	r3, #1
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800590a:	f002 f80b 	bl	8007924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800590e:	f000 fd8f 	bl	8006430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005912:	f001 ffd7 	bl	80078c4 <vPortEnterCritical>
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800591c:	b25b      	sxtb	r3, r3
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005922:	d103      	bne.n	800592c <xQueueGenericSend+0x16c>
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005932:	b25b      	sxtb	r3, r3
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005938:	d103      	bne.n	8005942 <xQueueGenericSend+0x182>
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005942:	f001 ffef 	bl	8007924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005946:	1d3a      	adds	r2, r7, #4
 8005948:	f107 0314 	add.w	r3, r7, #20
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f001 f816 	bl	8006980 <xTaskCheckForTimeOut>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d124      	bne.n	80059a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800595a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800595c:	f000 fa9e 	bl	8005e9c <prvIsQueueFull>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d018      	beq.n	8005998 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	3310      	adds	r3, #16
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 ff3c 	bl	80067ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005976:	f000 fa29 	bl	8005dcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800597a:	f000 fd67 	bl	800644c <xTaskResumeAll>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f af7c 	bne.w	800587e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005986:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <xQueueGenericSend+0x1f8>)
 8005988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	e772      	b.n	800587e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800599a:	f000 fa17 	bl	8005dcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800599e:	f000 fd55 	bl	800644c <xTaskResumeAll>
 80059a2:	e76c      	b.n	800587e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059a6:	f000 fa11 	bl	8005dcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059aa:	f000 fd4f 	bl	800644c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ae:	2300      	movs	r3, #0
		}
	}
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3738      	adds	r7, #56	; 0x38
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08e      	sub	sp, #56	; 0x38
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <xQueueGenericSendFromISR+0x3c>
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <xQueueGenericSendFromISR+0x40>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <xQueueGenericSendFromISR+0x42>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	623b      	str	r3, [r7, #32]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d103      	bne.n	8005a26 <xQueueGenericSendFromISR+0x6a>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <xQueueGenericSendFromISR+0x6e>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericSendFromISR+0x70>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	61fb      	str	r3, [r7, #28]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a46:	f002 f81f 	bl	8007a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	61ba      	str	r2, [r7, #24]
 8005a60:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a62:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d302      	bcc.n	8005a78 <xQueueGenericSendFromISR+0xbc>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d12c      	bne.n	8005ad2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a88:	f000 f910 	bl	8005cac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a94:	d112      	bne.n	8005abc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d016      	beq.n	8005acc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	3324      	adds	r3, #36	; 0x24
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fef2 	bl	800688c <xTaskRemoveFromEventList>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	e007      	b.n	8005acc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005abc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	b25a      	sxtb	r2, r3
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005acc:	2301      	movs	r3, #1
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ad0:	e001      	b.n	8005ad6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ae0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3738      	adds	r7, #56	; 0x38
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08c      	sub	sp, #48	; 0x30
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10a      	bne.n	8005b1c <xQueueReceive+0x30>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	623b      	str	r3, [r7, #32]
}
 8005b18:	bf00      	nop
 8005b1a:	e7fe      	b.n	8005b1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d103      	bne.n	8005b2a <xQueueReceive+0x3e>
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <xQueueReceive+0x42>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <xQueueReceive+0x44>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <xQueueReceive+0x5e>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	61fb      	str	r3, [r7, #28]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b4a:	f001 f867 	bl	8006c1c <xTaskGetSchedulerState>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <xQueueReceive+0x6e>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <xQueueReceive+0x72>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <xQueueReceive+0x74>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <xQueueReceive+0x8e>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	61bb      	str	r3, [r7, #24]
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b7a:	f001 fea3 	bl	80078c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01f      	beq.n	8005bca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b8e:	f000 f8f7 	bl	8005d80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	1e5a      	subs	r2, r3, #1
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	3310      	adds	r3, #16
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fe70 	bl	800688c <xTaskRemoveFromEventList>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bb2:	4b3d      	ldr	r3, [pc, #244]	; (8005ca8 <xQueueReceive+0x1bc>)
 8005bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bc2:	f001 feaf 	bl	8007924 <vPortExitCritical>
				return pdPASS;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e069      	b.n	8005c9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d103      	bne.n	8005bd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bd0:	f001 fea8 	bl	8007924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e062      	b.n	8005c9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bde:	f107 0310 	add.w	r3, r7, #16
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 feb6 	bl	8006954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bec:	f001 fe9a 	bl	8007924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bf0:	f000 fc1e 	bl	8006430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bf4:	f001 fe66 	bl	80078c4 <vPortEnterCritical>
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bfe:	b25b      	sxtb	r3, r3
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c04:	d103      	bne.n	8005c0e <xQueueReceive+0x122>
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c1a:	d103      	bne.n	8005c24 <xQueueReceive+0x138>
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c24:	f001 fe7e 	bl	8007924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c28:	1d3a      	adds	r2, r7, #4
 8005c2a:	f107 0310 	add.w	r3, r7, #16
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fea5 	bl	8006980 <xTaskCheckForTimeOut>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d123      	bne.n	8005c84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3e:	f000 f917 	bl	8005e70 <prvIsQueueEmpty>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	3324      	adds	r3, #36	; 0x24
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fdcb 	bl	80067ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c58:	f000 f8b8 	bl	8005dcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c5c:	f000 fbf6 	bl	800644c <xTaskResumeAll>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d189      	bne.n	8005b7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <xQueueReceive+0x1bc>)
 8005c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	e780      	b.n	8005b7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c7a:	f000 f8a7 	bl	8005dcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c7e:	f000 fbe5 	bl	800644c <xTaskResumeAll>
 8005c82:	e77a      	b.n	8005b7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c86:	f000 f8a1 	bl	8005dcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c8a:	f000 fbdf 	bl	800644c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c90:	f000 f8ee 	bl	8005e70 <prvIsQueueEmpty>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f43f af6f 	beq.w	8005b7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3730      	adds	r7, #48	; 0x30
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	e000ed04 	.word	0xe000ed04

08005cac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10d      	bne.n	8005ce6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d14d      	bne.n	8005d6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 ffbe 	bl	8006c58 <xTaskPriorityDisinherit>
 8005cdc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	605a      	str	r2, [r3, #4]
 8005ce4:	e043      	b.n	8005d6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d119      	bne.n	8005d20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6898      	ldr	r0, [r3, #8]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	f002 f906 	bl	8007f08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	441a      	add	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d32b      	bcc.n	8005d6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	609a      	str	r2, [r3, #8]
 8005d1e:	e026      	b.n	8005d6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68d8      	ldr	r0, [r3, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	f002 f8ec 	bl	8007f08 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	425b      	negs	r3, r3
 8005d3a:	441a      	add	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d207      	bcs.n	8005d5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	425b      	negs	r3, r3
 8005d56:	441a      	add	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d105      	bne.n	8005d6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d76:	697b      	ldr	r3, [r7, #20]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d018      	beq.n	8005dc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	441a      	add	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d303      	bcc.n	8005db4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68d9      	ldr	r1, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6838      	ldr	r0, [r7, #0]
 8005dc0:	f002 f8a2 	bl	8007f08 <memcpy>
	}
}
 8005dc4:	bf00      	nop
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005dd4:	f001 fd76 	bl	80078c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de0:	e011      	b.n	8005e06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d012      	beq.n	8005e10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3324      	adds	r3, #36	; 0x24
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fd4c 	bl	800688c <xTaskRemoveFromEventList>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dfa:	f000 fe23 	bl	8006a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dce9      	bgt.n	8005de2 <prvUnlockQueue+0x16>
 8005e0e:	e000      	b.n	8005e12 <prvUnlockQueue+0x46>
					break;
 8005e10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	22ff      	movs	r2, #255	; 0xff
 8005e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e1a:	f001 fd83 	bl	8007924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e1e:	f001 fd51 	bl	80078c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e2a:	e011      	b.n	8005e50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3310      	adds	r3, #16
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fd27 	bl	800688c <xTaskRemoveFromEventList>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e44:	f000 fdfe 	bl	8006a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dce9      	bgt.n	8005e2c <prvUnlockQueue+0x60>
 8005e58:	e000      	b.n	8005e5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	22ff      	movs	r2, #255	; 0xff
 8005e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e64:	f001 fd5e 	bl	8007924 <vPortExitCritical>
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e78:	f001 fd24 	bl	80078c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e001      	b.n	8005e8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e8e:	f001 fd49 	bl	8007924 <vPortExitCritical>

	return xReturn;
 8005e92:	68fb      	ldr	r3, [r7, #12]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ea4:	f001 fd0e 	bl	80078c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d102      	bne.n	8005eba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e001      	b.n	8005ebe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ebe:	f001 fd31 	bl	8007924 <vPortExitCritical>

	return xReturn;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e014      	b.n	8005f06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005edc:	4a0f      	ldr	r2, [pc, #60]	; (8005f1c <vQueueAddToRegistry+0x50>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10b      	bne.n	8005f00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ee8:	490c      	ldr	r1, [pc, #48]	; (8005f1c <vQueueAddToRegistry+0x50>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ef2:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <vQueueAddToRegistry+0x50>)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4413      	add	r3, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005efe:	e006      	b.n	8005f0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b07      	cmp	r3, #7
 8005f0a:	d9e7      	bls.n	8005edc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000a24 	.word	0x20000a24

08005f20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f30:	f001 fcc8 	bl	80078c4 <vPortEnterCritical>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f40:	d103      	bne.n	8005f4a <vQueueWaitForMessageRestricted+0x2a>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f56:	d103      	bne.n	8005f60 <vQueueWaitForMessageRestricted+0x40>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f60:	f001 fce0 	bl	8007924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	3324      	adds	r3, #36	; 0x24
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fc5d 	bl	8006834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f7a:	6978      	ldr	r0, [r7, #20]
 8005f7c:	f7ff ff26 	bl	8005dcc <prvUnlockQueue>
	}
 8005f80:	bf00      	nop
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08e      	sub	sp, #56	; 0x38
 8005f8c:	af04      	add	r7, sp, #16
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	623b      	str	r3, [r7, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xTaskCreateStatic+0x46>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	61fb      	str	r3, [r7, #28]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fce:	23bc      	movs	r3, #188	; 0xbc
 8005fd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2bbc      	cmp	r3, #188	; 0xbc
 8005fd6:	d00a      	beq.n	8005fee <xTaskCreateStatic+0x66>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	61bb      	str	r3, [r7, #24]
}
 8005fea:	bf00      	nop
 8005fec:	e7fe      	b.n	8005fec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01e      	beq.n	8006032 <xTaskCreateStatic+0xaa>
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01b      	beq.n	8006032 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006002:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	2202      	movs	r2, #2
 8006008:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800600c:	2300      	movs	r3, #0
 800600e:	9303      	str	r3, [sp, #12]
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	9302      	str	r3, [sp, #8]
 8006014:	f107 0314 	add.w	r3, r7, #20
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f851 	bl	80060cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800602a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800602c:	f000 f8ec 	bl	8006208 <prvAddNewTaskToReadyList>
 8006030:	e001      	b.n	8006036 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006036:	697b      	ldr	r3, [r7, #20]
	}
 8006038:	4618      	mov	r0, r3
 800603a:	3728      	adds	r7, #40	; 0x28
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08c      	sub	sp, #48	; 0x30
 8006044:	af04      	add	r7, sp, #16
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4618      	mov	r0, r3
 8006056:	f001 fd57 	bl	8007b08 <pvPortMalloc>
 800605a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00e      	beq.n	8006080 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006062:	20bc      	movs	r0, #188	; 0xbc
 8006064:	f001 fd50 	bl	8007b08 <pvPortMalloc>
 8006068:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	631a      	str	r2, [r3, #48]	; 0x30
 8006076:	e005      	b.n	8006084 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006078:	6978      	ldr	r0, [r7, #20]
 800607a:	f001 fe09 	bl	8007c90 <vPortFree>
 800607e:	e001      	b.n	8006084 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	2300      	movs	r3, #0
 8006096:	9303      	str	r3, [sp, #12]
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	9302      	str	r3, [sp, #8]
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f80f 	bl	80060cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060ae:	69f8      	ldr	r0, [r7, #28]
 80060b0:	f000 f8aa 	bl	8006208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060b4:	2301      	movs	r3, #1
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	e002      	b.n	80060c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060c0:	69bb      	ldr	r3, [r7, #24]
	}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	461a      	mov	r2, r3
 80060e4:	21a5      	movs	r1, #165	; 0xa5
 80060e6:	f001 ff1d 	bl	8007f24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060f4:	3b01      	subs	r3, #1
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f023 0307 	bic.w	r3, r3, #7
 8006102:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <prvInitialiseNewTask+0x58>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	617b      	str	r3, [r7, #20]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e012      	b.n	8006150 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	7819      	ldrb	r1, [r3, #0]
 8006132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	3334      	adds	r3, #52	; 0x34
 800613a:	460a      	mov	r2, r1
 800613c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b0f      	cmp	r3, #15
 8006154:	d9e9      	bls.n	800612a <prvInitialiseNewTask+0x5e>
 8006156:	e000      	b.n	800615a <prvInitialiseNewTask+0x8e>
		{
			break;
 8006158:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	2b37      	cmp	r3, #55	; 0x37
 8006166:	d901      	bls.n	800616c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006168:	2337      	movs	r3, #55	; 0x37
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	2200      	movs	r2, #0
 800617c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff f986 	bl	8005494 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	3318      	adds	r3, #24
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f981 	bl	8005494 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	3354      	adds	r3, #84	; 0x54
 80061bc:	2260      	movs	r2, #96	; 0x60
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 feaf 	bl	8007f24 <memset>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <prvInitialiseNewTask+0x130>)
 80061ca:	659a      	str	r2, [r3, #88]	; 0x58
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	4a0c      	ldr	r2, [pc, #48]	; (8006200 <prvInitialiseNewTask+0x134>)
 80061d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	4a0b      	ldr	r2, [pc, #44]	; (8006204 <prvInitialiseNewTask+0x138>)
 80061d6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	69b8      	ldr	r0, [r7, #24]
 80061de:	f001 fa41 	bl	8007664 <pxPortInitialiseStack>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f4:	bf00      	nop
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	0800819c 	.word	0x0800819c
 8006200:	080081bc 	.word	0x080081bc
 8006204:	0800817c 	.word	0x0800817c

08006208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006210:	f001 fb58 	bl	80078c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006214:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <prvAddNewTaskToReadyList+0xc4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <prvAddNewTaskToReadyList+0xc4>)
 800621c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800621e:	4b2c      	ldr	r3, [pc, #176]	; (80062d0 <prvAddNewTaskToReadyList+0xc8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d109      	bne.n	800623a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006226:	4a2a      	ldr	r2, [pc, #168]	; (80062d0 <prvAddNewTaskToReadyList+0xc8>)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800622c:	4b27      	ldr	r3, [pc, #156]	; (80062cc <prvAddNewTaskToReadyList+0xc4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d110      	bne.n	8006256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006234:	f000 fc2a 	bl	8006a8c <prvInitialiseTaskLists>
 8006238:	e00d      	b.n	8006256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800623a:	4b26      	ldr	r3, [pc, #152]	; (80062d4 <prvAddNewTaskToReadyList+0xcc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006242:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <prvAddNewTaskToReadyList+0xc8>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	429a      	cmp	r2, r3
 800624e:	d802      	bhi.n	8006256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006250:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <prvAddNewTaskToReadyList+0xc8>)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006256:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <prvAddNewTaskToReadyList+0xd0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3301      	adds	r3, #1
 800625c:	4a1e      	ldr	r2, [pc, #120]	; (80062d8 <prvAddNewTaskToReadyList+0xd0>)
 800625e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006260:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <prvAddNewTaskToReadyList+0xd0>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626c:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <prvAddNewTaskToReadyList+0xd4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d903      	bls.n	800627c <prvAddNewTaskToReadyList+0x74>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	4a18      	ldr	r2, [pc, #96]	; (80062dc <prvAddNewTaskToReadyList+0xd4>)
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <prvAddNewTaskToReadyList+0xd8>)
 800628a:	441a      	add	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3304      	adds	r3, #4
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f7ff f90b 	bl	80054ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006298:	f001 fb44 	bl	8007924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <prvAddNewTaskToReadyList+0xcc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00e      	beq.n	80062c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <prvAddNewTaskToReadyList+0xc8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d207      	bcs.n	80062c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062b2:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <prvAddNewTaskToReadyList+0xdc>)
 80062b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000f38 	.word	0x20000f38
 80062d0:	20000a64 	.word	0x20000a64
 80062d4:	20000f44 	.word	0x20000f44
 80062d8:	20000f54 	.word	0x20000f54
 80062dc:	20000f40 	.word	0x20000f40
 80062e0:	20000a68 	.word	0x20000a68
 80062e4:	e000ed04 	.word	0xe000ed04

080062e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d017      	beq.n	800632a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <vTaskDelay+0x60>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <vTaskDelay+0x30>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	60bb      	str	r3, [r7, #8]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006318:	f000 f88a 	bl	8006430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800631c:	2100      	movs	r1, #0
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fe3a 	bl	8006f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006324:	f000 f892 	bl	800644c <xTaskResumeAll>
 8006328:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d107      	bne.n	8006340 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <vTaskDelay+0x64>)
 8006332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20000f60 	.word	0x20000f60
 800634c:	e000ed04 	.word	0xe000ed04

08006350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	; 0x28
 8006354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800635e:	463a      	mov	r2, r7
 8006360:	1d39      	adds	r1, r7, #4
 8006362:	f107 0308 	add.w	r3, r7, #8
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff f840 	bl	80053ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	9202      	str	r2, [sp, #8]
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	2300      	movs	r3, #0
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2300      	movs	r3, #0
 800637c:	460a      	mov	r2, r1
 800637e:	4924      	ldr	r1, [pc, #144]	; (8006410 <vTaskStartScheduler+0xc0>)
 8006380:	4824      	ldr	r0, [pc, #144]	; (8006414 <vTaskStartScheduler+0xc4>)
 8006382:	f7ff fe01 	bl	8005f88 <xTaskCreateStatic>
 8006386:	4603      	mov	r3, r0
 8006388:	4a23      	ldr	r2, [pc, #140]	; (8006418 <vTaskStartScheduler+0xc8>)
 800638a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800638c:	4b22      	ldr	r3, [pc, #136]	; (8006418 <vTaskStartScheduler+0xc8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006394:	2301      	movs	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e001      	b.n	800639e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d102      	bne.n	80063aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063a4:	f000 fe4c 	bl	8007040 <xTimerCreateTimerTask>
 80063a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d11b      	bne.n	80063e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063c4:	4b15      	ldr	r3, [pc, #84]	; (800641c <vTaskStartScheduler+0xcc>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3354      	adds	r3, #84	; 0x54
 80063ca:	4a15      	ldr	r2, [pc, #84]	; (8006420 <vTaskStartScheduler+0xd0>)
 80063cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <vTaskStartScheduler+0xd4>)
 80063d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <vTaskStartScheduler+0xd8>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <vTaskStartScheduler+0xdc>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063e2:	f001 f9cd 	bl	8007780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063e6:	e00e      	b.n	8006406 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ee:	d10a      	bne.n	8006406 <vTaskStartScheduler+0xb6>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	60fb      	str	r3, [r7, #12]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <vTaskStartScheduler+0xb4>
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	080080e4 	.word	0x080080e4
 8006414:	08006a5d 	.word	0x08006a5d
 8006418:	20000f5c 	.word	0x20000f5c
 800641c:	20000a64 	.word	0x20000a64
 8006420:	20000010 	.word	0x20000010
 8006424:	20000f58 	.word	0x20000f58
 8006428:	20000f44 	.word	0x20000f44
 800642c:	20000f3c 	.word	0x20000f3c

08006430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006434:	4b04      	ldr	r3, [pc, #16]	; (8006448 <vTaskSuspendAll+0x18>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	4a03      	ldr	r2, [pc, #12]	; (8006448 <vTaskSuspendAll+0x18>)
 800643c:	6013      	str	r3, [r2, #0]
}
 800643e:	bf00      	nop
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	20000f60 	.word	0x20000f60

0800644c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006456:	2300      	movs	r3, #0
 8006458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800645a:	4b42      	ldr	r3, [pc, #264]	; (8006564 <xTaskResumeAll+0x118>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <xTaskResumeAll+0x2c>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	603b      	str	r3, [r7, #0]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006478:	f001 fa24 	bl	80078c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800647c:	4b39      	ldr	r3, [pc, #228]	; (8006564 <xTaskResumeAll+0x118>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3b01      	subs	r3, #1
 8006482:	4a38      	ldr	r2, [pc, #224]	; (8006564 <xTaskResumeAll+0x118>)
 8006484:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006486:	4b37      	ldr	r3, [pc, #220]	; (8006564 <xTaskResumeAll+0x118>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d162      	bne.n	8006554 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800648e:	4b36      	ldr	r3, [pc, #216]	; (8006568 <xTaskResumeAll+0x11c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d05e      	beq.n	8006554 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006496:	e02f      	b.n	80064f8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006498:	4b34      	ldr	r3, [pc, #208]	; (800656c <xTaskResumeAll+0x120>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3318      	adds	r3, #24
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff f85f 	bl	8005568 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff f85a 	bl	8005568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	4b2d      	ldr	r3, [pc, #180]	; (8006570 <xTaskResumeAll+0x124>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <xTaskResumeAll+0x7c>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <xTaskResumeAll+0x124>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4a27      	ldr	r2, [pc, #156]	; (8006574 <xTaskResumeAll+0x128>)
 80064d6:	441a      	add	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7fe ffe5 	bl	80054ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e8:	4b23      	ldr	r3, [pc, #140]	; (8006578 <xTaskResumeAll+0x12c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d302      	bcc.n	80064f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064f2:	4b22      	ldr	r3, [pc, #136]	; (800657c <xTaskResumeAll+0x130>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064f8:	4b1c      	ldr	r3, [pc, #112]	; (800656c <xTaskResumeAll+0x120>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1cb      	bne.n	8006498 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006506:	f000 fb63 	bl	8006bd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <xTaskResumeAll+0x134>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d010      	beq.n	8006538 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006516:	f000 f847 	bl	80065a8 <xTaskIncrementTick>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006520:	4b16      	ldr	r3, [pc, #88]	; (800657c <xTaskResumeAll+0x130>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3b01      	subs	r3, #1
 800652a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f1      	bne.n	8006516 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006532:	4b13      	ldr	r3, [pc, #76]	; (8006580 <xTaskResumeAll+0x134>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006538:	4b10      	ldr	r3, [pc, #64]	; (800657c <xTaskResumeAll+0x130>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006540:	2301      	movs	r3, #1
 8006542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006544:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <xTaskResumeAll+0x138>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006554:	f001 f9e6 	bl	8007924 <vPortExitCritical>

	return xAlreadyYielded;
 8006558:	68bb      	ldr	r3, [r7, #8]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000f60 	.word	0x20000f60
 8006568:	20000f38 	.word	0x20000f38
 800656c:	20000ef8 	.word	0x20000ef8
 8006570:	20000f40 	.word	0x20000f40
 8006574:	20000a68 	.word	0x20000a68
 8006578:	20000a64 	.word	0x20000a64
 800657c:	20000f4c 	.word	0x20000f4c
 8006580:	20000f48 	.word	0x20000f48
 8006584:	e000ed04 	.word	0xe000ed04

08006588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <xTaskGetTickCount+0x1c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006594:	687b      	ldr	r3, [r7, #4]
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000f3c 	.word	0x20000f3c

080065a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b2:	4b51      	ldr	r3, [pc, #324]	; (80066f8 <xTaskIncrementTick+0x150>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f040 808e 	bne.w	80066d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065bc:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <xTaskIncrementTick+0x154>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065c4:	4a4d      	ldr	r2, [pc, #308]	; (80066fc <xTaskIncrementTick+0x154>)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d120      	bne.n	8006612 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065d0:	4b4b      	ldr	r3, [pc, #300]	; (8006700 <xTaskIncrementTick+0x158>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	603b      	str	r3, [r7, #0]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <xTaskIncrementTick+0x46>
 80065f0:	4b43      	ldr	r3, [pc, #268]	; (8006700 <xTaskIncrementTick+0x158>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	4b43      	ldr	r3, [pc, #268]	; (8006704 <xTaskIncrementTick+0x15c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a41      	ldr	r2, [pc, #260]	; (8006700 <xTaskIncrementTick+0x158>)
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	4a41      	ldr	r2, [pc, #260]	; (8006704 <xTaskIncrementTick+0x15c>)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	4b40      	ldr	r3, [pc, #256]	; (8006708 <xTaskIncrementTick+0x160>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	4a3f      	ldr	r2, [pc, #252]	; (8006708 <xTaskIncrementTick+0x160>)
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	f000 fadf 	bl	8006bd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006612:	4b3e      	ldr	r3, [pc, #248]	; (800670c <xTaskIncrementTick+0x164>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	429a      	cmp	r2, r3
 800661a:	d34e      	bcc.n	80066ba <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800661c:	4b38      	ldr	r3, [pc, #224]	; (8006700 <xTaskIncrementTick+0x158>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <xTaskIncrementTick+0x82>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <xTaskIncrementTick+0x84>
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <xTaskIncrementTick+0x164>)
 8006632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006636:	601a      	str	r2, [r3, #0]
					break;
 8006638:	e03f      	b.n	80066ba <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800663a:	4b31      	ldr	r3, [pc, #196]	; (8006700 <xTaskIncrementTick+0x158>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	429a      	cmp	r2, r3
 8006650:	d203      	bcs.n	800665a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006652:	4a2e      	ldr	r2, [pc, #184]	; (800670c <xTaskIncrementTick+0x164>)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6013      	str	r3, [r2, #0]
						break;
 8006658:	e02f      	b.n	80066ba <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	3304      	adds	r3, #4
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe ff82 	bl	8005568 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	3318      	adds	r3, #24
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe ff79 	bl	8005568 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667a:	4b25      	ldr	r3, [pc, #148]	; (8006710 <xTaskIncrementTick+0x168>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d903      	bls.n	800668a <xTaskIncrementTick+0xe2>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	4a22      	ldr	r2, [pc, #136]	; (8006710 <xTaskIncrementTick+0x168>)
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <xTaskIncrementTick+0x16c>)
 8006698:	441a      	add	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	3304      	adds	r3, #4
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	f7fe ff04 	bl	80054ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	4b1b      	ldr	r3, [pc, #108]	; (8006718 <xTaskIncrementTick+0x170>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d3b3      	bcc.n	800661c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066b8:	e7b0      	b.n	800661c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066ba:	4b17      	ldr	r3, [pc, #92]	; (8006718 <xTaskIncrementTick+0x170>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	4914      	ldr	r1, [pc, #80]	; (8006714 <xTaskIncrementTick+0x16c>)
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d907      	bls.n	80066e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80066d2:	2301      	movs	r3, #1
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	e004      	b.n	80066e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066d8:	4b10      	ldr	r3, [pc, #64]	; (800671c <xTaskIncrementTick+0x174>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	4a0f      	ldr	r2, [pc, #60]	; (800671c <xTaskIncrementTick+0x174>)
 80066e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066e2:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <xTaskIncrementTick+0x178>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80066ea:	2301      	movs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80066ee:	697b      	ldr	r3, [r7, #20]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000f60 	.word	0x20000f60
 80066fc:	20000f3c 	.word	0x20000f3c
 8006700:	20000ef0 	.word	0x20000ef0
 8006704:	20000ef4 	.word	0x20000ef4
 8006708:	20000f50 	.word	0x20000f50
 800670c:	20000f58 	.word	0x20000f58
 8006710:	20000f40 	.word	0x20000f40
 8006714:	20000a68 	.word	0x20000a68
 8006718:	20000a64 	.word	0x20000a64
 800671c:	20000f48 	.word	0x20000f48
 8006720:	20000f4c 	.word	0x20000f4c

08006724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800672a:	4b2a      	ldr	r3, [pc, #168]	; (80067d4 <vTaskSwitchContext+0xb0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006732:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <vTaskSwitchContext+0xb4>)
 8006734:	2201      	movs	r2, #1
 8006736:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006738:	e046      	b.n	80067c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800673a:	4b27      	ldr	r3, [pc, #156]	; (80067d8 <vTaskSwitchContext+0xb4>)
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006740:	4b26      	ldr	r3, [pc, #152]	; (80067dc <vTaskSwitchContext+0xb8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	e010      	b.n	800676a <vTaskSwitchContext+0x46>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <vTaskSwitchContext+0x40>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
}
 8006760:	bf00      	nop
 8006762:	e7fe      	b.n	8006762 <vTaskSwitchContext+0x3e>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3b01      	subs	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	491d      	ldr	r1, [pc, #116]	; (80067e0 <vTaskSwitchContext+0xbc>)
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0e4      	beq.n	8006748 <vTaskSwitchContext+0x24>
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <vTaskSwitchContext+0xbc>)
 800678a:	4413      	add	r3, r2
 800678c:	60bb      	str	r3, [r7, #8]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	605a      	str	r2, [r3, #4]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	3308      	adds	r3, #8
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d104      	bne.n	80067ae <vTaskSwitchContext+0x8a>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4a0b      	ldr	r2, [pc, #44]	; (80067e4 <vTaskSwitchContext+0xc0>)
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	4a08      	ldr	r2, [pc, #32]	; (80067dc <vTaskSwitchContext+0xb8>)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <vTaskSwitchContext+0xc0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3354      	adds	r3, #84	; 0x54
 80067c4:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <vTaskSwitchContext+0xc4>)
 80067c6:	6013      	str	r3, [r2, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	20000f60 	.word	0x20000f60
 80067d8:	20000f4c 	.word	0x20000f4c
 80067dc:	20000f40 	.word	0x20000f40
 80067e0:	20000a68 	.word	0x20000a68
 80067e4:	20000a64 	.word	0x20000a64
 80067e8:	20000010 	.word	0x20000010

080067ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006812:	4b07      	ldr	r3, [pc, #28]	; (8006830 <vTaskPlaceOnEventList+0x44>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3318      	adds	r3, #24
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fe fe6b 	bl	80054f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006820:	2101      	movs	r1, #1
 8006822:	6838      	ldr	r0, [r7, #0]
 8006824:	f000 fbb8 	bl	8006f98 <prvAddCurrentTaskToDelayedList>
}
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20000a64 	.word	0x20000a64

08006834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10a      	bne.n	800685c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	617b      	str	r3, [r7, #20]
}
 8006858:	bf00      	nop
 800685a:	e7fe      	b.n	800685a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800685c:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <vTaskPlaceOnEventListRestricted+0x54>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3318      	adds	r3, #24
 8006862:	4619      	mov	r1, r3
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7fe fe22 	bl	80054ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f000 fb8d 	bl	8006f98 <prvAddCurrentTaskToDelayedList>
	}
 800687e:	bf00      	nop
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000a64 	.word	0x20000a64

0800688c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60fb      	str	r3, [r7, #12]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	3318      	adds	r3, #24
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe fe53 	bl	8005568 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c2:	4b1e      	ldr	r3, [pc, #120]	; (800693c <xTaskRemoveFromEventList+0xb0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d11d      	bne.n	8006906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3304      	adds	r3, #4
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe fe4a 	bl	8005568 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	4b19      	ldr	r3, [pc, #100]	; (8006940 <xTaskRemoveFromEventList+0xb4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d903      	bls.n	80068e8 <xTaskRemoveFromEventList+0x5c>
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a16      	ldr	r2, [pc, #88]	; (8006940 <xTaskRemoveFromEventList+0xb4>)
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4a13      	ldr	r2, [pc, #76]	; (8006944 <xTaskRemoveFromEventList+0xb8>)
 80068f6:	441a      	add	r2, r3
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f7fe fdd5 	bl	80054ae <vListInsertEnd>
 8006904:	e005      	b.n	8006912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3318      	adds	r3, #24
 800690a:	4619      	mov	r1, r3
 800690c:	480e      	ldr	r0, [pc, #56]	; (8006948 <xTaskRemoveFromEventList+0xbc>)
 800690e:	f7fe fdce 	bl	80054ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <xTaskRemoveFromEventList+0xc0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	429a      	cmp	r2, r3
 800691e:	d905      	bls.n	800692c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <xTaskRemoveFromEventList+0xc4>)
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e001      	b.n	8006930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006930:	697b      	ldr	r3, [r7, #20]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000f60 	.word	0x20000f60
 8006940:	20000f40 	.word	0x20000f40
 8006944:	20000a68 	.word	0x20000a68
 8006948:	20000ef8 	.word	0x20000ef8
 800694c:	20000a64 	.word	0x20000a64
 8006950:	20000f4c 	.word	0x20000f4c

08006954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <vTaskInternalSetTimeOutState+0x24>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <vTaskInternalSetTimeOutState+0x28>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	605a      	str	r2, [r3, #4]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	20000f50 	.word	0x20000f50
 800697c:	20000f3c 	.word	0x20000f3c

08006980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	613b      	str	r3, [r7, #16]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60fb      	str	r3, [r7, #12]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069c2:	f000 ff7f 	bl	80078c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069c6:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <xTaskCheckForTimeOut+0xbc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069de:	d102      	bne.n	80069e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	e023      	b.n	8006a2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <xTaskCheckForTimeOut+0xc0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d007      	beq.n	8006a02 <xTaskCheckForTimeOut+0x82>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d302      	bcc.n	8006a02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069fc:	2301      	movs	r3, #1
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e015      	b.n	8006a2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d20b      	bcs.n	8006a24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff ff9b 	bl	8006954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	e004      	b.n	8006a2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a2e:	f000 ff79 	bl	8007924 <vPortExitCritical>

	return xReturn;
 8006a32:	69fb      	ldr	r3, [r7, #28]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000f3c 	.word	0x20000f3c
 8006a40:	20000f50 	.word	0x20000f50

08006a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a48:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <vTaskMissedYield+0x14>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	20000f4c 	.word	0x20000f4c

08006a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a64:	f000 f852 	bl	8006b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <prvIdleTask+0x28>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d9f9      	bls.n	8006a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <prvIdleTask+0x2c>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a80:	e7f0      	b.n	8006a64 <prvIdleTask+0x8>
 8006a82:	bf00      	nop
 8006a84:	20000a68 	.word	0x20000a68
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	e00c      	b.n	8006ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4a12      	ldr	r2, [pc, #72]	; (8006aec <prvInitialiseTaskLists+0x60>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fcd4 	bl	8005454 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b37      	cmp	r3, #55	; 0x37
 8006ab6:	d9ef      	bls.n	8006a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ab8:	480d      	ldr	r0, [pc, #52]	; (8006af0 <prvInitialiseTaskLists+0x64>)
 8006aba:	f7fe fccb 	bl	8005454 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006abe:	480d      	ldr	r0, [pc, #52]	; (8006af4 <prvInitialiseTaskLists+0x68>)
 8006ac0:	f7fe fcc8 	bl	8005454 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ac4:	480c      	ldr	r0, [pc, #48]	; (8006af8 <prvInitialiseTaskLists+0x6c>)
 8006ac6:	f7fe fcc5 	bl	8005454 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aca:	480c      	ldr	r0, [pc, #48]	; (8006afc <prvInitialiseTaskLists+0x70>)
 8006acc:	f7fe fcc2 	bl	8005454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ad0:	480b      	ldr	r0, [pc, #44]	; (8006b00 <prvInitialiseTaskLists+0x74>)
 8006ad2:	f7fe fcbf 	bl	8005454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <prvInitialiseTaskLists+0x78>)
 8006ad8:	4a05      	ldr	r2, [pc, #20]	; (8006af0 <prvInitialiseTaskLists+0x64>)
 8006ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <prvInitialiseTaskLists+0x7c>)
 8006ade:	4a05      	ldr	r2, [pc, #20]	; (8006af4 <prvInitialiseTaskLists+0x68>)
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000a68 	.word	0x20000a68
 8006af0:	20000ec8 	.word	0x20000ec8
 8006af4:	20000edc 	.word	0x20000edc
 8006af8:	20000ef8 	.word	0x20000ef8
 8006afc:	20000f0c 	.word	0x20000f0c
 8006b00:	20000f24 	.word	0x20000f24
 8006b04:	20000ef0 	.word	0x20000ef0
 8006b08:	20000ef4 	.word	0x20000ef4

08006b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b12:	e019      	b.n	8006b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b14:	f000 fed6 	bl	80078c4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b18:	4b10      	ldr	r3, [pc, #64]	; (8006b5c <prvCheckTasksWaitingTermination+0x50>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fd1f 	bl	8005568 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <prvCheckTasksWaitingTermination+0x54>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	4a0b      	ldr	r2, [pc, #44]	; (8006b60 <prvCheckTasksWaitingTermination+0x54>)
 8006b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <prvCheckTasksWaitingTermination+0x58>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	4a0a      	ldr	r2, [pc, #40]	; (8006b64 <prvCheckTasksWaitingTermination+0x58>)
 8006b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b3e:	f000 fef1 	bl	8007924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f810 	bl	8006b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <prvCheckTasksWaitingTermination+0x58>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e1      	bne.n	8006b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000f0c 	.word	0x20000f0c
 8006b60:	20000f38 	.word	0x20000f38
 8006b64:	20000f20 	.word	0x20000f20

08006b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3354      	adds	r3, #84	; 0x54
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 f9eb 	bl	8007f50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d108      	bne.n	8006b96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 f881 	bl	8007c90 <vPortFree>
				vPortFree( pxTCB );
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 f87e 	bl	8007c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b94:	e018      	b.n	8006bc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d103      	bne.n	8006ba8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f875 	bl	8007c90 <vPortFree>
	}
 8006ba6:	e00f      	b.n	8006bc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d00a      	beq.n	8006bc8 <prvDeleteTCB+0x60>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60fb      	str	r3, [r7, #12]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <prvDeleteTCB+0x5e>
	}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <prvResetNextTaskUnblockTime+0x44>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <prvResetNextTaskUnblockTime+0x14>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <prvResetNextTaskUnblockTime+0x16>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bea:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <prvResetNextTaskUnblockTime+0x48>)
 8006bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bf0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bf2:	e008      	b.n	8006c06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bf4:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <prvResetNextTaskUnblockTime+0x44>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4a05      	ldr	r2, [pc, #20]	; (8006c18 <prvResetNextTaskUnblockTime+0x48>)
 8006c04:	6013      	str	r3, [r2, #0]
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000ef0 	.word	0x20000ef0
 8006c18:	20000f58 	.word	0x20000f58

08006c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c22:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <xTaskGetSchedulerState+0x34>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d102      	bne.n	8006c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	e008      	b.n	8006c42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <xTaskGetSchedulerState+0x38>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	e001      	b.n	8006c42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c42:	687b      	ldr	r3, [r7, #4]
	}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20000f44 	.word	0x20000f44
 8006c54:	20000f60 	.word	0x20000f60

08006c58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d056      	beq.n	8006d1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c6e:	4b2e      	ldr	r3, [pc, #184]	; (8006d28 <xTaskPriorityDisinherit+0xd0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d00a      	beq.n	8006c8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	60fb      	str	r3, [r7, #12]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60bb      	str	r3, [r7, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb0:	1e5a      	subs	r2, r3, #1
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d02c      	beq.n	8006d1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d128      	bne.n	8006d1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fc4a 	bl	8005568 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <xTaskPriorityDisinherit+0xd4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d903      	bls.n	8006cfc <xTaskPriorityDisinherit+0xa4>
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	4a0c      	ldr	r2, [pc, #48]	; (8006d2c <xTaskPriorityDisinherit+0xd4>)
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <xTaskPriorityDisinherit+0xd8>)
 8006d0a:	441a      	add	r2, r3
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4619      	mov	r1, r3
 8006d12:	4610      	mov	r0, r2
 8006d14:	f7fe fbcb 	bl	80054ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d1c:	697b      	ldr	r3, [r7, #20]
	}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000a64 	.word	0x20000a64
 8006d2c:	20000f40 	.word	0x20000f40
 8006d30:	20000a68 	.word	0x20000a68

08006d34 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006d42:	f000 fdbf 	bl	80078c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006d46:	4b29      	ldr	r3, [pc, #164]	; (8006dec <xTaskNotifyWait+0xb8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d01c      	beq.n	8006d8e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006d54:	4b25      	ldr	r3, [pc, #148]	; (8006dec <xTaskNotifyWait+0xb8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	43d2      	mvns	r2, r2
 8006d60:	400a      	ands	r2, r1
 8006d62:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <xTaskNotifyWait+0xb8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00b      	beq.n	8006d8e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d76:	2101      	movs	r1, #1
 8006d78:	6838      	ldr	r0, [r7, #0]
 8006d7a:	f000 f90d 	bl	8006f98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006d7e:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <xTaskNotifyWait+0xbc>)
 8006d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006d8e:	f000 fdc9 	bl	8007924 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006d92:	f000 fd97 	bl	80078c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006d9c:	4b13      	ldr	r3, [pc, #76]	; (8006dec <xTaskNotifyWait+0xb8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006da8:	4b10      	ldr	r3, [pc, #64]	; (8006dec <xTaskNotifyWait+0xb8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d002      	beq.n	8006dbc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	e00a      	b.n	8006dd2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <xTaskNotifyWait+0xb8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	43d2      	mvns	r2, r2
 8006dc8:	400a      	ands	r2, r1
 8006dca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <xTaskNotifyWait+0xb8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8006ddc:	f000 fda2 	bl	8007924 <vPortExitCritical>

		return xReturn;
 8006de0:	697b      	ldr	r3, [r7, #20]
	}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000a64 	.word	0x20000a64
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08e      	sub	sp, #56	; 0x38
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006e04:	2301      	movs	r3, #1
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e24:	f000 fe30 	bl	8007a88 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006e2c:	f3ef 8211 	mrs	r2, BASEPRI
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	623a      	str	r2, [r7, #32]
 8006e42:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006e44:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d82f      	bhi.n	8006ed0 <xTaskGenericNotifyFromISR+0xdc>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <xTaskGenericNotifyFromISR+0x84>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006ed1 	.word	0x08006ed1
 8006e7c:	08006e8d 	.word	0x08006e8d
 8006e80:	08006e9f 	.word	0x08006e9f
 8006e84:	08006eaf 	.word	0x08006eaf
 8006e88:	08006eb9 	.word	0x08006eb9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	431a      	orrs	r2, r3
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006e9c:	e018      	b.n	8006ed0 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006eac:	e010      	b.n	8006ed0 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006eb6:	e00b      	b.n	8006ed0 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d004      	beq.n	8006eca <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006ec8:	e001      	b.n	8006ece <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006ece:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d147      	bne.n	8006f68 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	61bb      	str	r3, [r7, #24]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ef6:	4b22      	ldr	r3, [pc, #136]	; (8006f80 <xTaskGenericNotifyFromISR+0x18c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d11d      	bne.n	8006f3a <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	3304      	adds	r3, #4
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fb30 	bl	8005568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <xTaskGenericNotifyFromISR+0x190>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d903      	bls.n	8006f1c <xTaskGenericNotifyFromISR+0x128>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4a1a      	ldr	r2, [pc, #104]	; (8006f84 <xTaskGenericNotifyFromISR+0x190>)
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <xTaskGenericNotifyFromISR+0x194>)
 8006f2a:	441a      	add	r2, r3
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fe fabb 	bl	80054ae <vListInsertEnd>
 8006f38:	e005      	b.n	8006f46 <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4812      	ldr	r0, [pc, #72]	; (8006f8c <xTaskGenericNotifyFromISR+0x198>)
 8006f42:	f7fe fab4 	bl	80054ae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <xTaskGenericNotifyFromISR+0x19c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d909      	bls.n	8006f68 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e002      	b.n	8006f68 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006f62:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <xTaskGenericNotifyFromISR+0x1a0>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f383 8811 	msr	BASEPRI, r3
}
 8006f72:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3738      	adds	r7, #56	; 0x38
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000f60 	.word	0x20000f60
 8006f84:	20000f40 	.word	0x20000f40
 8006f88:	20000a68 	.word	0x20000a68
 8006f8c:	20000ef8 	.word	0x20000ef8
 8006f90:	20000a64 	.word	0x20000a64
 8006f94:	20000f4c 	.word	0x20000f4c

08006f98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fa2:	4b21      	ldr	r3, [pc, #132]	; (8007028 <prvAddCurrentTaskToDelayedList+0x90>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa8:	4b20      	ldr	r3, [pc, #128]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fada 	bl	8005568 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fba:	d10a      	bne.n	8006fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d007      	beq.n	8006fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc2:	4b1a      	ldr	r3, [pc, #104]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4819      	ldr	r0, [pc, #100]	; (8007030 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fcc:	f7fe fa6f 	bl	80054ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fd0:	e026      	b.n	8007020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fda:	4b14      	ldr	r3, [pc, #80]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d209      	bcs.n	8006ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fe fa7d 	bl	80054f6 <vListInsert>
}
 8006ffc:	e010      	b.n	8007020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b0a      	ldr	r3, [pc, #40]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3304      	adds	r3, #4
 8007008:	4619      	mov	r1, r3
 800700a:	4610      	mov	r0, r2
 800700c:	f7fe fa73 	bl	80054f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007010:	4b0a      	ldr	r3, [pc, #40]	; (800703c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	429a      	cmp	r2, r3
 8007018:	d202      	bcs.n	8007020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800701a:	4a08      	ldr	r2, [pc, #32]	; (800703c <prvAddCurrentTaskToDelayedList+0xa4>)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6013      	str	r3, [r2, #0]
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000f3c 	.word	0x20000f3c
 800702c:	20000a64 	.word	0x20000a64
 8007030:	20000f24 	.word	0x20000f24
 8007034:	20000ef4 	.word	0x20000ef4
 8007038:	20000ef0 	.word	0x20000ef0
 800703c:	20000f58 	.word	0x20000f58

08007040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800704a:	f000 facb 	bl	80075e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800704e:	4b1c      	ldr	r3, [pc, #112]	; (80070c0 <xTimerCreateTimerTask+0x80>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d021      	beq.n	800709a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800705e:	1d3a      	adds	r2, r7, #4
 8007060:	f107 0108 	add.w	r1, r7, #8
 8007064:	f107 030c 	add.w	r3, r7, #12
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe f9d9 	bl	8005420 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	9202      	str	r2, [sp, #8]
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	2302      	movs	r3, #2
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	2300      	movs	r3, #0
 800707e:	460a      	mov	r2, r1
 8007080:	4910      	ldr	r1, [pc, #64]	; (80070c4 <xTimerCreateTimerTask+0x84>)
 8007082:	4811      	ldr	r0, [pc, #68]	; (80070c8 <xTimerCreateTimerTask+0x88>)
 8007084:	f7fe ff80 	bl	8005f88 <xTaskCreateStatic>
 8007088:	4603      	mov	r3, r0
 800708a:	4a10      	ldr	r2, [pc, #64]	; (80070cc <xTimerCreateTimerTask+0x8c>)
 800708c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <xTimerCreateTimerTask+0x8c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007096:	2301      	movs	r3, #1
 8007098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	613b      	str	r3, [r7, #16]
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070b6:	697b      	ldr	r3, [r7, #20]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000f94 	.word	0x20000f94
 80070c4:	080080ec 	.word	0x080080ec
 80070c8:	080071ed 	.word	0x080071ed
 80070cc:	20000f98 	.word	0x20000f98

080070d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070de:	2300      	movs	r3, #0
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	623b      	str	r3, [r7, #32]
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070fe:	4b1a      	ldr	r3, [pc, #104]	; (8007168 <xTimerGenericCommand+0x98>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d02a      	beq.n	800715c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b05      	cmp	r3, #5
 8007116:	dc18      	bgt.n	800714a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007118:	f7ff fd80 	bl	8006c1c <xTaskGetSchedulerState>
 800711c:	4603      	mov	r3, r0
 800711e:	2b02      	cmp	r3, #2
 8007120:	d109      	bne.n	8007136 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007122:	4b11      	ldr	r3, [pc, #68]	; (8007168 <xTimerGenericCommand+0x98>)
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	f107 0110 	add.w	r1, r7, #16
 800712a:	2300      	movs	r3, #0
 800712c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712e:	f7fe fb47 	bl	80057c0 <xQueueGenericSend>
 8007132:	6278      	str	r0, [r7, #36]	; 0x24
 8007134:	e012      	b.n	800715c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007136:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <xTimerGenericCommand+0x98>)
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	f107 0110 	add.w	r1, r7, #16
 800713e:	2300      	movs	r3, #0
 8007140:	2200      	movs	r2, #0
 8007142:	f7fe fb3d 	bl	80057c0 <xQueueGenericSend>
 8007146:	6278      	str	r0, [r7, #36]	; 0x24
 8007148:	e008      	b.n	800715c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <xTimerGenericCommand+0x98>)
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	f107 0110 	add.w	r1, r7, #16
 8007152:	2300      	movs	r3, #0
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	f7fe fc31 	bl	80059bc <xQueueGenericSendFromISR>
 800715a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800715e:	4618      	mov	r0, r3
 8007160:	3728      	adds	r7, #40	; 0x28
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000f94 	.word	0x20000f94

0800716c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af02      	add	r7, sp, #8
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <prvProcessExpiredTimer+0x7c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe f9ef 	bl	8005568 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d122      	bne.n	80071d8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	18d1      	adds	r1, r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	6978      	ldr	r0, [r7, #20]
 80071a0:	f000 f8c8 	bl	8007334 <prvInsertTimerInActiveList>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d016      	beq.n	80071d8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071aa:	2300      	movs	r3, #0
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	2300      	movs	r3, #0
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	2100      	movs	r1, #0
 80071b4:	6978      	ldr	r0, [r7, #20]
 80071b6:	f7ff ff8b 	bl	80070d0 <xTimerGenericCommand>
 80071ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	60fb      	str	r3, [r7, #12]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	6978      	ldr	r0, [r7, #20]
 80071de:	4798      	blx	r3
}
 80071e0:	bf00      	nop
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000f8c 	.word	0x20000f8c

080071ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 f857 	bl	80072ac <prvGetNextExpireTime>
 80071fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4619      	mov	r1, r3
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f803 	bl	8007210 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800720a:	f000 f8d5 	bl	80073b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800720e:	e7f1      	b.n	80071f4 <prvTimerTask+0x8>

08007210 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800721a:	f7ff f909 	bl	8006430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800721e:	f107 0308 	add.w	r3, r7, #8
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f866 	bl	80072f4 <prvSampleTimeNow>
 8007228:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d130      	bne.n	8007292 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <prvProcessTimerOrBlockTask+0x3c>
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	429a      	cmp	r2, r3
 800723c:	d806      	bhi.n	800724c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800723e:	f7ff f905 	bl	800644c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007242:	68f9      	ldr	r1, [r7, #12]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff91 	bl	800716c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800724a:	e024      	b.n	8007296 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d008      	beq.n	8007264 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007252:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <prvProcessTimerOrBlockTask+0x90>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	bf0c      	ite	eq
 800725c:	2301      	moveq	r3, #1
 800725e:	2300      	movne	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007264:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <prvProcessTimerOrBlockTask+0x94>)
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4619      	mov	r1, r3
 8007272:	f7fe fe55 	bl	8005f20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007276:	f7ff f8e9 	bl	800644c <xTaskResumeAll>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <prvProcessTimerOrBlockTask+0x98>)
 8007282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
}
 8007290:	e001      	b.n	8007296 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007292:	f7ff f8db 	bl	800644c <xTaskResumeAll>
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000f90 	.word	0x20000f90
 80072a4:	20000f94 	.word	0x20000f94
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072b4:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <prvGetNextExpireTime+0x44>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf0c      	ite	eq
 80072be:	2301      	moveq	r3, #1
 80072c0:	2300      	movne	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072d2:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <prvGetNextExpireTime+0x44>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e001      	b.n	80072e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072e2:	68fb      	ldr	r3, [r7, #12]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	20000f8c 	.word	0x20000f8c

080072f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072fc:	f7ff f944 	bl	8006588 <xTaskGetTickCount>
 8007300:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <prvSampleTimeNow+0x3c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	429a      	cmp	r2, r3
 800730a:	d205      	bcs.n	8007318 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800730c:	f000 f908 	bl	8007520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	e002      	b.n	800731e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800731e:	4a04      	ldr	r2, [pc, #16]	; (8007330 <prvSampleTimeNow+0x3c>)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007324:	68fb      	ldr	r3, [r7, #12]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000f9c 	.word	0x20000f9c

08007334 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	429a      	cmp	r2, r3
 8007358:	d812      	bhi.n	8007380 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	1ad2      	subs	r2, r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	429a      	cmp	r2, r3
 8007366:	d302      	bcc.n	800736e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e01b      	b.n	80073a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800736e:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <prvInsertTimerInActiveList+0x7c>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3304      	adds	r3, #4
 8007376:	4619      	mov	r1, r3
 8007378:	4610      	mov	r0, r2
 800737a:	f7fe f8bc 	bl	80054f6 <vListInsert>
 800737e:	e012      	b.n	80073a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d206      	bcs.n	8007396 <prvInsertTimerInActiveList+0x62>
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d302      	bcc.n	8007396 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	e007      	b.n	80073a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007396:	4b07      	ldr	r3, [pc, #28]	; (80073b4 <prvInsertTimerInActiveList+0x80>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fe f8a8 	bl	80054f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073a6:	697b      	ldr	r3, [r7, #20]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20000f90 	.word	0x20000f90
 80073b4:	20000f8c 	.word	0x20000f8c

080073b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08e      	sub	sp, #56	; 0x38
 80073bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073be:	e09d      	b.n	80074fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da18      	bge.n	80073f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073c6:	1d3b      	adds	r3, r7, #4
 80073c8:	3304      	adds	r3, #4
 80073ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	61fb      	str	r3, [r7, #28]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ee:	6850      	ldr	r0, [r2, #4]
 80073f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f2:	6892      	ldr	r2, [r2, #8]
 80073f4:	4611      	mov	r1, r2
 80073f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	db7d      	blt.n	80074fa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe f8aa 	bl	8005568 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007414:	463b      	mov	r3, r7
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff ff6c 	bl	80072f4 <prvSampleTimeNow>
 800741c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b09      	cmp	r3, #9
 8007422:	d86b      	bhi.n	80074fc <prvProcessReceivedCommands+0x144>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <prvProcessReceivedCommands+0x74>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007455 	.word	0x08007455
 8007430:	08007455 	.word	0x08007455
 8007434:	08007455 	.word	0x08007455
 8007438:	080074fd 	.word	0x080074fd
 800743c:	080074b1 	.word	0x080074b1
 8007440:	080074e9 	.word	0x080074e9
 8007444:	08007455 	.word	0x08007455
 8007448:	08007455 	.word	0x08007455
 800744c:	080074fd 	.word	0x080074fd
 8007450:	080074b1 	.word	0x080074b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	18d1      	adds	r1, r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007462:	f7ff ff67 	bl	8007334 <prvInsertTimerInActiveList>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d047      	beq.n	80074fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007472:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d13f      	bne.n	80074fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	441a      	add	r2, r3
 8007484:	2300      	movs	r3, #0
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	2300      	movs	r3, #0
 800748a:	2100      	movs	r1, #0
 800748c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748e:	f7ff fe1f 	bl	80070d0 <xTimerGenericCommand>
 8007492:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d130      	bne.n	80074fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	61bb      	str	r3, [r7, #24]
}
 80074ac:	bf00      	nop
 80074ae:	e7fe      	b.n	80074ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	617b      	str	r3, [r7, #20]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	699a      	ldr	r2, [r3, #24]
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	18d1      	adds	r1, r2, r3
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e2:	f7ff ff27 	bl	8007334 <prvInsertTimerInActiveList>
					break;
 80074e6:	e009      	b.n	80074fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80074f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f4:	f000 fbcc 	bl	8007c90 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074f8:	e000      	b.n	80074fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80074fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074fc:	4b07      	ldr	r3, [pc, #28]	; (800751c <prvProcessReceivedCommands+0x164>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	1d39      	adds	r1, r7, #4
 8007502:	2200      	movs	r2, #0
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe faf1 	bl	8005aec <xQueueReceive>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	f47f af57 	bne.w	80073c0 <prvProcessReceivedCommands+0x8>
	}
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	3730      	adds	r7, #48	; 0x30
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20000f94 	.word	0x20000f94

08007520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007526:	e045      	b.n	80075b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007528:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <prvSwitchTimerLists+0xbc>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007532:	4b2a      	ldr	r3, [pc, #168]	; (80075dc <prvSwitchTimerLists+0xbc>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3304      	adds	r3, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe f811 	bl	8005568 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d12e      	bne.n	80075b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4413      	add	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	429a      	cmp	r2, r3
 8007566:	d90e      	bls.n	8007586 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <prvSwitchTimerLists+0xbc>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f7fd ffb9 	bl	80054f6 <vListInsert>
 8007584:	e016      	b.n	80075b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007586:	2300      	movs	r3, #0
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fd9d 	bl	80070d0 <xTimerGenericCommand>
 8007596:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	603b      	str	r3, [r7, #0]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075b4:	4b09      	ldr	r3, [pc, #36]	; (80075dc <prvSwitchTimerLists+0xbc>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1b4      	bne.n	8007528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075be:	4b07      	ldr	r3, [pc, #28]	; (80075dc <prvSwitchTimerLists+0xbc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075c4:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <prvSwitchTimerLists+0xc0>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a04      	ldr	r2, [pc, #16]	; (80075dc <prvSwitchTimerLists+0xbc>)
 80075ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075cc:	4a04      	ldr	r2, [pc, #16]	; (80075e0 <prvSwitchTimerLists+0xc0>)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	6013      	str	r3, [r2, #0]
}
 80075d2:	bf00      	nop
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000f8c 	.word	0x20000f8c
 80075e0:	20000f90 	.word	0x20000f90

080075e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075ea:	f000 f96b 	bl	80078c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075ee:	4b15      	ldr	r3, [pc, #84]	; (8007644 <prvCheckForValidListAndQueue+0x60>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d120      	bne.n	8007638 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075f6:	4814      	ldr	r0, [pc, #80]	; (8007648 <prvCheckForValidListAndQueue+0x64>)
 80075f8:	f7fd ff2c 	bl	8005454 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075fc:	4813      	ldr	r0, [pc, #76]	; (800764c <prvCheckForValidListAndQueue+0x68>)
 80075fe:	f7fd ff29 	bl	8005454 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <prvCheckForValidListAndQueue+0x6c>)
 8007604:	4a10      	ldr	r2, [pc, #64]	; (8007648 <prvCheckForValidListAndQueue+0x64>)
 8007606:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007608:	4b12      	ldr	r3, [pc, #72]	; (8007654 <prvCheckForValidListAndQueue+0x70>)
 800760a:	4a10      	ldr	r2, [pc, #64]	; (800764c <prvCheckForValidListAndQueue+0x68>)
 800760c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800760e:	2300      	movs	r3, #0
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	4b11      	ldr	r3, [pc, #68]	; (8007658 <prvCheckForValidListAndQueue+0x74>)
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <prvCheckForValidListAndQueue+0x78>)
 8007616:	2110      	movs	r1, #16
 8007618:	200a      	movs	r0, #10
 800761a:	f7fe f837 	bl	800568c <xQueueGenericCreateStatic>
 800761e:	4603      	mov	r3, r0
 8007620:	4a08      	ldr	r2, [pc, #32]	; (8007644 <prvCheckForValidListAndQueue+0x60>)
 8007622:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <prvCheckForValidListAndQueue+0x60>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <prvCheckForValidListAndQueue+0x60>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	490b      	ldr	r1, [pc, #44]	; (8007660 <prvCheckForValidListAndQueue+0x7c>)
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fc4a 	bl	8005ecc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007638:	f000 f974 	bl	8007924 <vPortExitCritical>
}
 800763c:	bf00      	nop
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000f94 	.word	0x20000f94
 8007648:	20000f64 	.word	0x20000f64
 800764c:	20000f78 	.word	0x20000f78
 8007650:	20000f8c 	.word	0x20000f8c
 8007654:	20000f90 	.word	0x20000f90
 8007658:	20001040 	.word	0x20001040
 800765c:	20000fa0 	.word	0x20000fa0
 8007660:	080080f4 	.word	0x080080f4

08007664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3b04      	subs	r3, #4
 8007674:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800767c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3b04      	subs	r3, #4
 8007682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f023 0201 	bic.w	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3b04      	subs	r3, #4
 8007692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007694:	4a0c      	ldr	r2, [pc, #48]	; (80076c8 <pxPortInitialiseStack+0x64>)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3b14      	subs	r3, #20
 800769e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3b04      	subs	r3, #4
 80076aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f06f 0202 	mvn.w	r2, #2
 80076b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3b20      	subs	r3, #32
 80076b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	080076cd 	.word	0x080076cd

080076cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076d6:	4b12      	ldr	r3, [pc, #72]	; (8007720 <prvTaskExitError+0x54>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076de:	d00a      	beq.n	80076f6 <prvTaskExitError+0x2a>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	60fb      	str	r3, [r7, #12]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <prvTaskExitError+0x28>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60bb      	str	r3, [r7, #8]
}
 8007708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800770a:	bf00      	nop
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0fc      	beq.n	800770c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007712:	bf00      	nop
 8007714:	bf00      	nop
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	2000000c 	.word	0x2000000c
	...

08007730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <pxCurrentTCBConst2>)
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	6808      	ldr	r0, [r1, #0]
 8007736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773a:	f380 8809 	msr	PSP, r0
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f04f 0000 	mov.w	r0, #0
 8007746:	f380 8811 	msr	BASEPRI, r0
 800774a:	4770      	bx	lr
 800774c:	f3af 8000 	nop.w

08007750 <pxCurrentTCBConst2>:
 8007750:	20000a64 	.word	0x20000a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop

08007758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007758:	4808      	ldr	r0, [pc, #32]	; (800777c <prvPortStartFirstTask+0x24>)
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	6800      	ldr	r0, [r0, #0]
 800775e:	f380 8808 	msr	MSP, r0
 8007762:	f04f 0000 	mov.w	r0, #0
 8007766:	f380 8814 	msr	CONTROL, r0
 800776a:	b662      	cpsie	i
 800776c:	b661      	cpsie	f
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	df00      	svc	0
 8007778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800777a:	bf00      	nop
 800777c:	e000ed08 	.word	0xe000ed08

08007780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007786:	4b46      	ldr	r3, [pc, #280]	; (80078a0 <xPortStartScheduler+0x120>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a46      	ldr	r2, [pc, #280]	; (80078a4 <xPortStartScheduler+0x124>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10a      	bne.n	80077a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	613b      	str	r3, [r7, #16]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077a6:	4b3e      	ldr	r3, [pc, #248]	; (80078a0 <xPortStartScheduler+0x120>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a3f      	ldr	r2, [pc, #252]	; (80078a8 <xPortStartScheduler+0x128>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d10a      	bne.n	80077c6 <xPortStartScheduler+0x46>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <xPortStartScheduler+0x12c>)
 80077c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	22ff      	movs	r2, #255	; 0xff
 80077d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	4b31      	ldr	r3, [pc, #196]	; (80078b0 <xPortStartScheduler+0x130>)
 80077ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077ee:	4b31      	ldr	r3, [pc, #196]	; (80078b4 <xPortStartScheduler+0x134>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077f4:	e009      	b.n	800780a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077f6:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <xPortStartScheduler+0x134>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	4a2d      	ldr	r2, [pc, #180]	; (80078b4 <xPortStartScheduler+0x134>)
 80077fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007812:	2b80      	cmp	r3, #128	; 0x80
 8007814:	d0ef      	beq.n	80077f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007816:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <xPortStartScheduler+0x134>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1c3 0307 	rsb	r3, r3, #7
 800781e:	2b04      	cmp	r3, #4
 8007820:	d00a      	beq.n	8007838 <xPortStartScheduler+0xb8>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	60bb      	str	r3, [r7, #8]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007838:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <xPortStartScheduler+0x134>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <xPortStartScheduler+0x134>)
 8007840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007842:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <xPortStartScheduler+0x134>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800784a:	4a1a      	ldr	r2, [pc, #104]	; (80078b4 <xPortStartScheduler+0x134>)
 800784c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	b2da      	uxtb	r2, r3
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007856:	4b18      	ldr	r3, [pc, #96]	; (80078b8 <xPortStartScheduler+0x138>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a17      	ldr	r2, [pc, #92]	; (80078b8 <xPortStartScheduler+0x138>)
 800785c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <xPortStartScheduler+0x138>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a14      	ldr	r2, [pc, #80]	; (80078b8 <xPortStartScheduler+0x138>)
 8007868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800786c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800786e:	f000 f8dd 	bl	8007a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007872:	4b12      	ldr	r3, [pc, #72]	; (80078bc <xPortStartScheduler+0x13c>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007878:	f000 f8fc 	bl	8007a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800787c:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <xPortStartScheduler+0x140>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a0f      	ldr	r2, [pc, #60]	; (80078c0 <xPortStartScheduler+0x140>)
 8007882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007888:	f7ff ff66 	bl	8007758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800788c:	f7fe ff4a 	bl	8006724 <vTaskSwitchContext>
	prvTaskExitError();
 8007890:	f7ff ff1c 	bl	80076cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	e000ed00 	.word	0xe000ed00
 80078a4:	410fc271 	.word	0x410fc271
 80078a8:	410fc270 	.word	0x410fc270
 80078ac:	e000e400 	.word	0xe000e400
 80078b0:	20001090 	.word	0x20001090
 80078b4:	20001094 	.word	0x20001094
 80078b8:	e000ed20 	.word	0xe000ed20
 80078bc:	2000000c 	.word	0x2000000c
 80078c0:	e000ef34 	.word	0xe000ef34

080078c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	607b      	str	r3, [r7, #4]
}
 80078dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078de:	4b0f      	ldr	r3, [pc, #60]	; (800791c <vPortEnterCritical+0x58>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3301      	adds	r3, #1
 80078e4:	4a0d      	ldr	r2, [pc, #52]	; (800791c <vPortEnterCritical+0x58>)
 80078e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <vPortEnterCritical+0x58>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d10f      	bne.n	8007910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <vPortEnterCritical+0x5c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <vPortEnterCritical+0x4c>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	603b      	str	r3, [r7, #0]
}
 800790c:	bf00      	nop
 800790e:	e7fe      	b.n	800790e <vPortEnterCritical+0x4a>
	}
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	2000000c 	.word	0x2000000c
 8007920:	e000ed04 	.word	0xe000ed04

08007924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800792a:	4b12      	ldr	r3, [pc, #72]	; (8007974 <vPortExitCritical+0x50>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <vPortExitCritical+0x24>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	607b      	str	r3, [r7, #4]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <vPortExitCritical+0x50>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3b01      	subs	r3, #1
 800794e:	4a09      	ldr	r2, [pc, #36]	; (8007974 <vPortExitCritical+0x50>)
 8007950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007952:	4b08      	ldr	r3, [pc, #32]	; (8007974 <vPortExitCritical+0x50>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <vPortExitCritical+0x42>
 800795a:	2300      	movs	r3, #0
 800795c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	f383 8811 	msr	BASEPRI, r3
}
 8007964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	2000000c 	.word	0x2000000c
	...

08007980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007980:	f3ef 8009 	mrs	r0, PSP
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <pxCurrentTCBConst>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f01e 0f10 	tst.w	lr, #16
 8007990:	bf08      	it	eq
 8007992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	6010      	str	r0, [r2, #0]
 800799c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079a4:	f380 8811 	msr	BASEPRI, r0
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f7fe feb8 	bl	8006724 <vTaskSwitchContext>
 80079b4:	f04f 0000 	mov.w	r0, #0
 80079b8:	f380 8811 	msr	BASEPRI, r0
 80079bc:	bc09      	pop	{r0, r3}
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	6808      	ldr	r0, [r1, #0]
 80079c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c6:	f01e 0f10 	tst.w	lr, #16
 80079ca:	bf08      	it	eq
 80079cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079d0:	f380 8809 	msr	PSP, r0
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w

080079e0 <pxCurrentTCBConst>:
 80079e0:	20000a64 	.word	0x20000a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop

080079e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
}
 8007a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a02:	f7fe fdd1 	bl	80065a8 <xTaskIncrementTick>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <xPortSysTickHandler+0x40>)
 8007a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	f383 8811 	msr	BASEPRI, r3
}
 8007a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <vPortSetupTimerInterrupt+0x34>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <vPortSetupTimerInterrupt+0x38>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <vPortSetupTimerInterrupt+0x3c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <vPortSetupTimerInterrupt+0x40>)
 8007a42:	fba2 2303 	umull	r2, r3, r2, r3
 8007a46:	099b      	lsrs	r3, r3, #6
 8007a48:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <vPortSetupTimerInterrupt+0x44>)
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a4e:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <vPortSetupTimerInterrupt+0x34>)
 8007a50:	2207      	movs	r2, #7
 8007a52:	601a      	str	r2, [r3, #0]
}
 8007a54:	bf00      	nop
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	e000e010 	.word	0xe000e010
 8007a64:	e000e018 	.word	0xe000e018
 8007a68:	20000000 	.word	0x20000000
 8007a6c:	10624dd3 	.word	0x10624dd3
 8007a70:	e000e014 	.word	0xe000e014

08007a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a84 <vPortEnableVFP+0x10>
 8007a78:	6801      	ldr	r1, [r0, #0]
 8007a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a7e:	6001      	str	r1, [r0, #0]
 8007a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a82:	bf00      	nop
 8007a84:	e000ed88 	.word	0xe000ed88

08007a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a8e:	f3ef 8305 	mrs	r3, IPSR
 8007a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d914      	bls.n	8007ac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a9a:	4a17      	ldr	r2, [pc, #92]	; (8007af8 <vPortValidateInterruptPriority+0x70>)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007aa4:	4b15      	ldr	r3, [pc, #84]	; (8007afc <vPortValidateInterruptPriority+0x74>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	7afa      	ldrb	r2, [r7, #11]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d20a      	bcs.n	8007ac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	607b      	str	r3, [r7, #4]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <vPortValidateInterruptPriority+0x78>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007acc:	4b0d      	ldr	r3, [pc, #52]	; (8007b04 <vPortValidateInterruptPriority+0x7c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d90a      	bls.n	8007aea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	603b      	str	r3, [r7, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <vPortValidateInterruptPriority+0x60>
	}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	e000e3f0 	.word	0xe000e3f0
 8007afc:	20001090 	.word	0x20001090
 8007b00:	e000ed0c 	.word	0xe000ed0c
 8007b04:	20001094 	.word	0x20001094

08007b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b14:	f7fe fc8c 	bl	8006430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b18:	4b58      	ldr	r3, [pc, #352]	; (8007c7c <pvPortMalloc+0x174>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b20:	f000 f910 	bl	8007d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b24:	4b56      	ldr	r3, [pc, #344]	; (8007c80 <pvPortMalloc+0x178>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f040 808e 	bne.w	8007c4e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01d      	beq.n	8007b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b38:	2208      	movs	r2, #8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d014      	beq.n	8007b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f023 0307 	bic.w	r3, r3, #7
 8007b50:	3308      	adds	r3, #8
 8007b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <pvPortMalloc+0x6c>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	617b      	str	r3, [r7, #20]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d069      	beq.n	8007c4e <pvPortMalloc+0x146>
 8007b7a:	4b42      	ldr	r3, [pc, #264]	; (8007c84 <pvPortMalloc+0x17c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d864      	bhi.n	8007c4e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b84:	4b40      	ldr	r3, [pc, #256]	; (8007c88 <pvPortMalloc+0x180>)
 8007b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b88:	4b3f      	ldr	r3, [pc, #252]	; (8007c88 <pvPortMalloc+0x180>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b8e:	e004      	b.n	8007b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d903      	bls.n	8007bac <pvPortMalloc+0xa4>
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1f1      	bne.n	8007b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bac:	4b33      	ldr	r3, [pc, #204]	; (8007c7c <pvPortMalloc+0x174>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d04b      	beq.n	8007c4e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2208      	movs	r2, #8
 8007bbc:	4413      	add	r3, r2
 8007bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d91f      	bls.n	8007c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4413      	add	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <pvPortMalloc+0xf8>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	613b      	str	r3, [r7, #16]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	1ad2      	subs	r2, r2, r3
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c12:	69b8      	ldr	r0, [r7, #24]
 8007c14:	f000 f8f8 	bl	8007e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c18:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <pvPortMalloc+0x17c>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	4a18      	ldr	r2, [pc, #96]	; (8007c84 <pvPortMalloc+0x17c>)
 8007c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c26:	4b17      	ldr	r3, [pc, #92]	; (8007c84 <pvPortMalloc+0x17c>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4b18      	ldr	r3, [pc, #96]	; (8007c8c <pvPortMalloc+0x184>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d203      	bcs.n	8007c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c32:	4b14      	ldr	r3, [pc, #80]	; (8007c84 <pvPortMalloc+0x17c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a15      	ldr	r2, [pc, #84]	; (8007c8c <pvPortMalloc+0x184>)
 8007c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <pvPortMalloc+0x178>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c4e:	f7fe fbfd 	bl	800644c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <pvPortMalloc+0x16a>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60fb      	str	r3, [r7, #12]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <pvPortMalloc+0x168>
	return pvReturn;
 8007c72:	69fb      	ldr	r3, [r7, #28]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3728      	adds	r7, #40	; 0x28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	200014a0 	.word	0x200014a0
 8007c80:	200014ac 	.word	0x200014ac
 8007c84:	200014a4 	.word	0x200014a4
 8007c88:	20001498 	.word	0x20001498
 8007c8c:	200014a8 	.word	0x200014a8

08007c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d048      	beq.n	8007d34 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	425b      	negs	r3, r3
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	4b21      	ldr	r3, [pc, #132]	; (8007d3c <vPortFree+0xac>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <vPortFree+0x44>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60fb      	str	r3, [r7, #12]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <vPortFree+0x62>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	60bb      	str	r3, [r7, #8]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	4b11      	ldr	r3, [pc, #68]	; (8007d3c <vPortFree+0xac>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d019      	beq.n	8007d34 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d115      	bne.n	8007d34 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <vPortFree+0xac>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	401a      	ands	r2, r3
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d18:	f7fe fb8a 	bl	8006430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <vPortFree+0xb0>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4413      	add	r3, r2
 8007d26:	4a06      	ldr	r2, [pc, #24]	; (8007d40 <vPortFree+0xb0>)
 8007d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d2a:	6938      	ldr	r0, [r7, #16]
 8007d2c:	f000 f86c 	bl	8007e08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d30:	f7fe fb8c 	bl	800644c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d34:	bf00      	nop
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	200014ac 	.word	0x200014ac
 8007d40:	200014a4 	.word	0x200014a4

08007d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d50:	4b27      	ldr	r3, [pc, #156]	; (8007df0 <prvHeapInit+0xac>)
 8007d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00c      	beq.n	8007d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3307      	adds	r3, #7
 8007d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0307 	bic.w	r3, r3, #7
 8007d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	4a1f      	ldr	r2, [pc, #124]	; (8007df0 <prvHeapInit+0xac>)
 8007d74:	4413      	add	r3, r2
 8007d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d7c:	4a1d      	ldr	r2, [pc, #116]	; (8007df4 <prvHeapInit+0xb0>)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d82:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <prvHeapInit+0xb0>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d90:	2208      	movs	r2, #8
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1a9b      	subs	r3, r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <prvHeapInit+0xb4>)
 8007da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <prvHeapInit+0xb4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2200      	movs	r2, #0
 8007dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dae:	4b12      	ldr	r3, [pc, #72]	; (8007df8 <prvHeapInit+0xb4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	1ad2      	subs	r2, r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <prvHeapInit+0xb4>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4a0a      	ldr	r2, [pc, #40]	; (8007dfc <prvHeapInit+0xb8>)
 8007dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <prvHeapInit+0xbc>)
 8007dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <prvHeapInit+0xc0>)
 8007dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007de2:	601a      	str	r2, [r3, #0]
}
 8007de4:	bf00      	nop
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	20001098 	.word	0x20001098
 8007df4:	20001498 	.word	0x20001498
 8007df8:	200014a0 	.word	0x200014a0
 8007dfc:	200014a8 	.word	0x200014a8
 8007e00:	200014a4 	.word	0x200014a4
 8007e04:	200014ac 	.word	0x200014ac

08007e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e10:	4b28      	ldr	r3, [pc, #160]	; (8007eb4 <prvInsertBlockIntoFreeList+0xac>)
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e002      	b.n	8007e1c <prvInsertBlockIntoFreeList+0x14>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d8f7      	bhi.n	8007e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	4413      	add	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d108      	bne.n	8007e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	441a      	add	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	441a      	add	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d118      	bne.n	8007e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d00d      	beq.n	8007e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	441a      	add	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e008      	b.n	8007e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e003      	b.n	8007e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d002      	beq.n	8007ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20001498 	.word	0x20001498
 8007eb8:	200014a0 	.word	0x200014a0

08007ebc <__libc_init_array>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	4d0d      	ldr	r5, [pc, #52]	; (8007ef4 <__libc_init_array+0x38>)
 8007ec0:	4c0d      	ldr	r4, [pc, #52]	; (8007ef8 <__libc_init_array+0x3c>)
 8007ec2:	1b64      	subs	r4, r4, r5
 8007ec4:	10a4      	asrs	r4, r4, #2
 8007ec6:	2600      	movs	r6, #0
 8007ec8:	42a6      	cmp	r6, r4
 8007eca:	d109      	bne.n	8007ee0 <__libc_init_array+0x24>
 8007ecc:	4d0b      	ldr	r5, [pc, #44]	; (8007efc <__libc_init_array+0x40>)
 8007ece:	4c0c      	ldr	r4, [pc, #48]	; (8007f00 <__libc_init_array+0x44>)
 8007ed0:	f000 f8f2 	bl	80080b8 <_init>
 8007ed4:	1b64      	subs	r4, r4, r5
 8007ed6:	10a4      	asrs	r4, r4, #2
 8007ed8:	2600      	movs	r6, #0
 8007eda:	42a6      	cmp	r6, r4
 8007edc:	d105      	bne.n	8007eea <__libc_init_array+0x2e>
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee4:	4798      	blx	r3
 8007ee6:	3601      	adds	r6, #1
 8007ee8:	e7ee      	b.n	8007ec8 <__libc_init_array+0xc>
 8007eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eee:	4798      	blx	r3
 8007ef0:	3601      	adds	r6, #1
 8007ef2:	e7f2      	b.n	8007eda <__libc_init_array+0x1e>
 8007ef4:	080081dc 	.word	0x080081dc
 8007ef8:	080081dc 	.word	0x080081dc
 8007efc:	080081dc 	.word	0x080081dc
 8007f00:	080081e0 	.word	0x080081e0

08007f04 <__retarget_lock_acquire_recursive>:
 8007f04:	4770      	bx	lr

08007f06 <__retarget_lock_release_recursive>:
 8007f06:	4770      	bx	lr

08007f08 <memcpy>:
 8007f08:	440a      	add	r2, r1
 8007f0a:	4291      	cmp	r1, r2
 8007f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f10:	d100      	bne.n	8007f14 <memcpy+0xc>
 8007f12:	4770      	bx	lr
 8007f14:	b510      	push	{r4, lr}
 8007f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f1e:	4291      	cmp	r1, r2
 8007f20:	d1f9      	bne.n	8007f16 <memcpy+0xe>
 8007f22:	bd10      	pop	{r4, pc}

08007f24 <memset>:
 8007f24:	4402      	add	r2, r0
 8007f26:	4603      	mov	r3, r0
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d100      	bne.n	8007f2e <memset+0xa>
 8007f2c:	4770      	bx	lr
 8007f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f32:	e7f9      	b.n	8007f28 <memset+0x4>

08007f34 <cleanup_glue>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	460c      	mov	r4, r1
 8007f38:	6809      	ldr	r1, [r1, #0]
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	b109      	cbz	r1, 8007f42 <cleanup_glue+0xe>
 8007f3e:	f7ff fff9 	bl	8007f34 <cleanup_glue>
 8007f42:	4621      	mov	r1, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f4a:	f000 b869 	b.w	8008020 <_free_r>
	...

08007f50 <_reclaim_reent>:
 8007f50:	4b2c      	ldr	r3, [pc, #176]	; (8008004 <_reclaim_reent+0xb4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4283      	cmp	r3, r0
 8007f56:	b570      	push	{r4, r5, r6, lr}
 8007f58:	4604      	mov	r4, r0
 8007f5a:	d051      	beq.n	8008000 <_reclaim_reent+0xb0>
 8007f5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f5e:	b143      	cbz	r3, 8007f72 <_reclaim_reent+0x22>
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d14a      	bne.n	8007ffc <_reclaim_reent+0xac>
 8007f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	b111      	cbz	r1, 8007f72 <_reclaim_reent+0x22>
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 f857 	bl	8008020 <_free_r>
 8007f72:	6961      	ldr	r1, [r4, #20]
 8007f74:	b111      	cbz	r1, 8007f7c <_reclaim_reent+0x2c>
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 f852 	bl	8008020 <_free_r>
 8007f7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f7e:	b111      	cbz	r1, 8007f86 <_reclaim_reent+0x36>
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 f84d 	bl	8008020 <_free_r>
 8007f86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007f88:	b111      	cbz	r1, 8007f90 <_reclaim_reent+0x40>
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 f848 	bl	8008020 <_free_r>
 8007f90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f92:	b111      	cbz	r1, 8007f9a <_reclaim_reent+0x4a>
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 f843 	bl	8008020 <_free_r>
 8007f9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007f9c:	b111      	cbz	r1, 8007fa4 <_reclaim_reent+0x54>
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 f83e 	bl	8008020 <_free_r>
 8007fa4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007fa6:	b111      	cbz	r1, 8007fae <_reclaim_reent+0x5e>
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 f839 	bl	8008020 <_free_r>
 8007fae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007fb0:	b111      	cbz	r1, 8007fb8 <_reclaim_reent+0x68>
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 f834 	bl	8008020 <_free_r>
 8007fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fba:	b111      	cbz	r1, 8007fc2 <_reclaim_reent+0x72>
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f000 f82f 	bl	8008020 <_free_r>
 8007fc2:	69a3      	ldr	r3, [r4, #24]
 8007fc4:	b1e3      	cbz	r3, 8008000 <_reclaim_reent+0xb0>
 8007fc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4798      	blx	r3
 8007fcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007fce:	b1b9      	cbz	r1, 8008000 <_reclaim_reent+0xb0>
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007fd6:	f7ff bfad 	b.w	8007f34 <cleanup_glue>
 8007fda:	5949      	ldr	r1, [r1, r5]
 8007fdc:	b941      	cbnz	r1, 8007ff0 <_reclaim_reent+0xa0>
 8007fde:	3504      	adds	r5, #4
 8007fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe2:	2d80      	cmp	r5, #128	; 0x80
 8007fe4:	68d9      	ldr	r1, [r3, #12]
 8007fe6:	d1f8      	bne.n	8007fda <_reclaim_reent+0x8a>
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 f819 	bl	8008020 <_free_r>
 8007fee:	e7ba      	b.n	8007f66 <_reclaim_reent+0x16>
 8007ff0:	680e      	ldr	r6, [r1, #0]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 f814 	bl	8008020 <_free_r>
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	e7ef      	b.n	8007fdc <_reclaim_reent+0x8c>
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	e7ef      	b.n	8007fe0 <_reclaim_reent+0x90>
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	bf00      	nop
 8008004:	20000010 	.word	0x20000010

08008008 <__malloc_lock>:
 8008008:	4801      	ldr	r0, [pc, #4]	; (8008010 <__malloc_lock+0x8>)
 800800a:	f7ff bf7b 	b.w	8007f04 <__retarget_lock_acquire_recursive>
 800800e:	bf00      	nop
 8008010:	200014b0 	.word	0x200014b0

08008014 <__malloc_unlock>:
 8008014:	4801      	ldr	r0, [pc, #4]	; (800801c <__malloc_unlock+0x8>)
 8008016:	f7ff bf76 	b.w	8007f06 <__retarget_lock_release_recursive>
 800801a:	bf00      	nop
 800801c:	200014b0 	.word	0x200014b0

08008020 <_free_r>:
 8008020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008022:	2900      	cmp	r1, #0
 8008024:	d044      	beq.n	80080b0 <_free_r+0x90>
 8008026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800802a:	9001      	str	r0, [sp, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f1a1 0404 	sub.w	r4, r1, #4
 8008032:	bfb8      	it	lt
 8008034:	18e4      	addlt	r4, r4, r3
 8008036:	f7ff ffe7 	bl	8008008 <__malloc_lock>
 800803a:	4a1e      	ldr	r2, [pc, #120]	; (80080b4 <_free_r+0x94>)
 800803c:	9801      	ldr	r0, [sp, #4]
 800803e:	6813      	ldr	r3, [r2, #0]
 8008040:	b933      	cbnz	r3, 8008050 <_free_r+0x30>
 8008042:	6063      	str	r3, [r4, #4]
 8008044:	6014      	str	r4, [r2, #0]
 8008046:	b003      	add	sp, #12
 8008048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800804c:	f7ff bfe2 	b.w	8008014 <__malloc_unlock>
 8008050:	42a3      	cmp	r3, r4
 8008052:	d908      	bls.n	8008066 <_free_r+0x46>
 8008054:	6825      	ldr	r5, [r4, #0]
 8008056:	1961      	adds	r1, r4, r5
 8008058:	428b      	cmp	r3, r1
 800805a:	bf01      	itttt	eq
 800805c:	6819      	ldreq	r1, [r3, #0]
 800805e:	685b      	ldreq	r3, [r3, #4]
 8008060:	1949      	addeq	r1, r1, r5
 8008062:	6021      	streq	r1, [r4, #0]
 8008064:	e7ed      	b.n	8008042 <_free_r+0x22>
 8008066:	461a      	mov	r2, r3
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	b10b      	cbz	r3, 8008070 <_free_r+0x50>
 800806c:	42a3      	cmp	r3, r4
 800806e:	d9fa      	bls.n	8008066 <_free_r+0x46>
 8008070:	6811      	ldr	r1, [r2, #0]
 8008072:	1855      	adds	r5, r2, r1
 8008074:	42a5      	cmp	r5, r4
 8008076:	d10b      	bne.n	8008090 <_free_r+0x70>
 8008078:	6824      	ldr	r4, [r4, #0]
 800807a:	4421      	add	r1, r4
 800807c:	1854      	adds	r4, r2, r1
 800807e:	42a3      	cmp	r3, r4
 8008080:	6011      	str	r1, [r2, #0]
 8008082:	d1e0      	bne.n	8008046 <_free_r+0x26>
 8008084:	681c      	ldr	r4, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	6053      	str	r3, [r2, #4]
 800808a:	4421      	add	r1, r4
 800808c:	6011      	str	r1, [r2, #0]
 800808e:	e7da      	b.n	8008046 <_free_r+0x26>
 8008090:	d902      	bls.n	8008098 <_free_r+0x78>
 8008092:	230c      	movs	r3, #12
 8008094:	6003      	str	r3, [r0, #0]
 8008096:	e7d6      	b.n	8008046 <_free_r+0x26>
 8008098:	6825      	ldr	r5, [r4, #0]
 800809a:	1961      	adds	r1, r4, r5
 800809c:	428b      	cmp	r3, r1
 800809e:	bf04      	itt	eq
 80080a0:	6819      	ldreq	r1, [r3, #0]
 80080a2:	685b      	ldreq	r3, [r3, #4]
 80080a4:	6063      	str	r3, [r4, #4]
 80080a6:	bf04      	itt	eq
 80080a8:	1949      	addeq	r1, r1, r5
 80080aa:	6021      	streq	r1, [r4, #0]
 80080ac:	6054      	str	r4, [r2, #4]
 80080ae:	e7ca      	b.n	8008046 <_free_r+0x26>
 80080b0:	b003      	add	sp, #12
 80080b2:	bd30      	pop	{r4, r5, pc}
 80080b4:	200014b4 	.word	0x200014b4

080080b8 <_init>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	bf00      	nop
 80080bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080be:	bc08      	pop	{r3}
 80080c0:	469e      	mov	lr, r3
 80080c2:	4770      	bx	lr

080080c4 <_fini>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	bf00      	nop
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr
